                                                                                             NIST SP 800-190                                              APPLICATION CONTAINER SECURITY GUIDE


                                                                                             2.3.1   Image Creation, Testing, and Accreditation

                                                                                             In the first phase of the container lifecycle, an app’s components are built and placed into an
                                                                                             image (or perhaps into multiple images). An image is a package that contains all the files
                                                                                             required to run a container. For example, an image to run Apache would include the httpd binary,
                                                                                             along with associated libraries and configuration files. An image should only include the
                                                                                             executables and libraries required by the app itself; all other OS functionality is provided by the
                                                                                             OS kernel within the underlying host OS. Images often use techniques like layering and copy-on-
                                                                                             write (in which shared master images are read only and changes are recorded to separate files) to
                                                                                             minimize their size on disk and improve operational efficiency.

                                                                                             Because images are built in layers, the underlying layer upon which all other components are
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-190




                                                                                             added is often called the base layer. Base layers are typically minimalistic distributions of
                                                                                             common OSs like Ubuntu and Windows Nano Server with the OS kernel omitted. Users begin
                                                                                             building their full images by starting with one of these base layers, then adding application
                                                                                             frameworks and their own custom code to develop a fully deployable image of their unique app.
                                                                                             Container runtimes support using images from within the same OS family, even if the specific
                                                                                             host OS version is dissimilar. For example, a Red Hat host running Docker can run images
                                                                                             created on any Linux base layer, such as Alpine or Ubuntu. However, it cannot run images
                                                                                             created with a Windows base layer.

                                                                                             The image creation process is managed by developers responsible for packaging an app for
                                                                                             handoff to testing. Image creation typically uses build management and automation tools, such as
                                                                                             Jenkins [8] and TeamCity [9], to assist with what is called the “continuous integration” process.
                                                                                             These tools take the various libraries, binaries, and other components of an app, perform testing
                                                                                             on them, and then assemble images out of them based on the developer-created manifest that
                                                                                             describes how to build an image for the app.

                                                                                             Most container technologies have a declarative way of describing the components and
                                                                                             requirements for the app. For example, an image for a web server would include not only the
                                                                                             executables for the web server, but also some machine-parseable data to describe how the web
                                                                                             server should run, such as the ports it listens on or the configuration parameters it uses.

                                                                                             After image creation, organizations typically perform testing and accreditation. For example, test
                                                                                             automation tools and personnel would use the images built to validate the functionality of the
                                                                                             final form application, and security teams would perform accreditation on these same images.
                                                                                             The consistency of building, testing, and accrediting exactly the same artifacts for an app is one
                                                                                             of the key operational and security benefits of containers.

                                                                                             2.3.2   Image Storage and Retrieval

                                                                                             Images are typically stored in central locations to make it easy to control, share, find, and reuse
                                                                                             them across hosts. Registries are services that allow developers to easily store images as they are
                                                                                             created, tag and catalog images for identification and version control to aid in discovery and
                                                                                             reuse, and find and download images that others have created. Registries may be self-hosted or
                                                                                             consumed as a service. Examples of registries include Amazon EC2 Container Registry [10],
                                                                                             Docker Hub [11], Docker Trusted Registry [12], and Quay Container Registry [13].

                                                                                                                                              9
