SP 800-130                                                               August 2013



authenticate to and be authorized by the function’s access control system before the
function is performed. Multiparty controls should be used for highly sensitive functions.
For example, a highly sensitive function should require that two or more individuals be
logged on and authenticated to perform the function.

FR: 6.98 The CKMS design shall specify all functions that require multiparty control,
specifying k and n for each function.

FR: 6.99 For each multiparty function, the CKMS design shall cite or specify any known
rationale (logic, mathematics) as to why any k of the n entities can enable the desired
function, but k−1 of the entities cannot.

6.7.5 Key Splitting
Key splitting is a technique for multiparty control. When a highly sensitive key is
required, n key splits are generated so that any k of the key splits can be used to form the
key, but any k−1 key splits provide no knowledge of the key. Each of the n key splits is
then assigned to one of n trusted entities so that the key cannot be formed unless k of the
entities agree to take part. If any k−1 of the entities had their key splits compromised, the
key could still not be reconstructed by an attacker having all the k−1 key splits. Thus, the
security of the key is distributed. Split knowledge procedures have been used to establish
root or master keys that provide protection to many other keys and whose compromise
would result in a major disaster. These key splits (rather than the plaintext key resulting
from combining the key splits) are often entered into, or output from, the CKMS in
plaintext form for backup purposes.

FR:6.100 The CKMS design shall specify all keys that are managed using key splitting
techniques and shall specify n and k for each technique.

FR:6.101 For each (k, n) key splitting technique used, the CKMS design shall specify
how key splitting is done, and any known rationale (logic, mathematics) as to why any k
of the n key splits can form the key, but k−1 of the key splits provide no information
about the key.

6.8 Compromise Recovery
In an ideal situation, the CKMS would protect all keys and sensitive metadata so that they
are never compromised or modified by unauthorized parties. However, since it is difficult
or even impossible to design a perfect CKMS that prevents all potential security
problems, a CKMS should be designed to detect compromises and unauthorized
modifications, to mitigate their undesirable effects, to alert the appropriate parties of
compromises, and to recover (or help recover) to a secure state once a compromise or
unauthorized modification is discovered. This section addresses how the recovery from a
compromise should occur.

When a CKMS compromise is detected
  a) The compromise should be evaluated to determine its cause and scope,
                                             59
