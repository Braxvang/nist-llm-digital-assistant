                                                                                             NIST SP 800-185                                                              SHA-3 DERIVED FUNCTIONS: CSHAKE,
                                                                                                                                                                         KMAC, TUPLEHASH, AND PARALLELHASH

                                                                                             1         Introduction

                                                                                             Federal Information Processing Standard (FIPS) 202, SHA-3 Standard: Permutation-Based Hash
                                                                                             and Extendable-Output Functions [1], defines four fixed-length hash functions (SHA3-224,
                                                                                             SHA3-256, SHA3-384, and SHA3-512), and two eXtendable Output Functions (XOFs),
                                                                                             SHAKE128 and SHAKE256. These SHAKE (Secure Hash Algorithm KECCAK) functions are a
                                                                                             new kind of cryptographic primitive; unlike earlier hash functions, they are named for their
                                                                                             expected security strength.

                                                                                             FIPS 202 also supports a flexible scheme for domain separation between different functions
                                                                                             derived from KECCAK—the algorithm [2] on which the SHA-3 Standard is based. Domain
                                                                                             separation ensures that different named functions (such as SHA3-512 and SHAKE128) will be
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-185




                                                                                             unrelated. cSHAKE—the customizable version of SHAKE—extends this scheme to allow users
                                                                                             to customize their use of the function, as described below.

                                                                                             Customization is analogous to strong typing in a programming language; such customization
                                                                                             makes it extremely unlikely that computing one function with two different customization strings
                                                                                             will yield the same answer. Thus, two cSHAKE computations with different customization
                                                                                             strings (for example, a key fingerprint and an email signature) are unrelated: knowing one of
                                                                                             these results will give an attacker no information about the other.

                                                                                             This Recommendation defines two cSHAKE variants, cSHAKE128 and cSHAKE256, in Sec. 3,
                                                                                             based on the KECCAK[c] sponge function [3] defined in FIPS 202. It then defines three additional
                                                                                             SHA-3-derived functions, in Secs. 4 through 6, that provide new functionality not directly
                                                                                             available from the more basic functions. They are:

                                                                                                   •    KMAC128 1 and KMAC256, providing pseudorandom functions (PRFs) and keyed hash
                                                                                                        functions with variable-length outputs;
                                                                                                   •    TupleHash128 and TupleHash256, providing functions that hash tuples of input strings
                                                                                                        unambiguously 2; and
                                                                                                   •    ParallelHash128 and ParallelHash256, providing efficient hash functions to hash long
                                                                                                        messages more quickly by taking advantage of parallelism in the processors.

                                                                                             All four functions defined in this Recommendation—cSHAKE, KMAC, TupleHash, and
                                                                                             ParallelHash—have these properties in common:

                                                                                                   •    They are all derived from the functions specified in FIPS 202.
                                                                                                   •    All the functions except cSHAKE are defined in terms of cSHAKE.


                                                                                             1
                                                                                                 KMAC stands for KECCAK Message Authentication Code.
                                                                                             2
                                                                                                 TupleHash processes a tuple of one or more input strings, and incorporates the contents of all the strings, the
                                                                                                 number of strings, and the specific content of each string in the calculation of the resulting hash value. Thus, any
                                                                                                 change (such as moving bytes from one input string to an adjacent one, or removing an empty string from the
                                                                                                 input tuple) is extremely likely to lead to a different result.



                                                                                                                                                         1
