                                                                                               NIST SP 800-178                                                            COMPARISON OF ABAC STANDARDS FOR
                                                                                                                                                                            DATA SERVICES: XACML AND NGAC


                                                                                               4.3   NGAC Decision Function

                                                                                               The NGAC access decision function controls accesses in terms of processes. The user on whose
                                                                                               behalf the process operates must hold sufficient authority over the policy elements involved. The
                                                                                               function process_user(p) denotes the user associated with process p.

                                                                                               Access requests are of the form (p, op, argseq), where p is a process, op is an operation, and
                                                                                               argseq is a sequence of one or more arguments that is compatible with the scope of the
                                                                                               operation. That is, an access request comprises an operation and a list of enumerated arguments
                                                                                               that have their number, type, and order dictated by the operation.
This publication is available free of charge from: http://dx.doi.org/10.6028/NIST.SP.800-178




                                                                                               The access decision function to determine whether an access request can be granted requires a
                                                                                               mapping from an operation and argument sequence pair to a set of access rights and policy
                                                                                               element pairs (i.e., {(ar, pe)}) the process’s user must hold for the request to be granted.

                                                                                               When determining whether to grant or deny an access request, the authorization decision
                                                                                               function takes into account all privileges and restrictions (denies) that apply to a user and its
                                                                                               processes, which are derived from relevant associations and denies, giving restrictions
                                                                                               precedence over privileges:

                                                                                                          A process access request (p, op, argseq) with mapping (op, argseq)→{(ar, pe)}) is
                                                                                                       granted iff for each (ar i , pe i ) in {(ar, pe)}, there exists a privilege (u, ar i , pe i ) where u =
                                                                                                                      process_user(p), and (ar i , pe i ) is not denied for either u or p.

                                                                                               In the context of Figure 7, an access request may be (p, read, o1) where p is u1’s process. The
                                                                                               pair (read, o1) maps to (r, o1). Because there exists a privilege (u1, r, o1) in Table 3 and (r, o1) is
                                                                                               not denied for u1 or p, the access request would be granted. Assume the existence of associations
                                                                                               Division---{create assign-to}---Projects, and Bob---{create assign-from}---Bob Home in the
                                                                                               context of Figure 7, and an access request (p, assign, <o4, Project1>) where p is u2’s process.
                                                                                               The pair (assign, <o4, Project1>) maps to {(create assign-from, o4), (create assign-to, Project1)}.
                                                                                               Because privileges (u2, create assign-from, o4) and (u2, create assign-to, Project1) would exist
                                                                                               under the assumption, and (create assign-from, o4) and (create assign-to, Project1) are not denied
                                                                                               for u2 or p, the request would be granted.

                                                                                               4.4   Administrative Considerations

                                                                                               Many access rights categorized as administrative access rights, such as those needed to create a
                                                                                               file and assign it to a folder, arguably seem non-administrative from a usage standpoint.
                                                                                               Nevertheless, from a policy specification standpoint, they are considered administrative (e.g., in
                                                                                               this case, an association with access rights for creating an object and assigning the object to an
                                                                                               object attribute is needed). The main difference between the two types of access rights is that
                                                                                               non-administrative actions pertain to activities on protected resources represented as objects,
                                                                                               while administrative actions pertain to activities on the policy and attribute representation
                                                                                               comprising the policy elements and relationships defined within and maintained by NGAC.




                                                                                                                                                    29
