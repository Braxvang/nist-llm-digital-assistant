                                                            Practical Combinatorial Testing
 _______________________________________________________

9.2.2 Integrating Combinatorial Tests into the Model

        We will compute covering arrays that give all t-way combinations, with degree of
interaction coverage = 2 for this example. This section describes the use of ACTS as a
standalone command line tool, using a text file input (see Section 3.1). The first step is to
define the parameters and their values in a system definition file that will be used as input
to ACTS. Call this file “in.txt”, with the following format:

       [System]
       [Parameter]
          u_l: 0,1,2
          f_l: 0,1,2
          act: rd,wr
       [Relation]
       [Constraint]
       [Misc]

For this application, the [Parameter] section of the file is all that is needed. Other tags refer
to advanced functions that will be explained in other documents.               After the system
definition file is saved, run ACTS as shown below:
       java -Ddoi=2 –jar acts_cmd.jar ActsConsoleManager in.txt out.txt

The “-Ddoi=2” argument sets the degree of interaction for the covering array that we want
ACTS to compute. In this case we are using simple 2-way, or pairwise, interactions. (For
a system with more parameters we would use a higher strength interaction, but with only
three parameters, 3-way interaction would be equivalent to exhaustive testing.) ACTS
produces the output shown in Figure 29.

        Each test configuration defines a set of values for the input parameters u_l, f_l, and
act. The complete test set ensures that all 2-way combinations of parameter values have
been covered. If we had a larger number of parameters, we could produce test
configurations that cover all 3-way, 4-way, etc. combinations. ACTS may output “don’t
care” for some parameter values. This means that any legitimate value for that parameter
can be used and the full set of configurations will still cover all t-way combinations. Since
“don’t care” is not normally an acceptable input for programs being tested, a random value
for that parameter is substituted before using the covering array to produce tests.




                                                                                                    51
