                                                                                               NIST SP 800-183                                                                                            NETWORKS OF ‘THINGS’


                                                                                                           each test case has low “detectability” due to the tiny output space and the probability
                                                                                                           density function for each output.

                                                                                                           This shows that because of the decision trigger primitive, specifically purposed NoTs
                                                                                                           may be inherently untestable without well-placed internal self-tests (assertions 8) upon the
                                                                                                           other 4 primitives to increase testability.

                                                                                               5.          Environment

                                                                                                           As NoTs are likely to rely on factors from outside native environmental boundaries (e.g.,
                                                                                                           sensor readings from a NoT's surrounding external environment, whatever that
This publication is available free of charge from: http://dx.doi.org/10.6028/NIST.SP.800-183




                                                                                                           environment may be), it is equally logical to assume that some form of actuation may be
                                                                                                           in place to effect or at least influence that external environment as a result of a NoT
                                                                                                           action. Thus, it is feasible that an eUtility may be more than a software-driven virtual
                                                                                                           entity as is strongly implied, but could also a cyber-physical or purely a mechanical
                                                                                                           actuator (e.g. control surface hydraulics on an aircraft) that extends an action to influence
                                                                                                           a NoT environment as opposed to only influencing the internal workings of the NoT
                                                                                                           itself. This raises the larger question of how a NoT and its environment interact, not only
                                                                                                           at the element level which is addressed, but, more significantly, at the NoT’s operating
                                                                                                           level.

                                                                                               5         Reliability and Security Primitive Scenarios

                                                                                               The elements lay out key contextual issues related to trustworthiness of a specific NoT. And the
                                                                                               primitives are the building blocks of NoTs. Because trustworthiness is such a broad concept, this
                                                                                               document has mainly focused on two “ilities” related to the five primitives: security and reliability.
                                                                                               People often ask for simple examples of real or hypothetical use cases relating these two “ilities”
                                                                                               to each primitive. The following are examples of simple, hypothetical reliability and security
                                                                                               scenarios associated with each primitive
                                                                                               Sensor reliability: A modern car’s speed sensor is exposed to heat, water, and dust (environment).
                                                                                               Years later, it starts providing inconsistent readings due to naturally occurring fatigue that induces
                                                                                               corrupt sensor data. This is an example of malfunctions caused by environmental conditions.
                                                                                               Sensor security: A smart building’s temperature sensors are easily accessible and this particular
                                                                                               system doesn’t provide a means for validating the firmware’s authenticity. An attacker substitutes
                                                                                               the firmware with one that responds to remote commands. These sensors then become part of a
                                                                                               botnet and can contribute to distributed denial-of-service (DDoS) attacks. This is an example of
                                                                                               physical tampering and altering firmware.
                                                                                               Aggregator reliability: In a smart city environment, thousands of sensors transmit data to a series
                                                                                               of smart gateways that effectively compress several gigabytes of raw data into meaningful
                                                                                               information. A blackout that occurred in part of the city creates an unexpected condition that results
                                                                                               in division by zero, which causes the application to keep crashing for the entire duration of the


                                                                                               8
                                                                                                   Assertions act as “mini-oracles,” because they test internal states during execution and add to the argument that the final output
                                                                                                      was indeed legitimately generated since the internal states that lead to that output were also correct and not dirty.


                                                                                                                                                                  20
