                                                                               GUIDE TO SECURE WEB SERVICES



 Targeting specific vulnerabilities in scripting languages
 Causing buffer overflows.
A.7     Malicious Code Attacks

NOTE: This discussion focuses mainly on malicious code attacks against Web services in deployment.
Countermeasures against insertion of malicious code into the Web service in development fall within the
realm of configuration management practices, and are beyond the scope of this SP.

The objective of malicious code is to replace or augment the service’s valid logic with malicious code that
intentionally subverts or prevents the service’s intended operation.

Malicious code attacks are most often achieved by including executable commands in what is expected to
be non-executable input. In some cases, these commands provide pointers (links) to locations at which
malicious code resides and from which, as soon as the location is accessed, it will be automatically
downloaded to the targeted system. The following sections describe specific malicious code “delivery
mechanisms” (attacks).

Tools and technologies to detect when an application has been subverted by malicious code or to prevent
malicious code from entering a system are being researched. Such technologies would expand the
definition of trust in Web services to include whether a particular entity is malicious. Until that point,
malicious code attacks can be prevented by minimizing any other available attack vectors and by
thoroughly validating input prior to processing it.

A.7.1     Command Injection

Attackers may take advantage of the command injection techniques discussed in Appendix A.6 to insert
malicious code into a Web service. Command injection can result in running executable content on the
Web service or inserting specially crafted data into the Web service’s data store. Successfully injecting
executable content may allow the attacker to gain full or partial control over the operation of the Web
service, allowing for modification of any processing logic. Injecting specially crafted data may produce
similar results. For example, an XML injection attack may cause the SOAP response from the now-
malicious Web service to include extra XML content that will be interpreted by the requester to perform a
specific action.

A.7.2     Malformed Content

This type of attack attempts to exploit the targeted Web service by discovering backdoors in its host
platform. Many attackers attempt to elevate their privilege levels to incur further damage or gain further
data from the service. Such attacks include inserting incorrectly formatted or otherwise invalid content
into SOAP messages or their XML payloads destined for a Web service that does not perform input
validation or adequate exception handling. Tampering with XML data and SOAP messages in transit can
produce malformed content that is transmitted between services.

A.7.3     Logic Bombs, Trapdoors, and Backdoors

A logic bomb is malicious code that is left dormant until the Web service reaches a certain state, at which
point the malicious code is executed. A trapdoor or backdoor is malicious code that has the specific
objective of enabling the attacker (or the Web service that acts as a proxy service on the attacker’s behalf)
to bypass the targeted Web service’s (or its host’s) authentication mechanisms to gain access to sensitive
data or resources, without being detected. Logic bombs, trapdoors, and backdoors are usually delivered


                                                    A-12
