Practical Combinatorial Testing
________________________________________________________________

orthogonal array, OAλ (N;t, k,v) is an N x k array. In every N x t subarray, each t-tuple
occurs exactly λ times. We refer to t as the strength of the coverage of interactions, k as the
number of parameters or components (degree), and v as the number of possible values for
each parameter or component (order).

Example. Suppose we have a system with three on-off switches, controlled by an
embedded processor. The following table tests all pairs of switch settings exactly once
each. Thus t = 2, λ = 1, v = 2. Note that there are vt = 22 possible combinations of values
for each pair: 00, 01, 10, 11. There are C(3,2) = 3 ways to select switch pairs: (1,2), (1,3),
and (2,3), and each test covers three pairs, so the four tests cover a total of 12 combinations
which implies that each combination is covered exactly once. As one might suspect, it can
be very challenging to fit all combinations to be covered into a set of tests exactly the same
number of times.
                                      Test Sw 1 Sw 2 Sw 3
                                       1    0    0    0
                                       2    0    1    1
                                       3    1    0    1
                                       4    1    1    0

Covering Arrays

       An alternative to an orthogonal array is a set called a covering array, which includes
all t-way combinations of parameter values, for the desired strength t. A covering array,
 CAλ (N;t,k,v) , is an N x k array. In every N x t subarray, each t-tuple occurs at least λ times.
Note this distinction between covering arrays and orthogonal arrays discussed in the
previous section. The covering array relaxes the restriction that each combination is
covered exactly the same number of times. Thus covering arrays may result in some test
duplication, but they offer the advantage that they can be computed for much larger
problems than is possible for orthogonal arrays. Software described elsewhere in this book
can efficiently generate covering arrays up to strength t = 6, for a large number of
variables.
       The problems discussed in this publication deal only with the case when λ = 1, (i.e.
that every t-tuple must be covered at least once). In software testing, each row of the
covering array represents a test, with one column for each parameter that is varied in
testing. Collectively, the rows of the array include every t-way combination of parameter
values at least once. For example, Figure 1 shows a covering array that includes all 3-way
combinations of binary values for 10 parameters. Each column gives the values for a
particular parameter. It can be seen that any three columns in any order contain all eight
possible combinations of the parameter values. Collectively, this set of tests will exercise
all 3-way combinations of input values in only 13 tests, as compared with 1,024 for
exhaustive coverage.




62
