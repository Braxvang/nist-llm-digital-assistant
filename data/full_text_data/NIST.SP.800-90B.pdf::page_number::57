                                                                                             NIST SP 800-90B                                              RECOMMENDATION FOR THE ENTROPY SOURCES
                                                                                                                                                                  USED FOR RANDOM BIT GENERATION

                                                                                                 4. Calculate an upper bound on the probability of the most common value 𝑝𝑝𝑢𝑢 as

                                                                                                                                                            𝑝𝑝̂ (1 − 𝑝𝑝̂ )
                                                                                                                                 𝑝𝑝𝑢𝑢 = min �1, 𝑝𝑝̂ + 2.576�               �,
                                                                                                                                                                𝐿𝐿 − 1

                                                                                                 5. The entropy estimate is calculated as –log2 (𝑝𝑝𝑢𝑢 ).
                                                                                             Example: For the purpose of this example, suppose that the cutoff is 3 instead of 35 in step 1.
                                                                                             Suppose that S = (2, 2, 0, 1, 0, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 0, 0, 1, 0, 0, 0), and L = 21. In step 1, u is
                                                                                             calculated as 4, as the frequency of the most common 4-tuple is 2. In step 2, v is calculated as 5.
                                                                                             After step 3, P4 = 0.0131, P5 = 0.0074, Pmax,4 = 0.3381, Pmax,5 = 0.3744, and 𝑝𝑝̂ =
                                                                                              max(0.3381, 0.3744) = 0.3744. After step 4, 𝑝𝑝𝑢𝑢 = 0.6531. The min-entropy estimate is −log2
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-90B




                                                                                             (0.6531) = 0.6146.

                                                                                             6.3.7   Multi Most Common in Window Prediction Estimate

                                                                                             The Multi Most Common in Window (MultiMCW) predictor contains several subpredictors, each
                                                                                             of which aims to guess the next output, based on the last w outputs. Each subpredictor predicts the
                                                                                             value that occurs most often in that window of w previous outputs. The MultiMCW predictor keeps
                                                                                             a scoreboard that records the number of times that each subpredictor was correct, and uses the
                                                                                             subpredictor with the most correct predictions to predict the next value. In the event of a tie, the
                                                                                             most common sample value that has appeared most recently is predicted. This predictor was
                                                                                             designed for cases where the most common value changes over time, but still remains relatively
                                                                                             stationary over reasonable lengths of the sequence.

                                                                                             Given the input S = (s1, …, sL), where si ϵ A = {x1, …, xk},

                                                                                                 1. Let window sizes be w1=63, w2=255, w3=1023, w4=4095, and N = L − w1. Let correct be
                                                                                                    an array of N Boolean values, each initialized to 0.
                                                                                                 2. Let scoreboard be a list of four counters, each initialized to 0. Let frequent be a list of four
                                                                                                    values, each initialized to Null. Let winner = 1.
                                                                                                 3. For i = w1 + 1 to L:
                                                                                                         a. For j =1 to 4,
                                                                                                                  i. If i > wj, let frequentj be the most frequent value in (si-wj, si-wj+1, …, si-1). If
                                                                                                                     there is a tie, then the most frequent value that has appeared most recently
                                                                                                                     is assigned to frequentj.
                                                                                                                 ii. Else, let frequentj = Null.
                                                                                                         b. Let prediction = frequentwinner.
                                                                                                         c. If (prediction = si), let correcti- w1 = 1.
                                                                                                         d. Update the scoreboard. For j =1 to 4,
                                                                                                                  i. If (frequentj = si)
                                                                                                                          1. Let scoreboardj = scoreboardj +1

                                                                                                                                                   49
