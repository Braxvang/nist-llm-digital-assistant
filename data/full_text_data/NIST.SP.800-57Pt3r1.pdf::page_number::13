unavailability of certain algorithms or key sizes, the preferences of the communicating
parties or other system limitations. When servers dictate the algorithms used, the server
may select the algorithms that optimize overall system performance, rather than the ones
that provide the highest level of security.

In some multi-party protocols where multiple algorithms are supported for the same
purpose, a client can enforce the rules in Parts 1 and 2 through negotiation within the
protocol. Some protocols (e.g., S/MIME) allow the initiating client to select the
cryptographic algorithms without negotiating with the receiving client. In this case, as in
the case where applications do not permit negotiation, a receiving client may be presented
with information that has been inadequately protected. For example, a receiving client
may receive a signed and encrypted S/MIME e-mail message that was encrypted using
DES and signed with a 512-bit RSA key2. Rejecting such messages does not necessarily
enhance security (in this case, the message has already been sent over the Internet), but
the receiving user should be aware that the security services purportedly provided by the
digital signature and content encryption are suspect and cannot be depended upon. It may
be appropriate to reject the message or terminate the protocol. A risk assessment and
subsequent organizational policy may be required to determine the appropriate course of
action.

In other protocols (e.g., Transport Layer Security (TLS)), the client proposes a set of
options, and the server chooses from the proposed list during a negotiation phase of the
protocol. Where negotiation is supported, protocols may be designed to negotiate cipher
suites or to negotiate each algorithm independently. In either case, a client or server may
be faced with a situation where the preferred algorithms of the client or server and the
proposed algorithms of the other party are not of the same security strength, or where
approved algorithms are not available.

Another issue may arise when a protocol is designed to negotiate algorithms, but not key
sizes. In such a case, the clients may find themselves communicating with approved
algorithms, but inadequate key sizes. For example, after negotiating for RSA signatures,
the client might get a message signed with a 512-bit RSA key3.

Enforcing the recommendations from Parts 1 and 2 may also be complicated by system or
application design decisions. Systems may have application-specific controls for
cryptographic algorithms, or they may have system-wide controls. For example, a user
may wish to restrict one application to using AES, and another to using TDEA, while the
system design may only allow the use of TDEA. Often the only limitation on public key
sizes is an indirect limitation through the choice of root Certificate Authority (CA) keys
(see Section 2.1).

When there are a variety of algorithms or key sizes available for a given communication
protocol, the following questions need to be addressed:

2
 The DES algorithm and the 512-bit RSA key size do not provide adequate security (see [SP 800-57 Part
1]).
3
    A 512-bit RSA key does not provide an acceptable security strength (see [SP 800-57 Part 1]).

                                                       5
