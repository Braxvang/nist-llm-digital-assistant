                                                                                               NIST SP 800-178                                                     COMPARISON OF ABAC STANDARDS FOR
                                                                                                                                                                     DATA SERVICES: XACML AND NGAC


                                                                                               4.2.3   Prohibitions (Denies)

                                                                                               In addition to assignments and associations, NGAC includes three types of prohibition relations:
                                                                                               user-deny, user attribute-deny, and process-deny. In general, deny relations specify privilege
                                                                                               exceptions. User deny, user attribute deny, and process deny relations are respectively denoted
                                                                                               by u_deny(u, ars, pe), ua_deny(ua, ars, pe), and p_deny(p, ars, pe), where u is a user, ua is a
                                                                                               user attribute, p is a process, ars is an access right set, and pe is a policy element used as a
                                                                                               referent for itself and the policy elements contained by the policy element. The respective
                                                                                               meanings of these relations are that user u, users in ua, and process p cannot execute access
                                                                                               rights in ars on policy elements in pe. User-deny relations and user attribute-deny relations can
This publication is available free of charge from: http://dx.doi.org/10.6028/NIST.SP.800-178




                                                                                               be created directly by an administrator or dynamically as a consequence of an obligation (see
                                                                                               Section 4.2.4). An administrator, for example, could impose a condition where no user is able to
                                                                                               alter his or her own Tax Return, in spite of the fact that the user is assigned to an IRS Auditor
                                                                                               user attribute with capabilities to read/write all tax returns. When created through an obligation,
                                                                                               user-deny and user attribute-deny relations can take on dynamic policy conditions. Such
                                                                                               conditions can, for example, provide support for separation of duty policies (if a user executed
                                                                                               capability x, that user would be immediately precluded from being able to perform capability y).
                                                                                               In addition, the policy element component of each prohibition relation can be specified as its
                                                                                               complement, denoted by ¬. The respective meaning of u_deny(u, ars, ¬pe), ua_deny(ua, ars,
                                                                                               ¬pe), and p_deny(p, ars, ¬pe) is that the user u, any user assigned to ua, and process p cannot
                                                                                               execute the access rights in ars on policy elements not in pe.

                                                                                               Process-deny relations are exclusively created using obligations. Their primary use is in the
                                                                                               enforcement of confinement conditions (e.g., if a process reads Top Secret data, preclude that
                                                                                               process from writing to any object not in Top Secret).

                                                                                               4.2.4   Obligations

                                                                                               Obligations consist of a pair (ep, r) (usually expressed as when ep do r) where ep is an event
                                                                                               pattern and r is a sequence of administrative operations, called a response. The event pattern
                                                                                               specifies conditions that, if matched by the context surrounding a process’s successful execution
                                                                                               of an operation on an object (an event), cause the administrative operations of the associated
                                                                                               response to be immediately executed. The context may pertain to and the event pattern may
                                                                                               specify parameters like the user of the process, the operation executed, and the attribute(s) of the
                                                                                               object.

                                                                                               Obligations can specify operational conditions in support of history-based policies and data
                                                                                               services. Such conditions include conflict of interest (if a user reads information from a sensitive
                                                                                               data set, that user is prohibited from reading data from a second data set) and workflow
                                                                                               (approving (writing to a field of)) a work item enables a second user to read and approve the
                                                                                               work item). Also, included among history-based policies are those that prevent leakage of data to
                                                                                               unauthorized principals. The use of an obligation to prevent data leakage is discussed in Section
                                                                                               4.5.




                                                                                                                                                28
