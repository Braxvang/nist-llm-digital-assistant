                                                                                              NIST SP 800-204C                                             DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                  APPLICATION WITH SERVICE MESH

                                                                                                 4. Monitoring component (modules involved in ascertaining the parameters that indicate the
                                                                                                    health of the application), which performs functions (e.g., log aggregation, the generation
                                                                                                    of metrics, the generation of displays for dashboard, etc.) and contains observability as
                                                                                                    code.

                                                                                              The distribution of policy and observability code types within the components of the service
                                                                                              mesh are as follows:

                                                                                                 •   Proxies (ingress, sidecar, and egress): These house encoding policies related to session
                                                                                                     establishment, routing, authentication, and authorization functions.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                                 •   Control plane of the service mesh: This houses code for relaying telemetry information
                                                                                                     from services captured and sent by proxies to specialized monitoring tools, authentication
                                                                                                     certificate generation and maintenance, updating policies in the proxies, monitoring
                                                                                                     overall configuration in the service orchestration platform for generating new proxies, and
                                                                                                     deleting obsolete proxies associated with discontinued microservices.
                                                                                                 •   External modules: These house modules that perform specialized functions at the
                                                                                                     application and enterprise levels (e.g., such as the centralized authorization or entitlement
                                                                                                     server, the centralized logger, monitoring/alerting server status through dashboards, etc.)
                                                                                                     and build a comprehensive view of the application status. These modules are called by
                                                                                                     code from the proxies or the control plane.

                                                                                              4.2 CI/CD Pipeline for Application Code and Application Services Code

                                                                                              Application code and application services code reside in the container orchestration and resource
                                                                                              management platform, and the CI/CD software that implements the workflows associated with it
                                                                                              usually resides in the same platform. This pipeline should be protected using the steps outlined in
                                                                                              Section 4.6, and the application code under the control of this pipeline should be subject to the
                                                                                              security testing described in Section 4.8. Additionally, the orchestration platform on which the
                                                                                              application resides should itself be protected using a runtime security tool (e.g., Falco) [27] that
                                                                                              can read OS kernel logs, container logs, and platform logs in real-time and process them against a
                                                                                              threat detection rules engine to alert users of malicious behavior (e.g., creation of a privileged
                                                                                              container, reading of a sensitive file by an unauthorized user, etc.). They usually come with a set
                                                                                              of default (predefined) rules over which custom rules can be added. Installing them on the
                                                                                              platform spins up agents for each node in the cluster, which can monitor the containers running in
                                                                                              the various pods of that node. The advantage of this type of tool is that it complements the existing
                                                                                              platform’s native security measures, such as access control models and pod security policies, that
                                                                                              prevent violations of security by actually detecting them when they occur [27].

                                                                                              4.3. CI/CD Pipeline for Infrastructure as Code

                                                                                              The conventional approach to allocating infrastructure for applications consists of initially
                                                                                              provisioning compute and networking resources with configuration parameters and ongoing tasks
                                                                                              such as patch management (e.g., OS and libraries), establishing conformity to compliance
                                                                                              regulations (e.g., data privacy), and making drift (where the current configuration no longer
                                                                                              provides the intended operational state) correction.
                                                                                                                                               21
