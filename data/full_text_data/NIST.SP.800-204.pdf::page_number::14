                                                                                             NIST SP 800-204                                                            SECURITY STRATEGIES FOR
                                                                                                                                                        MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                                                              Table 1: IPC Mechanisms and API Types

                                                                                                            IPC Mechanism                                 Nature of API Definition
                                                                                                    Asynchronous, message-based              Made up of message channels and message types
                                                                                                  (e.g., Advanced Message Queuing
                                                                                                    Protocol (AMQP) or Simple (or
                                                                                                 Streaming) Text Oriented Messaging
                                                                                                          Protocol. (STOMP))
                                                                                                      Synchronous request/response           Made up of Uniform Resource Locators (URLs) and
                                                                                                    (e.g., HTTP-based REST or Thrift)                 request and response formats
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                             There can be different types of message formats used in IPC communication: text-based and
                                                                                             human-readable, such as JavaScript Object Notation (JSON) or Extensible Markup Language
                                                                                             (XML), or of a purely machine-readable binary format, such as Apache Avro or Protocol buffers.

                                                                                             The principle of autonomy described earlier may call for each microservice to be a self-contained
                                                                                             entity that delivers all of the functions of an application stack. However, for a microservices-
                                                                                             based application that provides multiple business process capabilities (e.g., an online shopping
                                                                                             application that provides business processes such as ordering, shipping, and invoicing), a
                                                                                             component microservice is always dependent, in some fashion, on another microservice (e.g.,
                                                                                             data). In the context of our example, the shipping microservice is dependent upon “unfulfilled
                                                                                             orders” data in the ordering microservice to perform its function of generating a shipping or bill
                                                                                             of lading record. Hence, there is always the need to couple microservices while still retaining
                                                                                             autonomy. The various approaches to creating the coupling, which are often dictated by business
                                                                                             process and IT infrastructure needs, include interaction patterns, messaging patterns, and
                                                                                             consumption modes. In this document, the term “interaction pattern” is used, and the primary
                                                                                             interaction patterns are as follows.

                                                                                             Request-reply: Two distinct types of requests include queries for the retrieval of information
                                                                                             and commands for a state-changing business function [2]. In the first type, a microservice makes
                                                                                             a specific request for information or to take some action and functionally waits for a response.
                                                                                             The purpose of the request for information is retrieval for presentation purposes. In the second
                                                                                             type, one microservice asks another to take some action involving a state-changing business
                                                                                             function (e.g., a customer modifying their personal profile or submitting an order). In the
                                                                                             request-reply pattern, there is a strong runtime dependency between the two microservices
                                                                                             involved, which manifests in the following two ways:

                                                                                                •     One microservice can execute its function only when the other microservice is available.
                                                                                                •     The microservice making the request must ensure that the request has been successfully
                                                                                                      delivered to the target microservice.
                                                                                             Because of the nature of communication in the request-reply protocol, a synchronous
                                                                                             communication protocol, such as HTTP, is used. If the microservice is implemented with a
                                                                                             REST API, the messages between the microservices become HTTP REST API calls. The REST
                                                                                             APIs are often defined using a standardized language, such as RAML (RESTful API Modeling
                                                                                                                                               6
