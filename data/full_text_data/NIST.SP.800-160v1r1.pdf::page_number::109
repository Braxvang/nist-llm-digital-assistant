NIST SP 800-160v1r1                                                                          Engineering Trustworthy Secure Systems
November 2022

References: [53]

E.16. Least Privilege
Principle: Each system element is allocated privileges that are necessary to accomplish its
specified functions but no more.
Note: System elements can be implemented by entities such as hardware, firmware, software, and
personnel. By design, the system must be able to limit the scope of a system element’s actions. This has
two desirable effects: (1) the impact of a failure, corruption, or misuse of the element is minimized, and
(2) the analysis of the system element is simplified. A design driven by least privilege considerations
results in a sufficiently fine granularity of privilege decomposition and the ability for the fine-grained
allocation of privileges to human and machine elements.
The application of the principle of least privilege means allocating to a system element only the privileges
that are necessary to permit that element to perform the functions required of it. This could include a need
to modify, delete, use, or configure a resource, or to authorize, start/enable, or stop/disable a process [20].
Least privilege can inform the use of other principles such as the employment of Domain Separation and
Structured Decomposition and Composition. That is, the system modules can be designed so that only the
system elements encapsulated by the module are directly accessed or operated on by the functions within
the module, thus aiding the implementation of least privilege.
References: [2] [20] [21] [46]

E.17. Least Sharing
Principle: System resources are shared among system elements only when necessary and among
as few elements as possible. 83
Note: Sharing via common mechanism and other means can increase the susceptibility of system
resources (e.g., data, information, system variables, interfaces, functions, services) to unauthorized access,
disclosure, use, or modification and can adversely affect the capabilities provided by the system.
According to Saltzer and Schroeder [46], “Every shared mechanism (especially one involving shared
variables) represents a potential information path between users and must be designed with great care to
be sure it does not unintentionally compromise security.” A design that employs least sharing helps
reduce the adverse consequences that can result from sharing system functions, state, resources, and
variables among different system elements. A system element that corrupts a shared state or shared
variables has the potential to corrupt other elements whose behavior is dependent on the state. Minimized
sharing also helps to simplify the design and implementation [54].
Two criteria provide the basis for applying the principle of least sharing: (1) share only if absolutely
necessary, and (2) minimize sharing if allowed. The first criterion is a trade decision that weighs the cost
and benefit of sharing resources against the increased exposure that results from the sharing. The second
criterion is a constraint on the extent of sharing.
References: [2] [21] [46] [54] [55]




83
   The historically well-known security design principle least common mechanism is an instance of least sharing. The principle of least common
mechanism is described in [55].



                                                                      93
