       ï€¼     Attack Vectors. Multi-tenancy in virtual machine-based cloud infrastructures, together
             with the subtleties in the way physical resources are shared between guest virtual
             machines, can give rise to new sources of threat. The most serious threat is that
             malicious code can escape the confines of its virtual machine and interfere with the
             hypervisor or other guest virtual machines. Live migration, the ability to transition a
             virtual machine between hypervisors on different host computers without halting the
             guest operating system, and other features provided by virtual machine monitor
             environments to facilitate systems management, also increase software size and
             complexity and potentially add other areas to target in an attack.

             Several examples illustrate the types of attack vectors possible. The first is mapping the
             cloud infrastructure. While seemingly a daunting task to perform, researchers have
             demonstrated an approach with a popular IaaS cloud [Ris09]. By launching multiple
             virtual machine instances from multiple cloud consumer accounts and using network
             probes, assigned IP addresses and domain names were analyzed to identify service
             location patterns. Building on that information and general technique, the plausible
             location of a specific target virtual machine could be identified and new virtual machines
             instantiated to be eventually co-resident with the target.

             Once a suitable target location is found, the next step for the guest virtual machine is to
             bypass or overcome containment by the hypervisor or to takedown the hypervisor and
             system entirely. Weaknesses in the provided programming interfaces and the processing
             of instructions are common targets for uncovering vulnerabilities to exploit [Fer07]. For
             example, a serious flaw that allowed an attacker to write to an arbitrary out-of-bounds
             memory location was discovered in the power management code of a hypervisor by
             fuzzing emulated I/O ports [Orm07].15 A denial of service vulnerability, which could
             allow a guest virtual machine to crash the host computer along with the other virtual
             machines being hosted, was also uncovered in a virtual device driver of a popular
             virtualization software product [Vmw09].

             More indirect attack avenues may also be possible. For example, researchers developed a
             way for an attacker to gain administrative control of guest virtual machines during a live
             migration, by employing a man-in-the-middle attack to modify the code used for
             authentication [Obe08a]. Memory modification during migration presents other
             possibilities, such as the potential to insert a virtual machine-based rootkit layer below
             the operating system [Kin06]. A zero-day exploit in HyperVM, an open source
             application for managing virtual private servers, purportedly led to the destruction of
             approximately 100,000 virtual server-based Websites hosted by a service provider
             [Goo09b]. Another example of an indirect attack involves monitoring resource
             utilization on a shared server to gain information and perhaps perform a side-channel
             attack, similar to attacks used against implementations of cryptographic mechanisms in



15
     Fuzzing is a type of fault injection technique that involves sending pseudorandom data to an interface to discover flaws.




                                                                    28
