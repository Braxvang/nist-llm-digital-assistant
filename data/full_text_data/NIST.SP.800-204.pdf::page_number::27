                                                                                             NIST SP 800-204                                                              SECURITY STRATEGIES FOR
                                                                                                                                                          MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                                        location of the microservices (e.g., at the micro gateway) or sometimes at the
                                                                                                        microservice itself.
                                                                                                   •    Caching Mechanism: It may be appropriate to allow microservices to cache policy data;
                                                                                                        this cache should be only relied upon when an access server is unavailable and should
                                                                                                        expire after a duration appropriate for the environment/infrastructure.
                                                                                                   •    The access server should be capable of supporting fine-grained policies.
                                                                                                   •    Access decisions from the access server should be conveyed to individual and sets of
                                                                                                        microservices through standardized tokens encoded in a platform-neutral format (e.g.,
                                                                                                        OAuth 2.0 token encoded in JSON format). The token can be either a handle-based token
                                                                                                        or an assertion bearing token.
                                                                                                   •    The scope of internal authorization tokens appended by the micro gateway or decision
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                                        point to each request should be carefully controlled; for example, in a request for
                                                                                                        transaction, the internal authorization token should be limited in scope to only involve the
                                                                                                        API endpoints that must be accessed for that transaction.
                                                                                                   •    The API gateway can be leveraged to centralize enforcement of authentication and access
                                                                                                        control for all downstream microservices, eliminating the need to provide authentication
                                                                                                        and access control for each of the individual services. If this design is chosen, any
                                                                                                        component suitably positioned on the network can make anonymous connections to the
                                                                                                        services bypassing the API gateway and its protections. Mitigating controls such as
                                                                                                        mutual authentication should be leveraged to prevent direct, anonymous connections to
                                                                                                        the services.

                                                                                             4.2       Strategies for Service Discovery Mechanism

                                                                                             Microservices may have to be replicated and located anywhere in the enterprise or cloud
                                                                                             infrastructure for optimal performance and load balancing reasons. In other words, services
                                                                                             could be frequently added or removed and dynamically assigned to any network location.
                                                                                             Hence, it is inevitable in a microservices-based application architecture to have a service
                                                                                             discovery mechanism, which is typically implemented using the service registry. The service
                                                                                             registry service is used by microservices that are coming online to publish their locations in a
                                                                                             process called service registration and is also used by microservices seeking to discover
                                                                                             registered services. The service registry must therefore be configured with confidentiality,
                                                                                             integrity, and availability considerations.

                                                                                             In service-oriented architectures (SOA), service discovery is implemented as part of the
                                                                                             centralized enterprise service bus (ESB). However, in microservices architecture—where the
                                                                                             business functions are packaged and deployed as services within containers and communicate
                                                                                             with each other using API calls—it is necessary to implement a lightweight message bus that
                                                                                             can implement all three interaction styles mentioned in Section 2.5. Additionally, alternatives
                                                                                             to the ways in which service registry service can be implemented span two dimensions: (a) the
                                                                                             way clients access the service registry service and (b) centralized versus distributed service
                                                                                             registry. Clients can access the service registry service using two primary methods: client-side
                                                                                             discovery pattern and server-side discovery pattern [9].



                                                                                                                                                19
