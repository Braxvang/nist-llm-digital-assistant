Practical Combinatorial Testing
________________________________________________________________
      The situation is more complex with continuous variables. If, for example, a failure-
related branch is taken any time x > 100, y = 3, z < 1000, there may be many combinations
implicated in the failure. Analysis will show that [x = 200, y = 3, z = 120], [x = 201, y = 3,
z = 119], [x = 999, y = 3, z = 999], [x = 101, y = 3, z = 0], [x = 200, y = 3, z = 0] are all
combinations that trigger the failure. With more than three input parameters, there may be
dozens or hundreds of failure-triggering combinations, even though there is most likely a
single point in the code that is in error.


10.2 Cost and Practical Considerations

      As shown in the example above, it is a non-trivial matter to determine the failure-
triggering combination(s) from test results alone. When source code is available, the
methods described in this section are probably unnecessary, and can be replaced with
conventional debugging techniques. In black-box testing situations where there is no
source code, these methods may be useful in narrowing the search for failure-triggering
combinations. Tools to implement these methods have been developed and are available
from the ACTS project site.


10.3 Chapter Summary

        When source code is available, the best way to identify the cause of a failure is with
conventional debugging techniques, since the error must be fixed in code anyway. With
pure black-box testing and no access to source code, the heuristics discussed in this chapter
may help to narrow down possible causes. Usually there will be many combinations
identified as possible causes, so substantial additional testing may be needed to determine
the exact cause.




60
