                                                              GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



programs within an application. More complex macro languages often include programming controls
(such as if, else, or while statements) and language features that make them comparable to a scripting
language. A virus can be written as a macro stored in a spreadsheet or a word processing document.
When the document is opened for viewing or use, the macro will be executed and the virus activated. It
may also attach itself to subsequent documents that are saved with the application. For these reasons,
under normal circumstances desktop applications should not be configured to open automatically for
another desktop application, such as a browser or email client, that receives untrusted content.

The Melissa virus illustrates the risk involved [Sha99]. A Microsoft Word document containing a
malicious Visual Basic for Applications (VBA) macro propagated itself through the Internet by sending
the host document as an email attachment addressed to contacts found in the previous victim’s address
book. A contact opening the attachment permitted the macro to execute and the virus to take hold. As
with many macro languages, VBA is an integral part of Microsoft Office applications, included as a
means for developers to build custom solutions within that environment. VBA is a superset of VBScript
and offers the same automation and customization capabilities, but within the context of a desktop
application.

The newer generation of email applications, including the ones built into Web browsers, support HTML
content, MIME attachments and—potentially, via AJAX, JavaScript. Since active content provides many
avenues for exploits, such mail content should be opened only after consideration of the inherent risks.
These risks exist in part because of the dual roles for which HTML is being used. On the one hand,
HTML is surpassing plain, non-tagged ASCII as a common means for composing and exchanging
documents. On the other hand, HTML is also being used as an environment to house such scripting
languages, Java applets, and ActiveX components. By combining the flexibility to send and receive
HTML content with its ability to embody scripts and other forms of programs that have full access to
memory and files, the potential for abuse increases.

4.1.7   Plug-ins and Extensions

Plug-ins and extensions are native code modules or scripts that work in conjunction with software
applications to enhance their capabilities. Plug-ins are often added to Web browsers to enable them to
support new types of content (e.g. additional audio or video formats), while extensions typically add new
functionality to the browser (e.g., improved bookmarking). Plug-ins and extensions have also been
devised for email clients and other desktop software. They can be downloaded from either the browser
manufacturer’s site or a third-party site. Browsers typically prompt the user to download a new plug-in
when a document requires functionality beyond the browser’s current capabilities. Although plug-ins and
extensions allow browsers to support new types of content and functionality, they are not active content in
and of themselves, but simply executables that enable active content technologies. Windows Media
Player, RealPlayer, QuickTime, ShockWave, and Flash are all examples of plug-ins that allow browsers
to support new content types, such as audio, video, and interactive animation. Extensions are usually
browser-specific, offering a variety of functionality from FTP clients to automatic form fill-out.

Thus, there are two security concerns with plug-ins and extensions: the behavior of active content
processed by an installed plug-in, and the behavior of the plug-in executables themselves once they are
downloaded and installed. Plug-ins and extensions can bypass a browser’s underlying security model.
For instance, the ShockWave plug-in from Adobe provides the ability to render multimedia presentations
(created in a compatible format) as they are downloaded. By design, Shockwave content supports the
Lingo interpretative language as an aid to presentation development. Early versions of Lingo allowed the
author to make local system calls based on the platform executing the content, potentially allowing
malicious code to be downloaded as part of the presentation. Another example is the Firefox browser
extension called GreaseMonkey that allows users to install scripts to make dynamic changes to HTML


                                                   4-7
