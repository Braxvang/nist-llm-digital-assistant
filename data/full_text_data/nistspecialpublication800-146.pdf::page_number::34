                                                                       CLOUD COMPUTING SYNOPSIS AND RECOMMENDATIONS



5.     Software-as-a-Service Environments

The purpose of this section is to describe the architecture and basic operation of SaaS, or Software as a
Service, in a cloud-computing environment. This information is important for readers who need to
evaluate whether a SaaS cloud offering can satisfy particular reliability, compliance, or security
requirements, and also for readers who want to understand operational mechanisms.

The term SaaS dates from the 1990s and thus predates the term cloud computing. SaaS is also known
commonly as “Web services.” SaaS systems can be implemented in a number of different ways; using
the SaaS maturity model of [Cho06], the most advanced architectures for SaaS appear to satisfy the NIST
definition of cloud computing. While many slightly different definitions of SaaS are possible, a simple
and usable definition has already been formulated:

               “Software deployed as a hosted service and accessed over the Internet.” [Cho06]

Fundamentally, cloud computing provides convenient rental of computing resources. These resources,
which are typically accessed by consumers over a network, must be measurable in units that can be

                                                    SaaS
     Who are the consumers?
       1. Organizations providing their members or employees with access to typical software
           applications such as office productivity or email.
       2. End users who directly use software applications, whether on their own behalf or that of
           their organization.
       3. Software application administrators who configure an application for end users.

     What does a consumer get? The right to use specific applications on demand, and application data
           management, such as backup and data sharing between consumers.

     How are usage fees calculated? Typically, based on the number of users, the time in use, per-
           execution, per-record-processed, network bandwidth consumed, and quantity/duration of
           data stored.


individually allocated to specific consumers, and paid for based on factors such as how long the units are
retained, who has access to them, how they are used, etc. In the case of SaaS, what is being rented is
access to an application [Sii01]. Typically, access to the application is over a network connecting the
SaaS provider with the consumer. For public or outsourced SaaS, most application program logic is
executed on the cloud provider's servers. The consumer's browser 11 provides: (1) the consumer interface
that captures consumer keystrokes and other inputs, and produces output in the form of graphics/sound,
and (2) the data export that outputs data to local storage devices such as USB devices or printers. To
protect application data exchanged between the consumer's browser and the cloud provider over the
network, cryptography is required. Typically, the consumer's browser and the cloud provider's server
begin a session by first negotiating a shared key using one of several standard key exchange protocols
(e.g., TLS[Die08] or SSL[Net96]). The consumer's browser and the cloud provider can then use the key
to encrypt communications.12 The consumer and provider can then exchange credentials to prove their
11
   The consumer may use a browser or other thin-client application to communicate with a SaaS cloud; in practice, browsers are
     often used as they require no additional installation. For simplicity, this document describes the consumer-side software
     simply as a "browser."
12
   This protection is not without risk however because past implementation errors or protocol flaws have enabled man-in-the-
     middle attacks that could allow an attacker to hijack a consumer's cloud resources [Mar09].


                                                             5-1
