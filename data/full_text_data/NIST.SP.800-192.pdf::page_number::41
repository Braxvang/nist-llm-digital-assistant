                                                                                             NIST SP 800-192                                                              VERIFICATION & TEST METHODS FOR
                                                                                                                                                                          ACCESS CONTROL POLICIES/MODELS

                                                                                             requirement is caused by an error in the model or the safety requirement itself. More specifically,
                                                                                             before mutation verification is conducted, these safety requirements must be manually inspected
                                                                                             to determine whether they fail due to an error in the model, an error in the safety requirement, or
                                                                                             an error in the environment constraints.

                                                                                                                     Safety requirements


                                                                                                                                                                  Mutant Killed!
                                                                                                                                  Original True,
                                                                                                                                  Mutant True
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-192




                                                                                                                                            Original True,
                                                                                                                                            Mutant False


                                                                                                                                                        Original False,
                                                                                                                                                        Mutant False



                                                                                                                       Original False,
                                                                                                                       Mutant True


                                                                                                               Figure 18 Venn diagram illustrating the four safety requirement states



                                                                                             5.5   Automated Combinatorial Testing

                                                                                             As described in 4.3, a test oracle is required to test the correct implementation of the AC model.
                                                                                             However, a real-world AC system is likely to have far too many variables (subjects, actions,
                                                                                             objects, conditions, etc.) for generating exhaustive test cases based on the safety requirements.
                                                                                             One of the possible solutions for reducing the size therefore efficient in computation for test oracle
                                                                                             generation is to apply Automated Combinatorial Testing for Software (ACTS) technology [ACTS]
                                                                                             which is a methodology that tests all t-way combinations of input parameter values. The most
                                                                                             common form is pairwise testing, in which all pairs of input values are covered in at least one test.
                                                                                             Higher strength versions of this method cover 3-way, 4-way, or more interactions at least once.
                                                                                             The advantage of combinatorial testing for verifying AC implementation is that AC often relies on
                                                                                             a small number of discrete values for most parameters. For example, a multi-level security policy
                                                                                             (i.e., standard military classification policy) may have levels unclassified, confidential, secret, top-
                                                                                             secret, plus a small number of categories, all applied to a collection of resources such as files and
                                                                                             programs. For demonstration, a simplified multi-level model, in which each subject (user) has a
                                                                                             clearance level u_l, and each file has a classification level f_l. Levels are given as 0, 1, or 2, which
                                                                                             could represent levels such as Confidential, Secret, and Top Secret. A user u can read a file f if
                                                                                             u_l ≥ f_l (the “no read up” rule), or write to a file if f_l ≥ u_l (the “no write down” rule) is as
                                                                                             the following.


                                                                                                                                                   34
