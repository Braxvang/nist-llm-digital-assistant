                                                                                             NIST SP 800-192                                                         VERIFICATION & TEST METHODS FOR
                                                                                                                                                                     ACCESS CONTROL POLICIES/MODELS

                                                                                             safety requirements more precisely as the safety requirement is valid to the model if the model can
                                                                                             be lead from every possible state that is reachable from initial states to the defined final state while
                                                                                             complying with the operation rule and without violating given constraints [KTAK07].

                                                                                             The state transitions of AC models can be categorized by three types of constraints, namely static,
                                                                                             dynamic, and historical constraints. These constraints can be expressed directly by the three basic
                                                                                             types of FSM models. Thus, an AC model and its safety requirements can be specified in a model
                                                                                             checking environment as the examples below:

                                                                                             For static model Example 1 in Section 2.2, specifications of static constraints are verified through
                                                                                             the following safety requirements example expressed in temporal logic formula:
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-192




                                                                                             AG (constraint_1 & constraint_2 & …. constraint_n)  AX (access_state = 1)
                                                                                             AG (constraint_a & constraint_b & …. constraint_m)  AX (access_state = 1) ……
                                                                                             AG ! ((constraint_1 & ….constraint_n) | (constraint_a & …. constraint_m) |… )  AX (access_state = 0)

                                                                                             which simply means that all access requests that comply with specified constraints should be
                                                                                             granted, and all non-compliant ones should be denied. The form “AG (b) → AX (d)” indicate that
                                                                                             for all paths (the “A” in “AG”) for all states globally (the “G”), if b holds then ( “→”) for all paths,
                                                                                             in the next state (the “X” in “AX”) d will hold.

                                                                                             For dynamic model Example 2 in Section 2.2, specifications of dynamic constraints are verified
                                                                                             through the following safety requirements example expressed in temporal logic formula:

                                                                                             AG (state == entering) & (act == rd) & (object == obj) AX (access = grant)
                                                                                             AG (state == idle | state == critical | state == exiting)  AX (access = deny)

                                                                                             where temporal logic formula AG (b)  AX(d) indicates that “if state is true in condition b,
                                                                                             condition d is true at all times later than the state.

                                                                                             For historical model Example 3 in Section 2.2, specifications of historical constraints are verified
                                                                                             through the following safety requirements example expressed in temporal logic formula:

                                                                                             AG ((u_state == 2 & act == rd & o_state == COI1) | (u_state == 3 & act == rd & o_state == COI2))
                                                                                              AX (access = grant)
                                                                                             AG ! ((u_state == 2 & act == rd & o_state == COI1) | (u_state == 3 & act == rd & o_state == COI2))
                                                                                              AX (access = deny)

                                                                                             temporal logic AG(b)  AX(d) indicates that the access event d is invocated by historical events
                                                                                             in b.

                                                                                             Model Checking methods implemented in NuSMV [NuSMV-M] is used by some AC policy
                                                                                             verification tools such as NIST’s ACPT and MOHAWK [MOHAWK].

                                                                                             5.2   Multi-Terminal Binary Decision Diagrams (MTBDD)

                                                                                             Underlying representation of access-control policies, Multi-Terminal Binary Decision Diagrams
                                                                                             (MTBDDs) [CFMYZ93] are a form of decision diagram that map bit vectors over a set of variables

                                                                                                                                                 26
