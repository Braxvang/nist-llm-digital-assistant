                                                            Practical Combinatorial Testing
 _______________________________________________________

Appendix A – MATHEMATICS REVIEW

      This appendix reviews a few basic facts of combinatorics, regular expressions, and
mathematical logic that are necessary to understand the concepts in this publication.

Combinatorics
Permutations and Combinations
                                                ⎛ n⎞
For n variables, there are n! permutations and ⎜⎜ ⎟⎟ =
                                                             n!
                                                ⎝t ⎠     t!(n − t)!
                                                                    (“n choose t”) combinations

of t variables, also written for convenience as C(n ,t). To exercise all of the t-way
combinations of inputs to a program, we need to cover all t-way combinations of variable
values, and each combination of t values can have vt configurations, where v is the number
of values per variable. Thus the total number of combinations instantiated with values that
must be covered is
       vt ⎛⎜⎜ n ⎞⎟⎟                                                                    (1)
            ⎝t ⎠
Fortunately, each test covers C(n, t) combination configurations. This fact is the source of
combinatorial testing’s power. For example, with 34 binary variables, we would need 234 =
1.7 * 1010 tests to cover all possible configurations, but with only 33 tests we can cover all
3-way combinations of these 34 variables. This happens because each test covers C(34, 3)
combinations.

Example. If we have five binary variables, a, b, c, d, and e, then expression (1) says we
will need to cover 23 * C(5, 3) = 8*10 = 80 configurations.        For 3-way combinatorial
testing, we will need to take all 3-variable combinations, of which there are 10:

       abc, abd, abe, acd, ace, ade, bcd, bce, bde, cde

Each of these will need to be instantiated with all 8 possible configurations of three binary
variables:

       000, 001, 010, 011, 100, 101, 110, 111

The test [0 1 0 0 1] covers the following C(5, 3) = 10 configurations:

       abc abd abe acd ace ade bcd bce bde cde
       010 000 011 001 001 001 100 101 101 001

Orthogonal Arrays

      Many software testing problems can be solved with an orthogonal array, a structure
that has been used for combinatorial testing in fields other than software for decades. An



                                                                                                  61
