GUIDE TO INTEGRATING FORENSIC TECHNIQUES INTO INCIDENT RESPONSE



      ! Network Configuration. Although many elements of networking, such as network interface
        card (NIC) drivers and configuration settings, are typically stored in the filesystem, networking is
        dynamic in nature. For example, many hosts are assigned Internet Protocol (IP) addresses
        dynamically by another host, meaning that their IP addresses are not part of the stored
        configuration. Many hosts also have multiple network interfaces defined, such as wired, wireless,
        virtual private network (VPN), and modem; the current network configuration indicates which
        interfaces are currently in use. Users also may be able to alter network interface configurations
        from the defaults, such as manually changing IP addresses. Accordingly, analysts should use the
        current network configuration, not the stored configuration, whenever possible.
      ! Network Connections. The OS facilitates connections between the system and other systems.
        Most OSs can provide a list of current incoming and outgoing network connections, and some
        OSs can list recent connections as well. For incoming connections, the OS typically indicates
        which resources are being used, such as file shares and printers. Most OSs can also provide a list
        of the ports and IP addresses at which the system is listening for connections. Section 6 provides
        an in-depth examination of the significance of network connections.
      ! Running Processes. Processes are the programs that are currently executing on a computer.
        Processes include services offered by the OS and applications run by administrators and users.
        Most OSs offer ways to view a list of the currently running processes. This list can be studied to
        determine the services that are active on the system, such as a Web server, and the programs that
        individual users are running (e.g., encryption utility, word processor, e-mail client). Process lists
        may also indicate which command options were used, as described in Section 7. Identifying the
        running processes is also helpful for identifying programs that should be running but have been
        disabled or removed, such as antivirus software and firewalls.
      ! Open Files. OSs may maintain a list of open files, which typically includes the user or process
        that opened each file.
      ! Login Sessions. OSs typically maintain information about currently logged-in users (and the
        start time and duration of each session), previous successful and failed logons, privileged usage,
        and impersonation.65 However, login session information might be available only if the computer
        has been configured to audit logon attempts. Logon records can help to determine a userâ€™s
        computer usage habits and confirm whether a user account was active when a given event
        occurred.
      ! Operating System Time. The OS maintains the current time and stores daylight savings time
        and time zone information. This information can be useful when building a timeline of events or
        correlating events among different systems. Analysts should be aware that the time presented by
        the OS might differ from that presented by the BIOS because of OS-specific settings, such as
        time zone.
5.2     Collecting OS Data

As described in Section 5.1, OS data exists in both non-volatile and volatile states. Non-volatile OS data
such as filesystem data can be collected using the approaches discussed in Section 4 for performing
logical backups and bit stream imaging. Volatile OS data should be collected before the computer is
powered down. Sections 5.2.1 and 5.2.2 provide recommendations for collecting volatile and non-volatile
OS data, respectively. Section 5.2.3 discusses technical issues that can impede the collection of data.

65
      Impersonation can allow a regular system user to have higher system privileges to accomplish certain tasks. For example, a
      particular program might require administrator access to run. Through impersonation, a regular user can be given those
      permissions to run the application and then be reverted back to the usual privileges.


                                                              5-4
