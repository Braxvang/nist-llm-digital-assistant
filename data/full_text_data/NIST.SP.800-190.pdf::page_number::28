                                                                                             NIST SP 800-190                                               APPLICATION CONTAINER SECURITY GUIDE


                                                                                             3.3.4      Mixing of workload sensitivity levels

                                                                                             Orchestrators are typically focused primarily on driving the scale and density of workloads. This
                                                                                             means that, by default, they can place workloads of differing sensitivity levels on the same host.
                                                                                             For example, in a default configuration, an orchestrator may place a container running a public-
                                                                                             facing web server on the same host as one processing sensitive financial data, simply because
                                                                                             that host happens to have the most available resources at the time of deployment. In the case of a
                                                                                             critical vulnerability in the web server, this can put the container processing sensitive financial
                                                                                             data at significantly greater risk of compromise.

                                                                                             3.3.5      Orchestrator node trust
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-190




                                                                                             Maintenance of trust between the nodes in the environment requires special care. The
                                                                                             orchestrator is the most foundational node. Weak orchestrator configurations can expose the
                                                                                             orchestrator and all other container technology components to increased risk. Examples of
                                                                                             possible consequences include:

                                                                                                   •    Unauthorized hosts joining the cluster and running containers
                                                                                                   •    The compromise of a single cluster host implying compromise of the entire cluster—for
                                                                                                        example, if the same key pairs used for authentication are shared across all nodes
                                                                                                   •    Communications between the orchestrator and DevOps personnel, administrators, and
                                                                                                        hosts being unencrypted and unauthenticated

                                                                                             3.4       Container Risks

                                                                                             3.4.1      Vulnerabilities within the runtime software

                                                                                             While relatively uncommon, vulnerabilities within the runtime software are particularly
                                                                                             dangerous if they allow ‘container escape’ scenarios in which malicious software can attack
                                                                                             resources in other containers and the host OS itself. An attacker may also be able to exploit
                                                                                             vulnerabilities to compromise the runtime software itself, and then alter that software so it allows
                                                                                             the attacker to access other containers, monitor container-to-container communications, etc.

                                                                                             3.4.2      Unbounded network access from containers

                                                                                             By default in most container runtimes, individual containers are able to access each other and the
                                                                                             host OS over the network. If a container is compromised and acting maliciously, allowing this
                                                                                             network traffic may expose other resources in the environment to risk. For example, a
                                                                                             compromised container may be used to scan the network it is connected to in order to find other
                                                                                             weaknesses for an attacker to exploit. This risk is related to that from poorly separated virtual
                                                                                             networks, as discussed in Section 3.3.3, but different because it is focused more on flows from
                                                                                             containers to any outbound destination, not on app “cross talk” scenarios.

                                                                                             Egress network access is more complex to manage in a containerized environment because so
                                                                                             much of the connection is virtualized between containers. Thus, traffic from one container to
                                                                                             another may appear simply as encapsulated packets on the network without directly indicating
                                                                                             the ultimate source, destination, or payload. Tools and operational processes that are not
                                                                                             container aware are not able to inspect this traffic or determine whether it represents a threat.

                                                                                                                                                16
