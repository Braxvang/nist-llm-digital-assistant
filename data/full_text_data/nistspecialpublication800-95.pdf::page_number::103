                                                                             GUIDE TO SECURE WEB SERVICES



that do not validate input before processing it. Any standard designed to prevent command injections
would be susceptible to the same defects. XML gateways provide some protection against command
injection by scanning SOAP messages prior to passing them on to their intended destination. To prevent
command injections, Web service designs and configurations should be reviewed by a third party and the
developers should practice secure software development techniques.

A.6.1     SQL Injection

SQL injection is a technique used for manipulating Web services that send SQL queries to a RDBMS to
alter, insert, or delete data in a database. RDBMSs communicate with Web services via service interface
application logic that creates a communication channel between the frontend Web service and the
backend RDBMS.

The main vulnerability that enables Web service-enabled RDBMSs to be attacked in this way is the
common practice of configuring the backend RDBMS to accept and execute any valid SQL query
received from any user (including a Web service frontend) that has the necessary access privileges.
Should an attacker hijack a valid authenticated interface from the frontend Web service to the backend
RDBMS, the attacker would be able to perform any valid SQL query. Such an attack does require the
attacker to have fairly deep knowledge of how the Web service-enabled database application has been
implemented.

SQL injection attacks are most effectively prevented by applying thorough application-layer
countermeasures, such as Web application firewalls, and better yet, by explicitly designing and
implementing the Web service logic added to legacy database applications to resist/reject all input that
contains SQL injection attack patterns. Network-level firewalls and IDS, and database security controls
have not proved effective in defending against SQL injection attacks.

The main modes of SQL injection are:

 Data manipulation. The attacker intercepts and manipulates the data sent from a Web service to the
  RDBMS, most often to bypass the RDBMS’s authentication process. For example, the attacker may
  modify an intercepted SQL statement by adding elements to the WHERE clause of the Web service’s
  authentication statement so the WHERE clause always results in TRUE, or by extending the SQL
  statement to include set operators like UNION, INTERSECT, or MINUS. Another method involves
  manipulating or executing UPDATE, INSERT, DELETE, or DROP statements to alter information to
  exceed the privileges granted to the originating service.
 Command execution. The attacker uses the RDBMS to execute SQL-specific system-level
  commands.
In a SQL injection attack, the attacker inserts new SQL statements or database commands into an
intercepted SQL statement, for example, to append a Transact-SQL EXECUTE command to the
intercepted SQL statement. SQL injections are most often successful when targeting databases that allow
multiple SQL statements to be appended to a single database request. Most RDBMSs are vulnerable to
this type of multi-statement attack, and the Transact-SQL EXECUTE statement is the most frequent target
of SQL injections. While other databases may not support the EXECUTE statement, all database
applications can dynamically execute SQL queries, and such queries, depending on how the application
constructs them, may be vulnerable to attack.

SQL injection attacks do not require the attacker to have deep knowledge of the targeted application, and
thus can be easily automated. The attacker inserts customized statements into the intercepted SQL query
to make operating system calls or to manipulate data in the database. Some attacks may target


                                                  A-10
