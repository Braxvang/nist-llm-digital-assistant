        A STATISTICAL TEST SUITE FOR RANDOM AND PSEUDORANDOM NUMBER GENERATORS FOR CRYPTOGRAPHIC APPLICATIONS



        by an ergodic stationary source with finite memory.” Because of this, Maurer claims that the test
        subsumes a number of the standard statistical tests.

        The test is a compression-type test “based on the idea of Ziv that a universal statistical test can be based
        on a universal source coding algorithm. A generator should pass the test if and only if its output sequence
        cannot be compressed significantly.” According to Maurer, the source-coding algorithm due to Lempel-
        Ziv “seems to be less suited for application as a statistical test” because it seems to be difficult to define a
        test statistic whose distribution can be determined or approximated.

        The test requires a long (on the order of 10 • 2 L + 1000 • 2 L with 6≤L≤16) sequence of bits, which are
        divided into two stretches of L-bit blocks (6≤L≤16), Q ( ≥ 10 • 2 L ) initialization blocks and K
                                                     n
        ( ≈ 1000 • 2 L ) test blocks. We take K =   − Q to maximize its value. The order of magnitude of Q
                                        €           L
        should be specifically chosen to ensure that all€ possible L-bit binary patterns do in fact occur within the
        initialization blocks. The test is not suited for very large values of L because the initialization takes time
€       exponential in L.
                                  €
        The test looks backs through the entire sequence while walking through the test segment of L-bit blocks,
        checking for the nearest previous exact L-bit template match and recording the distance - in number of
        blocks - to that previous match. The algorithm computes the log 2 of all such distances for all the L-bit
        templates in the test segment (giving, effectively, the number of digits in the binary expansion of each
        distance). Then it averages over all the expansion lengths by the number of test blocks.

                                   Q +K                   €
                                1
                           f n = [ ∑ log 2 (# indices since previous occurrence of ith template)]
                                K i= Q +1

        The algorithm achieves this efficiently by subscripting a dynamic look-up table making use of the integer
        representation of the binary bits constituting the template blocks. A standardized version of the statistic –
        the standardization
               €            being prescribed by the test - is compared to an acceptable range based on a standard
        normal (Gaussian) density, making use of the test statistic's mean which is given by formula (16) in [1],
                                                                ∞
                                                                             −L i−1
                                                  Ef n = 2 −L
                                                                ∑ (1− 2 ) log i .     2
                                                                i=1


        The expected value of the test statistic fn is that of the random variable log 2 G where G = GL is a
        geometric random variable with the parameter 1− 2−L .
                                    €
        There are several versions of approximate empirical formulas for the variance of the form
                                                                          €
                                               €
                                               Var( f n ) = c ( L,K )Var(log 2 G) /K .

        Here, c(L,K) represents the factor that takes into account the dependent nature of the occurrences of
        templates. The latest of the approximations (Coron and Naccache [2]: not embedded in the test suite code)
        has the form              €

    €                                                           0.8        12.8  −4 / L
                                            c ( L,K ) = 0.7 −      + 1.6 +      K       .
                                                                 L          L 


                                                                      3-14
                              €
