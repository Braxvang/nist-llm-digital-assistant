                                                                                GUIDE TO SECURE WEB SERVICES



Program specifically addresses negotiating contracts among Semantic Web services and the associated
architectural requirements:

 Negotiation protocol. Web services require a protocol for negotiating properties of the transaction.
  Research is underway to develop negotiation protocols using Semantic Web technologies.
 Negotiation service. To facilitate negotiation, a provider that allows other services to offload
  negotiation can serve as a core service within the SOA.
 Mediation service. Services involved in negotiation may need to have disputes over various
  properties of the service contract mediated by a trusted core service.
 Auditing service. The resulting contract between services will need to be stored for non-repudiation
  services by a trusted core service.
 Negotiation-enabled Web service. Individual Web services will be able to inform one another that
  they support negotiation through the discovery process.
While these architectural requirements are specific to SWSA, these functions can prove useful when
developing any SOA capable of supporting negotiation.

2.3.4    Trust Relationships

Web services standards are inherently flexible and have allowed several architecture models to evolve: a
brokered trust model, a pairwise trust model, a federated trust model, and a perimeter defense model.
While these models use the term trust, they are limited to being able to trust the identity of the service.
Being able to establish a Web service’s identity does not mean that the service itself is inherently
trustworthy. There is always the possibility that a Web service has entered an erroneous state or has been
compromised.

In their 1996 paper, McKnight and Chervany defined trust as “the extent to which one believes (and feels
confident in believing) that the other person is trustworthy in the situation.” 16 Based on this definition,
authenticating the identity of a Web service may not be sufficient when determining whether or not to
trust a remote Web service. When trust relationships span multiple organizations, the requirements for
individual Web services will vary. For this reason, regardless of whether the provider is a trusted entity in
terms of its identity, the requester should not presume that it will not send erroneous or potentially
malicious content in a response to the requester’s request. Similarly, because providers listen (like a
server) for requests from various requesters, they should not presume that erroneous or malicious content
will not be sent in place of valid requests. Nevertheless, identifying and authenticating Web services is an
essential step in establishing trust. Each trust model provides different benefits and drawbacks, allowing
trust to be supported in a wide variety of environments. With this caveat on the definition of trust in a
Web services environment, the remainder of this document uses the term trust when discussing
authentication to maintain consistency with standards and research papers.

The pairwise trust model is the simplest of all trust architectures, but the least scalable. In the pairwise
architecture, each Web service is provided—at configuration—the security information of all other Web
services that will be interacted with so that those transactions and Web services can be trusted. This
approach eliminates the need for developers to coordinate with other entities, but it creates an unscalable
and non-uniform security architecture because adding a new Web service would require adding new


16
     McKnight and Chervany’s paper, The Meanings of Trust, is available at
     http://misrc.umn.edu/wpaper/WorkingPapers/9604.pdf.


                                                           2-10
