                                                                                        GUIDE TO SECURE WEB SERVICES



In the loan service example, the rate service is a provider service. When the rate provider receives a
request, it needs to validate the identity of the requester and the supplied input. By validating the
requester’s identity, the rate service can check with organizational policies to determine whether the
requester is authorized to access rate information. By validating the input, the rate service can ensure that
the request includes valid and acceptable parameters. If the requester submits unexpected content, it is
reason to suspect that an attacker may be probing the Web service for vulnerabilities. Once the request
has been processed, the provider sends an appropriate response containing the bank’s current rate
information.

The challenges faced in protecting resources go beyond simply providing access control mechanisms.
The goal of an attacker may not be simply accessing the Web service. Rather, the attacker’s objectives
may include disrupting the service, acting as a man-in-the-middle, eavesdropping on the service,
impersonating the service, or even using weaknesses in the service’s implementation to control the host
platform. Typical threats to Web services are discussed in more detail in Section 2.6.

2.3.3    Negotiation of Contracts

One of the primary goals of SOA is to facilitate the automation of business processes by allowing services
to automatically discover one another and immediately take advantage of the functionality offered. To
facilitate business transactions, Web services need to be able to create, enforce, and abide by contracts
between organizations. For example, a credit service relies on another organization’s Web services. A
contract between the two organizations ensures that all Web services will operate as expected and that the
information passed between organizations will be properly secured. In many situations, these contracts
are negotiated and agreed upon by the organizations before implementation can begin. Ideally, Web
services would be able to negotiate and agree upon such contracts electronically, immediately after
discovery during runtime to take advantage of new functionality immediately. Negotiating such contracts
electronically opens up a number of potential legal ramifications for the organizations involved.
Therefore, in lieu of this ideal, many SOAs rely on an implicit contract offered by the WSDL interface of
a Web service and expect it to operate as advertised.

The ebXML 14 suite of standards provides tools for negotiating business processes and contracts using
Web services. However, ebXML was developed as a replacement for Electronic Data Interchange (EDI)
and, as such, is often considered too complex to use for regular Web services. Because ebXML Web
services rely on SOAP, portions of the ebXML standards may be individually adopted for small
organizations. Usually, the WSDL interface or registry entry of an individual Web service can be
considered an implicit contract between the services, but there are no standards that support the
enforcement of implicit contracts. Research in the realm of Web service choreography will aid in
enforcing implicit contracts.

Web services may have specific QoS or QoP requirements. For example, a credit service may require
that certain information be encrypted and signed using WS-Security, while the requester service may
require a guaranteed response through reliable messaging. The ebXML suite of standards provides
support for security properties in contracts, but it does not fully support automatic security properties
negotiation. The WS-Choreography standard provides some support for negotiating security
requirements. A promising area of research is Semantic Web services. Using Semantic Web
technologies, Web services can intelligently search for other Web services with specific properties,
including security properties. In addition, the Semantic Web Services Architecture (SWSA) 15 developed
by the Defense Advanced Research Projects Agency (DARPA) Agent Markup Language (DAML)

14
     More information on ebXML can be found in Appendix B and at http://www.ebxml.org.
15
     The SWSA requirements can be found at http://www.daml.org/services/swsa/swsa-requirements.html.


                                                          2-9
