                                                                GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



which could be abused to cause damage. One drawback is that applying such safeguards can also inhibit
useful functions. This dilemma is a recurring theme with active content.

4.1.2   Portable Document Format (PDF)

Portable Document Format (PDF) [Ado07b] is a page description language from Adobe for specifying the
appearance of pages containing text, graphics, and images, using the same high-level, device-independent
imaging model employed by PostScript. Unlike PostScript, PDF is not a full-scale programming
language and does not include language features such as procedures, variables, and control constructs. A
PDF reader, which is used to view or print PDF files, can be installed as either a plug-in or a helper
application for a browser. Other full-featured tools exist to generate and manipulate, as well as view and
print, PDF files.

A PDF document can be regarded as a hierarchy of objects. For example, a page object, which includes
references to the pageâ€™s contents (i.e., a content stream), other attributes such as its thumbnail image, and
any associated annotations, represents each page of the document. A content stream, in turn, is an object
whose data consists of a sequence of instructions that describe the graphical elements to be rendered on a
page, which are also represented as PDF objects using the same object syntax as the rest of the PDF
document. Whereas the document as a whole is a static, random-access data structure, the objects in the
content stream are intended to be interpreted and acted upon sequentially.

Because of the object orientation and limited image-rendering operators, PDF is generally considered a
benign format for use with a capability-limited content reader or viewer, such as the widely used Adobe
Acrobat Reader. However, full-featured PDF tools, such as Adobe Acrobat, may be more susceptible to
attack by virtue of their extended functionality. In the past, a demonstration showed that while the format
itself may be benign, a PDF file could bear malicious code as an embedded file attachment [Fis01].
When the contaminated PDF file is opened for the demonstration, a game is launched that prompts the
user to click on a moving image of a peach. The occurrence of that event, in turn, causes the execution of
an embedded VBScript file, which attempts to mail out the PDF file to others using Microsoft Outlook.

Note that even content readers are not completely immune from problems. From time-to-time,
vulnerabilities have occurred in the implementation of Acrobat Reader that could be exploited with
carefully constructed content. For example, Adobe released a patch to the Acrobat Reader 8 browser
plug-in that eliminates a cross-site scripting vulnerability [Ado07a]. An attacker could exploit the
vulnerability by appending Javascript to a PDF URL that would cause any version of the reader to
execute arbitrary JavaScript code when the file was rendered. This example illustrates how even
relatively benign content can affect document rendering software having implementation errors.

PDF does incorporate two distinct security features that can be applied to any conforming document,
individually or together. The document can be digitally sealed through a signed document digest, a
biometric signature, or other means to certify its authenticity and protect against tampering. The
document can also be encrypted so that only authorized users can view or operate on its contents.

4.1.3   Java

Java is a full-featured, object-oriented programming language compiled into platform-independent byte
code executed by an interpreter called the Java Virtual Machine (JVM). The resulting byte code can be
executed where compiled or transferred to another Java-enabled platform. The Java programming
language and runtime environment [Gon98, Gos96] enforce security primarily through the Java security
manager, which monitors running Java applications and verifies that they are following a specified policy.
The security manager allows Java to follow a sandbox security model, isolating memory and method



                                                     4-3
