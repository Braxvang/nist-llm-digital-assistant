                                                            Practical Combinatorial Testing
 _______________________________________________________

5 SEQUENCE-COVERING ARRAYS

        In testing event-driven software, the critical condition for triggering failures often is
whether or not a particular event has occurred prior to a second one, not necessarily if they
are back to back. This situation reflects the fact that in many cases, a particular state must
be reached before a particular failure can be triggered. For example, a failure might occur
when connecting device A only if device B is already connected. The methods described
in this chapter were developed to solve a real problem in interoperability test and
evaluation, using combinatorial methods to provide efficient testing. Sequence covering
arrays, as defined here, ensure that any t events will be tested in every possible t-way order.

        For this problem we can define a sequence-covering
array [39, 40], which is a set of tests that ensure all t-way        In many systems,
sequences of events have been tested. The t events in the            the order of inputs
sequence may be interleaved with others, but all permutations        is important.
will be tested. For example, we may have a component of a
factory automation system that uses certain devices interacting with a control program. We
want to test the events defined in Table 6.

        There are 6! = 720 possible sequences for these six events, and the system should
respond correctly and safely no matter the order in which they occur. Operators may be
instructed to use a particular order, but mistakes are inevitable, and should not result in
injury to users or compromise the enterprise. Because setup, connections and operation of
this component are manual, each test can take a considerable amount of time. It is not
uncommon for system-level tests such as this to take hours to execute, monitor, and
complete. We want to test this system as thoroughly as possible, but time and budget
constraints do not allow for testing all possible sequences, so we will test all 3-event
sequences.

        With six events, a, b, c, d, e, and f, one subset of three is {b, d, e}, which can be
arranged in six permutations: [b d e], [b e d], [d b e], [d e b], [e b d], [e d b]. A test that
covers the permutation [d b e] is: [a d c f b e]; another is [a d c b e f]. A larger example
system may have 10 devices to connect, in which case the number of permutations is 10!,
or 3,628,800 tests for exhaustive testing. In that case, a 3-way sequence covering array
with 14 tests covering all 10 ⋅ 9 ⋅ 8 = 720 3-way sequences is a dramatic improvement, as is 72
tests for all 4-way sequences (see Table 8).

                                Event   Description
                                a       connect air flow meter
                                b       connect pressure gauge
                                c       connect satellite link
                                d       connect pressure readout
                                e       engage drive motor
                                f       engage steering control
                                 Table 6. System events



                                                                                                    23
