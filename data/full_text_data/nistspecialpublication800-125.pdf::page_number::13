                                                      GUIDE TO SECURITY FOR FULL VIRTUALIZATION TECHNOLOGIES



virtualization solution. They should also take into account that bare metal hypervisors run on a much
more limited range of hardware than hosted hypervisors; for example, bare metal hypervisors often work
on only a limited number of Ethernet controllers and graphics cards.

Hardware emulation (sometimes called hardware translation) is a type of hosted virtualization. The
primary difference is that in hardware emulation, the hypervisor provides different hardware interfaces
from those provided by the physical hardware. Because the hypervisor in hardware emulation can
simulate all of the hardware required by the guest OS, it can run unmodified OSs designed for platforms
different from the host platform. For example, early versions of VirtualPC allowed users to run the
Microsoft Windows OS on the PowerPC processor supported by the Apple MacOS platform. Similarly,
Apple supplies the Rosetta software with its Intel Mac OS X platform, allowing programs designed for
the PowerPC version of Mac OS X to run on the Intel Mac platform.

2.3     Virtualizing Hardware

For full virtualization to be effective, the virtualized hardware presented to the guest OS must resemble
physical hardware extremely closely. In addition, virtualization systems must offer additional features for
the virtualized hardware to help it integrate well with the physical hardware in an organization’s network.
This section discusses virtualized networking and storage, as well as how a guest OS is encapsulated.

2.3.1    Virtualized Networking

Full virtualization hypervisors can provide networking capabilities, allowing the individual guest OSs to
communicate with one another while simultaneously limiting access to the external physical network. The
network interfaces that the guest OSs see may be virtual, physical, or both. Typical hypervisors offer
three primary forms of network access:

 Network Bridging. The guest OS is given direct access to the host’s network interface cards (NIC)
  independent of the host OS.
 Network Address Translation (NAT). The guest OS is given a virtual NIC that is connected to a
  simulated NAT inside the hypervisor. As in a traditional NAT, all outbound network traffic is sent
  through the virtual NIC to the host OS for forwarding, usually to a physical NIC on the host system.
 Host Only Networking. The guest OS is given a virtual NIC that does not directly route to a physical
  NIC. In this scenario, guest OSs can be configured to communicate with one another and, potentially,
  with the host OS.
When a number of guest OSs exist on a single host, the hypervisor can provide a virtual network for these
guest OSs. The hypervisor may implement virtual switches, hubs, and other network devices. Using a
hypervisor’s networking for communications between guests on a single host has the advantage of greatly
increased speed because the packets never hit physical networking devices. Internal host-only networking
can be done in many ways by the hypervisor. In some systems, the internal network looks like a virtual
switch. Others use virtual LAN (VLAN) standards to allow better control of how the guest systems are
connected. Most hypervisors also provide internal network address and port translation (NAPT) that acts
like a virtual router with NAT.

Networks that are internal to a hypervisor’s networking structure can pose an operational disadvantage,
however. Many networks rely on tools that watch traffic as it flows across routers and switches; these
tools cannot view traffic as it moves in a hypervisor’s network. There are some hypervisors that allow
network monitoring, but this capability is generally not as robust as the tools that many organizations
have come to expect for significant monitoring of physical networks. Some hypervisors provide APIs that


                                                    2-4
