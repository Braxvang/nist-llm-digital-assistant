                                                                                             NIST SP 800-192                                                       VERIFICATION & TEST METHODS FOR
                                                                                                                                                                   ACCESS CONTROL POLICIES/MODELS

                                                                                                        input values instantiates the condition for Oi to true, a result of Oi is returned. The
                                                                                                        construction for Gtest is used for each possible response output Oi to produce one positive
                                                                                                        array for each response Oi.

                                                                                                   •    Negative testing: Similarly, we construct one negative array Ntesti for each possible result
                                                                                                        output Oi as a covering array of strength k, for the terms in rules Ri that result in Oi with
                                                                                                        constraints specified by ~Ri, for each output i.

                                                                                             Note also that the method is not constrained to access control applications, but can be used for any
                                                                                             formally specified system where rules can be converted to a k-DNF form.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-192




                                                                                             5.7       Real Time AC Rule Implementation Detection

                                                                                             Most research on AC model or policy verification techniques is focused on one particular model,
                                                                                             and almost all of the research is in applied methods, which require the completed AC policies as
                                                                                             the input for verification or test processes to generate fault reports (as previously mentioned). Even
                                                                                             though correct verification is achieved and counterexamples may be generated along with found
                                                                                             faults, those methods provide no information about the source of rule faults that might allow
                                                                                             conflicts in privilege assignment, leakage of privileges, or conflict of interest permissions. The
                                                                                             difficulty in finding the source of fault is increased especially when the AC rules are intricately
                                                                                             covering duplicated variables to a degree of complexity. The complexity is due to the fact that a
                                                                                             fault might not be caused by one particular rule; for example, rule x grants subject/attribute s access
                                                                                             to object/attribute o, and rule y denies the group subject/attribute g, which s is a member of, access
                                                                                             to object o. Such conflict can only be resolved by removing either rule x or y, or the g membership
                                                                                             of s from the policy. But removing x or y affects other rules that depend on them (e.g., a member of
                                                                                             subject group g k is granted access to object o), and removing s’s membership in g will disable g’s
                                                                                             legitimate access to other objects/attributes through the membership. Thus, it requires manually
                                                                                             analyzing each and every rule in the policy in order to find the correct solution for the fault.
                                                                                             To address the issue, the AC Rule Logic Circuit Simulation (ACRLCS) technique [HS13], which
                                                                                             enables the AC authors to detect a fault when the fault-causing AC rule is added to the model, so
                                                                                             the fixing can be implemented in real time (on the spot) before adding other rules that further
                                                                                             complicate the detecting effort. In other words, instead of checking by retracing the interrelations
                                                                                             between rules after the policy is completed, the policy author needs only check the new added rule
                                                                                             against previous “correct” ones. In ACRLCS, AC rules are represented in a simulated logic circuit
                                                                                             (SLC) (pronounced CELL-see). By simulation, it means ACRLCS is not necessarily implementable
                                                                                             by a physical electronic circuit; however, the concept can be implemented and computed through
                                                                                             simulated software.
                                                                                             ACRLCS is composed of SLCs representing AC rules specified in Boolean expressions. A SLC
                                                                                             should be able to preserve the assignments of AC variables and privilege hierarchies (through
                                                                                             inheritance) and evaluate access permission (e.g., grant or deny) from the implemented rule. With
                                                                                             this principle, the technique includes two main processes:
                                                                                                • Construct a SLC based on AC variables specified by Boolean expressions, or relation
                                                                                             hierarchies specified by relations in an AC rule. In the SLC, each AC variable is represented by an
                                                                                             input switch, and the rule logic operator and hierarchy relation are simulated by logic gates.


                                                                                                                                                 41
