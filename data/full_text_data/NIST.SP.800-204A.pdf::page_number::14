                                                                                              NIST SP 800-204A                                BUILDING SECURE MICROSERVICES-BASED APPLICATIONS
                                                                                                                                                              USING SERVICE-MESH ARCHITECTURE


                                                                                              3     Service Mesh – Definitions and Technology Background

                                                                                              From the description of microservices in the previous chapter, it should be clear that a
                                                                                              microservice has two broad functions [2]:

                                                                                                  ● Business Logic, which implements the business functionalities, computations, and
                                                                                                    service composition/integration logic, and
                                                                                                  ● Network Functions, which take care of the inter-service communication mechanisms
                                                                                                    (e.g., basic service invocation through a given protocol, apply resiliency and stability
                                                                                                    patterns, service discovery, etc.) These network functions are built on top of the
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204A




                                                                                                    underlying OS level network stack.

                                                                                              The business logic function must be an integral part of the microservice code since that service is
                                                                                              the one that executes or supports a business process. The difficulty with the microservice directly
                                                                                              performing the network functions is that it uses different libraries depending on the programming
                                                                                              language it is written in or the development framework it is hosted on. With the practical reality
                                                                                              of microservices being written in multiple languages (e.g., Java, JavaScript, Python, etc.) within
                                                                                              the same application to optimize the development or runtime process, it becomes a tedious task
                                                                                              to provide the communication capability for each service node.

                                                                                              A Service Mesh is a dedicated infrastructure layer with a set of deployed infrastructure functions
                                                                                              that facilitate service-to-service communication through service discovery, routing and internal
                                                                                              load balancing, traffic configuration, encryption, authentication, authorization, metrics, and
                                                                                              monitoring. It provides the capability to declaratively define network behavior, microservice
                                                                                              instance identity, and traffic flow through policy in an environment of changing network
                                                                                              topology due to service instances coming and going offline and continuously being relocated. It
                                                                                              can be looked upon as a networking model that sits at a layer of abstraction above the transport
                                                                                              layer of the Open Systems Interconnection (OSI) model (e.g., Transmission Control
                                                                                              Protocol/Internet Protocol (TCP/IP)) and addresses the service’s session layer (Layer 5 of the
                                                                                              OSI model) concerns. However, fine-grained authorization may still need to be performed at the
                                                                                              microservice level since that is the only entity that has full knowledge of the business logic.

                                                                                              Alternatively, the Service Mesh can be defined as “a distributed computing middleware that
                                                                                              optimizes communications between application services [3].” The service-to-service
                                                                                              communication is most effectively enabled using a proxy (see Section 1.1). A Service Mesh is
                                                                                              typically implemented as an array of lightweight network proxies that are deployed alongside
                                                                                              application code without the application needing to be aware [4].

                                                                                              In addition, the Service Mesh can be leveraged to monitor and secure communication. Because it
                                                                                              is intercepting and routing all cluster traffic and gathering health metrics, the Service Mesh can
                                                                                              learn and intelligently route traffic. Examples of this higher-level functionality include A/B
                                                                                              testing, canary deployments, beta channels, automatic retries, circuit breakers, and injecting
                                                                                              faults. These features are only possible because the Service Mesh is able to view and learn from
                                                                                              the entire cluster’s traffic.


                                                                                                                                               6
