                                                                                             NIST SP 800-190                                                  APPLICATION CONTAINER SECURITY GUIDE


                                                                                             deploy exactly the same software in exactly the same configuration in each phase. As updates are
                                                                                             made to apps, organizations can ensure that the most recent versions are used, typically by
                                                                                             leveraging orchestrators. Orchestrators are usually configured to pull the most up-to-date version
                                                                                             of an image from the registry so that the app is always up-to-date. This “continuous delivery”
                                                                                             automation enables developers to simply build a new version of the image for their app, test the
                                                                                             image, push it to the registry, and then rely on the automation tools to deploy it to the target
                                                                                             environment.

                                                                                             This means that all vulnerability management, including patches and configuration settings, is
                                                                                             typically taken care of by the developer when building a new image version. With containers,
                                                                                             developers are largely responsible for the security of apps and images instead of the operations
                                                                                             team. This change in responsibilities often requires much greater coordination and cooperation
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-190




                                                                                             among personnel than was previously necessary. Organizations adopting containers should
                                                                                             ensure that clear process flows and team responsibilities are established for each stakeholder
                                                                                             group.

                                                                                             Container management includes security management and monitoring. However, security
                                                                                             controls designed for non-container environments are often not well suited for use with
                                                                                             containers. For example, consider security controls that take IP addresses into account. This
                                                                                             works well for VMs and bare metal servers with static IP addresses that remain the same for
                                                                                             months or years. Conversely, containers are typically allocated IP addresses by orchestrators, and
                                                                                             because containers are created and destroyed much more frequently than VMs, these IP
                                                                                             addresses change frequently over time as well. This makes it difficult or impossible to protect
                                                                                             containers using security techniques that rely on static IP addresses, such as firewall rulesets
                                                                                             filtering traffic based on IP address. Additionally, a container network can include
                                                                                             communications between containers on the same node, across different nodes, and even across
                                                                                             clouds.

                                                                                             2.4       Container Uses

                                                                                             Like any other technology, containers are not a panacea. They are a valuable tool for many
                                                                                             scenarios, but are not necessarily the best choice for every scenario. For example, an
                                                                                             organization with a large base of legacy off-the-shelf software is unlikely to be able to take
                                                                                             advantage of containers for running most of that software since the vendors may not support it.
                                                                                             However, most organizations will have multiple valuable uses for containers. Examples include:

                                                                                                   •    Agile development, where apps are frequently updated and deployed. The portability and
                                                                                                        declarative nature of containers makes these frequent updates more efficient and easier to
                                                                                                        test. This allows organizations to accelerate their innovation and deliver software more
                                                                                                        quickly. This also allows vulnerabilities in app code to be fixed and the updated software
                                                                                                        tested and deployed much faster.
                                                                                                   •    Environmental consistency and compartmentalization, where developers can have
                                                                                                        identical yet separate environments for building, testing, and running the app. Containers
                                                                                                        give developers the ability to run the entirety of an exact copy of a production app locally
                                                                                                        on a development laptop system, limiting the need for coordination and sharing of testing
                                                                                                        environments as well as eliminating the hassle of stale testing environments.


                                                                                                                                                 11
