                                                                                             NIST SP 800-192                                                    VERIFICATION & TEST METHODS FOR
                                                                                                                                                                ACCESS CONTROL POLICIES/MODELS

                                                                                             then combines these with MTBDD-combining algorithms that implement the XACML rule- and
                                                                                             policy-combining algorithms.

                                                                                             Margrave views the policy constants permit and deny as rules; an operation called augment-rule
                                                                                             takes a Boolean condition on the variables and a rule and constrains the rule to also require the
                                                                                             given condition. For example, the left two MTBDD models in Figure 12, the MTBDD models for
                                                                                             rules saying that faculty attempting to assign grades should yield permit and students attempting
                                                                                             to assign grades should yield deny appear. The third MTBDD model represents the result of
                                                                                             combining these two rules using rule-combining algorithms.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-192




                                                                                                                   Figure 12 Sample MTBDDs for rules and rule combination.
                                                                                             Margrave allows the user to specify various forms of safety requirements in the Scheme
                                                                                             programming language. Margrave’s API can verify these safety requirements and if there exist
                                                                                             any counterexamples (being specific requests) that violate the specified safety requirements, these
                                                                                             counterexamples are produced. Margrave also provides comprehensive change-impact analysis
                                                                                             based on the semantic differences between the MTBDD models representing the policies.

                                                                                             The chief novelty of Margrave’s current approach lies in embracing the richness of full first-order
                                                                                             predicate logic for specifying policies, systems, and queries. Margrave interacts with a user to
                                                                                             produce concrete scenarios in response to user queries. Queries cover not only conventional
                                                                                             verification-style safety requirements, but also “what if” style questions about the semantic impact
                                                                                             of edits. Margrave also allows users to specify policy rules and safety requirement. It then
                                                                                             processes user-defined queries about the policy rules and presents scenarios as output. Scenarios
                                                                                             are, informally, snapshots of the system—as governed by the policy rules—in which the query
                                                                                             holds. [SND13]

                                                                                             Margrave supports query-based verification and provides query-based views by computing
                                                                                             exhaustive sets of scenarios that yield different results including change-impact analysis for
                                                                                             comparing a pair of policies. Margrave provides the benefits of static verification without requiring
                                                                                             authors to write formal properties; its power comes from choosing an appropriate policy model in
                                                                                             first-order logic, and embracing both scenario-finding and multi-level policy-reasoning. In general,
                                                                                             Margrave identifies formulas corresponding to many common firewall-analysis problems
                                                                                             automatically, thus providing exhaustive analysis for richer policies and queries.

                                                                                                                                              28
