                                                                                              NIST SP 800-204C                                             DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                  APPLICATION WITH SERVICE MESH

                                                                                                 •   Policy as code – This describes many policies, including security policies, as executable
                                                                                                     modules [25]. One example is the authorization policy, the code for which contains verbs
                                                                                                     or artifacts specific to the policy (e.g., allow, deny, etc.) and to the domain where it
                                                                                                     applies (e.g., REST API with verbs such as method [GET, PUT, etc.], path, etc.). This
                                                                                                     code can be written in a special-purpose policy language, such as Rego, or languages used
                                                                                                     in regular applications, such as Go. This code may have some overlap with the
                                                                                                     configuration code of IaC. However, for implementing policies associated with critical
                                                                                                     security services that are specific to the application domain, a separate policy as code that
                                                                                                     resides in the policy enforcement points (PEPs) of the reference platform is required.
                                                                                                 •   Observability as code – The ability to infer a system’s internal state and provide
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                                     actionable insights into when and, more importantly, why errors occur within a system. It
                                                                                                     is a full-stack observability that includes monitoring and analytics and that offers key
                                                                                                     insights into the overall performance of applications and the systems hosting them. In the
                                                                                                     context of the reference platform, observability as code is the portion of the code that
                                                                                                     creates agencies in proxies and creates functionality for gathering three types of data (i.e.,
                                                                                                     logs, traces, and telemetry) from microservices applications [26]. This type of code also
                                                                                                     supplies or transfers data to the external tools (e.g., log aggregation tool that aggregates
                                                                                                     log data from individual microservices, provides analysis of tracing data for bottleneck
                                                                                                     services, generates metrics that reflect the application health from telemetry data, etc.).
                                                                                                     Brief descriptions of the three functions enabled by observability as code are:
                                                                                                     1. Logging captures detailed error messages, as well as debugs logs and stack traces for
                                                                                                        troubleshooting.
                                                                                                     2. Tracing follows application requests as they wind through multiple microservices to
                                                                                                        complete a transaction in order to identify an issue or performance bottleneck in a
                                                                                                        distributed or microservices-based ecosystem.
                                                                                                     3. Monitoring, or metrics, gathers telemetry data from applications and services.
                                                                                              Each of the code types has an associated CI/CD pipeline and is described in Sections 4.2 through
                                                                                              4.5. There may be overlaps among application service code, infrastructure as code, policy as
                                                                                              code, and observability as code types.

                                                                                              The constituent components of the reference platform hosting the five code types are:
                                                                                                 1. Business function component (consisting of several microservices modules with each of
                                                                                                    them often implemented as a container), which embody the application logic (e.g.,
                                                                                                    interacting with data, performing transactions, etc.), thus forming the application code.
                                                                                                 2. Infrastructure component (containing computer, networking, and storage resources)
                                                                                                    whose constituents can be provisioned using infrastructure as code.
                                                                                                 3. Service mesh component (implemented through a combination of control plane modules
                                                                                                    and service proxies), which provides application services, enforces policies (e.g.,
                                                                                                    authentication and authorization), and contains application services code and policy as
                                                                                                    code.


                                                                                                                                               20
