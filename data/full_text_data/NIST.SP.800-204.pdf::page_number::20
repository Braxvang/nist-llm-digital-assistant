                                                                                             NIST SP 800-204                                                                SECURITY STRATEGIES FOR
                                                                                                                                                            MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                             2.9       Comparison with Service-Oriented Architecture (SOA)

                                                                                             The architectural style of microservices shares many similarities with service-oriented
                                                                                             architecture (SOA) due to the following common technical concepts [13]:

                                                                                                   •    Services: The application system provides its various functionalities through self-
                                                                                                        contained entities or artifacts called services that may have other attributes such as being
                                                                                                        visible or discoverable, stateless, reusable, composable, or have technological-diversity.
                                                                                                   •    Interoperability: A service can call any other service using artifacts such as an enterprise
                                                                                                        service bus (ESB) in the case of SOA or through a remote procedural call (RPC) across a
                                                                                                        network as in the case of a microservices environment.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                                   •    Loose coupling: There is minimal dependency between services such that the change in
                                                                                                        one service does not require a change in another service.
                                                                                             In spite of the three common technical concepts described above, technical opinion on the
                                                                                             relationship between an SOA and microservices environment falls along the following three lines
                                                                                             [13]:

                                                                                                   •    Microservices are a separate architectural style,
                                                                                                   •    Microservices represent one SOA pattern, and
                                                                                                   •    A microservice is a refined SOA.
                                                                                             The most prevalent opinion is that the differences between SOA and microservices do not
                                                                                             concern the architectural style except in its concrete realization, such as development or
                                                                                             deployment paradigms and technologies [2].

                                                                                             2.10 Advantages of Microservices

                                                                                                   •    For large applications, splitting the application into loosely coupled components enables
                                                                                                        independence between the developer teams assigned to each component. Each team can
                                                                                                        then optimize by choosing its own development platform, tools, language, middleware,
                                                                                                        and hardware based on their appropriateness for the component being developed.
                                                                                                   •    Each of the components can be scaled independently. The targeted allocation of resources
                                                                                                        results in maximum utilization of resources.
                                                                                                   •    If components have HTTP RESTful interfaces, implementation can be changed without
                                                                                                        disruption to the overall function of the application as long as the interface remains the
                                                                                                        same.
                                                                                                   •    The relatively smaller codebase involved in each component enables the development
                                                                                                        team to produce updates more quickly and provide the application with the agility to
                                                                                                        respond to changes in business processes or market conditions.
                                                                                                   •    The loose coupling between the components enables containment of the outage of a
                                                                                                        microservice such that the impact is restricted to that service without a domino effect on
                                                                                                        other components or other parts of the application.


                                                                                                                                                 12
