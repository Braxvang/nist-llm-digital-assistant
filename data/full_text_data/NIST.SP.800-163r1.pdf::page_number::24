                                                                                               NIST SP 800-163 REV. 1                                            VETTING THE SECURITY OF MOBILE APPS


                                                                                               4       App Testing and Vulnerability Classifiers

                                                                                               During the app testing process, test tools are used to test for the existence of app vulnerabilities
                                                                                               and malicious behavior. Often, such tools are based on standards such as NIAP and thus, may be
                                                                                               used to used determine the satisfaction of general app security requirements. This section covers
                                                                                               some of the strategies and approaches used by test tools and services to analyze mobile apps for
                                                                                               vulnerabilities. It also describes various classifiers and quantifiers used to describe
                                                                                               vulnerabilities.

                                                                                               4.1     Testing Approaches

                                                                                               Test tools employ several different analysis techniques including correctness testing, analysis of
                                                                                               source code or binary code, use of static or dynamic analysis, and manual or automatic app
                                                                                               testing.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-163r1




                                                                                               4.1.1    Correctness Testing

                                                                                               One approach for testing an app is software correctness testing [18]. Software correctness testing
                                                                                               is the process of executing a program to detect errors. Although the objective of software
                                                                                               correctness testing is improving quality assurance as well as verifying and validating described
                                                                                               functionality or estimating reliability, it also can help reveal potential security vulnerabilities that
                                                                                               often can have a negative effect on the quality, functionality and reliability of the software. For
                                                                                               example, software that crashes or exhibits unexpected behavior is often indicative of a security
                                                                                               flaw. A prime advantage of software correctness testing is that it is traditionally based on
                                                                                               specifications of the software to be tested. These specifications can be transformed into
                                                                                               requirements that specify how the software is expected to behave while undergoing testing. This
                                                                                               is distinguished from security assessment approaches that often require the tester to derive
                                                                                               requirements themselves; often such requirements are largely based on security requirements that
                                                                                               are common across many different software artifacts and may not test for vulnerabilities that are
                                                                                               unique to the software under test. Nonetheless, because of the tight coupling between security
                                                                                               and quality, and functionality and reliability, it is recommended that software correctness testing
                                                                                               be performed when possible.

                                                                                               4.1.2    Source and Binary Code Testing

                                                                                               A major factor in performing app testing is whether source code is available. Typically, apps
                                                                                               downloaded from an app store do not come with access to source code. When source code is
                                                                                               available, such as in the case of an open-source app, a variety of tools can be used to analyze it.
                                                                                               The goals of a source code review are to find vulnerabilities in the source code and to verify the
                                                                                               results of test tools. Even with automated aids, the analysis is labor-intensive. Benefits to using
                                                                                               automated static analysis tools include introducing consistency between different reviews and
                                                                                               making possible reviews of large codebases. Reviewers should generally use automated static
                                                                                               analysis tools whether they are conducting an automated or a manual review and they should
                                                                                               express their findings in terms of Common Weakness Enumeration (CWE) identifiers or some
                                                                                               other widely accepted nomenclature. Performing a secure code review requires software
                                                                                               development and domain-specific knowledge in the area of app security. Organizations should
                                                                                               ensure the individuals performing source code reviews have the required skills and expertise.

                                                                                                                                                 17
