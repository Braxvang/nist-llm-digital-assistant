                                                                                              NIST SP 800-204C                                             DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                  APPLICATION WITH SERVICE MESH

                                                                                              regression testing, and integrating/merging with the main source code in the relevant repositories,
                                                                                              though it is not used to trigger continuous delivery (push updates directly) in the pipeline.
                                                                                              Instead, a separate GitOps operator manages the deployment based on updates to the main (trunk)
                                                                                              code.

                                                                                              An operator (e.g., Flux, ArgoCD) is an actor managed by an orchestration platform and can
                                                                                              inherit the cluster’s configuration, security, and availability. The use of this actor improves
                                                                                              security because an agent that lives inside of the cluster listens for updates to all code and image
                                                                                              repositories that it is allowed to access and pulls images and configuration updates into the
                                                                                              cluster. The pull approach used by the agent has the following security features:
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                                 •   ONLY carry out operations permitted by authorization policies defined in the
                                                                                                     orchestration platform; trust is shared with the cluster and not managed separately
                                                                                                 •   Bind natively to all orchestration platform objects, and know whether operations have
                                                                                                     completed or need to be retried

                                                                                              4.8 Security Testing – Common Requirement for CI/CD Pipelines for All Code Types

                                                                                              The last common issue is security testing. Whatever the code type is (e.g., application service,
                                                                                              Iac, Pac or observability), the CI/CD pipelines of DevSecOps for microservices-based
                                                                                              infrastructure with service mesh should include application security testing (AST) enabled by
                                                                                              either automated tools or offered as a service. These tools analyze and test applications for
                                                                                              security vulnerabilities. According to Gartner, there are four main AST technologies [35]:
                                                                                              1. Static AST (SAST) tools – Analyze an application’s source, bytecode, or binary code for
                                                                                                 security vulnerabilities, typically at the programming and/or testing software life cycle (SLC)
                                                                                                 phases. Specifically, this technology involves techniques that look through the application in
                                                                                                 a commit and analyze its dependencies [36]. If any dependencies contain issues or known
                                                                                                 security vulnerabilities, a commit will be marked as insecure and will not be allowed to
                                                                                                 proceed to deployment. This can also include finding hardcoded passwords/secrets in code
                                                                                                 that should be removed.

                                                                                              2. Dynamic AST (DAST) tools – Analyze applications in their dynamic, running state during
                                                                                                 testing or operational phases. They simulate attacks against an application (typically web-
                                                                                                 enabled applications, services, and APIs), analyze the application’s reactions, and determine
                                                                                                 whether it is vulnerable. In particular, DAST tools go one step further than SAST and spin up
                                                                                                 a copy of the production environment inside the CI job in order to scan the resulting
                                                                                                 containers and executables [36]. The dynamic aspect helps the system catch dependencies
                                                                                                 that are being loaded at launch time, such as those that would not be caught by SAST.
                                                                                              3. Interactive AST (IAST) tools – Combine elements of DAST with the instrumentation of the
                                                                                                 application under test. They are typically implemented as an agent within the test runtime
                                                                                                 environment (e.g., instrumenting the Java Virtual Machine [JVM] or .NET CLR) that
                                                                                                 observes operations or identifies and attacks vulnerabilities.
                                                                                              4. Software composition analysis (SCA) tools – Used to identify open-source and third-party
                                                                                                 components in use in an application, their known security vulnerabilities, and typically
                                                                                                 adversarial license restrictions.
                                                                                                                                               26
