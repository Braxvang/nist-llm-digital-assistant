                                                                                             NIST SP 800-192                                                        VERIFICATION & TEST METHODS FOR
                                                                                                                                                                    ACCESS CONTROL POLICIES/MODELS

                                                                                             works the same for the second case module). This fault demonstrates that there is a redundancy in
                                                                                             the model, which does not violate the temporal logic of the model. Further investigation to check
                                                                                             the model that relates to the variable should reveal that the (p = = i & q = = j) → access = = grant
                                                                                             safety requirement will never happen. Note that this fault can be caught if one more safety
                                                                                             requirement E! (p = = i & q = = j) (which means there exists some path that eventually in the future will
                                                                                             satisfy !(p = = i & q = = j) in CTL model checking) is specified. Hence, it is not expected that all safety
                                                                                             requirements are perfectly specified in the beginning. Thus, white box checking can be used as a
                                                                                             second line of defense against faults that will not be spotted by black box checking.

                                                                                             Most faults in an AC model result from the nondeterministic automata of FSM states, for example,
                                                                                             in Figure 5, white box checking will detect that the value x will result to a grant of access when it
                                                                                             is either s or t. This does not violate the safety requirement; however, the safety property will not
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-192




                                                                                             meet be maintained if a more stringent safety requirement requires that only one value of x attribute
                                                                                             is desired from the policy.

                                                                                                   NEXT_STATE(p):= CASE {
                                                                                                     x==s|t :i
                                                                                                     ….
                                                                                                   }


                                                                                                  NEXT_STATE(access):= CASE {
                                                                                                    p == i : grant
                                                                                                    OTHERWISE: deny
                                                                                                    ……
                                                                                                  }

                                                                                                …….
                                                                                                AG (p = = i) → access = grant



                                                                                                          Figure 5 Example of ambiguous value and the safety requirement in an AC model.


                                                                                             Another example shows a transition to an unspecified state for a certain range of data values such
                                                                                             as in Figure 6. There is no way for the black box checker to determine the value of access when x
                                                                                             value is other than s unless we check with the safety requirement AG ! (p = = i) → access = deny. This
                                                                                             uncovered value can be detected by the white box checking when different values were assigned
                                                                                             to x, which does not match any expected case condition, and results the same grant of access.
                                                                                             Thus, the safety requirement verification informs the users which rules are not covered by the
                                                                                             existing safety requirement so that the users can add new properties to cover the uncovered.




                                                                                                                                                 18
