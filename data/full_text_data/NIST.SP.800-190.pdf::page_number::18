                                                                                             NIST SP 800-190                                               APPLICATION CONTAINER SECURITY GUIDE


                                                                                             containers. Also, a container built for one OS family should run on any recent OS from that
                                                                                             family.

                                                                                             There are two general categories of host OSs used for running containers. General-purpose OSs
                                                                                             like Red Hat Enterprise Linux, Ubuntu, and Windows Server can be used for running many
                                                                                             kinds of apps and can have container-specific functionality added to them. Container-specific
                                                                                             OSs, like CoreOS Container Linux [4], Project Atomic [5], and Google Container-Optimized OS
                                                                                             [6] are minimalistic OSs explicitly designed to only run containers. They typically do not come
                                                                                             with package managers, they have only a subset of the core administration tools, and they
                                                                                             actively discourage running apps outside containers. Often, a container-specific OS uses a read-
                                                                                             only file system design to reduce the likelihood of an attacker being able to persist data within it,
                                                                                             and it also utilizes a simplified upgrade process since there is little concern around app
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-190




                                                                                             compatibility.

                                                                                             Every host OS used for running containers has binaries that establish and maintain the
                                                                                             environment for each container, also known as the container runtime. The container runtime
                                                                                             coordinates multiple OS components that isolate resources and resource usage so that each
                                                                                             container sees its own dedicated view of the OS and is isolated from other containers running
                                                                                             concurrently. Effectively, the containers and the host OS interact through the container runtime.
                                                                                             The container runtime also provides management tools and application programming interfaces
                                                                                             (APIs) to allow DevOps personnel and others to specify how to run containers on a given host.
                                                                                             The runtime eliminates the need to manually create all the necessary configurations and
                                                                                             simplifies the process of starting, stopping, and operating containers. Examples of runtimes
                                                                                             include Docker [2], rkt [3], and the Open Container Initiative Daemon [7].

                                                                                             Examples of technical capabilities the container runtime ensures the host OS provides include
                                                                                             the following:

                                                                                                •   Namespace isolation limits which resources a container may interact with. This includes
                                                                                                    file systems, network interfaces, interprocess communications, host names, user
                                                                                                    information, and processes. Namespace isolation ensures that apps and processes inside a
                                                                                                    container only see the physical and virtual resources allocated to that container. For
                                                                                                    example, if you run ‘ps –A’ inside a container running Apache on a host with many other
                                                                                                    containers running other apps, you would only see httpd listed in the results. Namespace
                                                                                                    isolation provides each container with its own networking stack, including unique
                                                                                                    interfaces and IP addresses. Containers on Linux use technologies like masked process
                                                                                                    identities to achieve namespace isolation, whereas on Windows, object namespaces are
                                                                                                    used.
                                                                                                •   Resource allocation limits how much of a host’s resources a given container can
                                                                                                    consume. For example, if your host OS has 10 gigabytes (GB) of total memory, you may
                                                                                                    wish to allocate 1 GB each to nine separate containers. No container should be able to
                                                                                                    interfere with the operations of another container, so resource allocation ensures that each
                                                                                                    container can only utilize the amount of resources assigned to it. On Linux, this is




                                                                                                                                               6
