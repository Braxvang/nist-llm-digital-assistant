                                                                                             NIST SP 800-204                                                         SECURITY STRATEGIES FOR
                                                                                                                                                     MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                             the API gateway, which then routes requests to the appropriate microservice. The API gateway
                                                                                             will often handle a request by invoking multiple microservices and aggregating the results.

                                                                                             The multiple APIs or microservices accessible through the API gateway can be specified as part
                                                                                             of the input port definition of the gateway (e.g., mobileAPI or MobileService) or be specified
                                                                                             dynamically through a deploy operation of the API gateway service with a request parameter that
                                                                                             contains the name of the service that should be embedded with the requested service [9]. Thus,
                                                                                             the API gateway, located between clients and microservices, represents a pattern wherein a
                                                                                             proxy aggregates multiple services. Many API gateway implementations can support APIs
                                                                                             written in different languages, such as Jolie, JavaScript, or Java.

                                                                                             Since the API gateway is the entry point for microservices, it should be equipped with the
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                             necessary infrastructure services (in addition to its main service of request shaping), such as
                                                                                             service discovery, authentication and access control, load balancing, caching, providing custom
                                                                                             APIs for each type of client, application-aware health checks, service monitoring, attack
                                                                                             detection, attack response, security logging and monitoring and circuit breakers. These additional
                                                                                             features may be implemented in the API gateway in two ways:

                                                                                                •   By composing the specific services developed for respective functionality (e.g., service
                                                                                                    registry for service discovery); and
                                                                                                •   Implementing these functionalities directly inside the codebase that utilizes the API
                                                                                                    gateway.
                                                                                             Gateway implementations

                                                                                             To prevent the gateway from having too much logic to handle request shaping for different client
                                                                                             types, it is divided into multiple gateways [8]. This multiple gateway pattern is called BFF. In
                                                                                             BFF, each client type is given its own gateway (e.g., web app BFF, mobile app BFF) as a
                                                                                             collection point for service requests. The respective backend is closely aligned with the
                                                                                             corresponding front end (client) and is typically developed by the same team. The functionality
                                                                                             provided by BEF can also be provided by GraphQL which allows the client to shape responses in
                                                                                             their requests by specifying what parts of a data-type are required in a response.

                                                                                             API management for a microservices-based application can be implemented through either a
                                                                                             monolithic API gateway architecture or a distributed API gateway architecture. In the monolithic
                                                                                             API gateway architecture, there is only one API gateway that is typically deployed at the edge of
                                                                                             the enterprise network (e.g., Demilitarized Zone (DMZ)) and provides all services to the API at
                                                                                             the enterprise level. In the distributed API gateway architecture, there are multiple instances of
                                                                                             microgateways, which are deployed closer to microservice APIs [10]. A microgateway is
                                                                                             typically a low footprint, scriptable API gateway that can be used to define and enforce
                                                                                             customized policies and is therefore suitable for microservices-based applications, which must be
                                                                                             protected through service-specific security policies.

                                                                                             The microgateway is typically implemented as a stand-alone container using development
                                                                                             platforms such as Node.js. It is different from a sidecar proxy of the service mesh architecture
                                                                                             (refer to Section 2.7.2), which is implemented at the API endpoint itself. There are a number of
                                                                                                                                            10
