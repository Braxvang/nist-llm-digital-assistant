                                                                                             NIST SP 800-218                                                                                       SSDF VERSION 1.1


                                                                                                 •   Software producers (e.g., commercial-off-the-shelf [COTS] product vendors,
                                                                                                     government-off-the-shelf [GOTS] software developers, software developers working
                                                                                                     within or on behalf of software acquirer organizations) that want to integrate secure
                                                                                                     software development practices throughout their SDLCs, express their secure software
                                                                                                     practices to their customers, or define requirements for their suppliers

                                                                                             This document’s practices are not based on the assumption that all organizations have the same
                                                                                             security objectives and priorities. Rather, the recommendations reflect that each software
                                                                                             producer may have unique security assumptions, and each software acquirer may have unique
                                                                                             security needs and requirements. While the aim is for each software producer to follow all
                                                                                             applicable practices, the expectation is that the degree to which each practice is implemented and
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-218




                                                                                             the formality of the implementation will vary based on the producer’s security assumptions. The
                                                                                             practices provide flexibility for implementers, but they are also clear to avoid leaving too much
                                                                                             open to interpretation.

                                                                                             Although most of these practices are relevant to any software development effort, some are not.
                                                                                             For example, if developing a particular piece of software does not involve using a compiler,
                                                                                             there would be no need to follow a practice on configuring the compiler to improve executable
                                                                                             security. Some practices are foundational, while others are more advanced and depend on certain
                                                                                             foundational practices already being in place. Also, practices are not all equally important for all
                                                                                             cases.

                                                                                             Factors such as risk, cost, feasibility, and applicability should be considered when deciding
                                                                                             which practices to use and how much time and resources to devote to each practice. 4
                                                                                             Automatability is also an important factor to consider, especially for implementing practices at
                                                                                             scale. The practices, tasks, and implementation examples represent a starting point to consider;
                                                                                             they are meant to be changed and customized, and they are not prioritized. Any stated frequency
                                                                                             for performing practices is notional. The intention of the SSDF is not to create a checklist to
                                                                                             follow, but to provide a basis for planning and implementing a risk-based approach to adopting
                                                                                             secure software development practices.

                                                                                             The responsibility for implementing the practices may be distributed among different
                                                                                             organizations based on the delivery of the software and services (e.g., infrastructure as a service,
                                                                                             software as a service, platform as a service, container as a service, serverless). In these situations,
                                                                                             it likely follows a shared responsibility model involving the platform/service providers and the
                                                                                             tenant organization that is consuming those platforms/services. The tenant organization should
                                                                                             establish an agreement with the providers that specifies which party is responsible for each
                                                                                             practice and task and how each provider will attest to their conformance with the agreement.



                                                                                             4   Organizations seeking guidance on how to get started with secure software development can consult many publicly available
                                                                                                 references, such as “SDL That Won’t Break the Bank” by Steve Lipner from SAFECode (https://i.blackhat.com/us-18/Thu-
                                                                                                 August-9/us-18-Lipner-SDL-For-The-Rest-Of-Us.pdf), “Application Software Security and the CIS Controls: A Reference
                                                                                                 Paper” by Steve Lipner and Stacy Simpson from SAFECode (https://safecode.org/resource-publications/cis-controls/), and
                                                                                                 “Simplified Implementation of the Microsoft SDL” by Microsoft (https://www.microsoft.com/en-
                                                                                                 us/download/details.aspx?id=12379).



                                                                                                                                                          3
