                                                                                             NIST SP 800-185                                              SHA-3 DERIVED FUNCTIONS: CSHAKE,
                                                                                                                                                         KMAC, TUPLEHASH, AND PARALLELHASH

                                                                                             5. return cSHAKE128(newX, L, “TupleHash”, S).

                                                                                             TupleHash256(X, L, S):
                                                                                             Validity Conditions: 0 ≤ L < 22040 and len(S) < 22040

                                                                                             1. z = "".
                                                                                             2. n = the number of input strings in the tuple X.
                                                                                             3. for i = 1 to n:
                                                                                                    z = z || encode_string(X[i]).
                                                                                             4. newX = z || right_encode(L).
                                                                                             5. return cSHAKE256(newX, L, “TupleHash”, S).
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-185




                                                                                             5.3.1   TupleHash with Arbitrary-Length Output

                                                                                             Some applications of TupleHash may not know the number of output bits they will need until
                                                                                             after the outputs begin to be produced. For these applications, TupleHash can also be used as a
                                                                                             XOF (i.e., the output can be extended to any desired length), which mimics the behavior of
                                                                                             cSHAKE.

                                                                                             When used as a XOF, TupleHash is computed by setting the encoded output length to 0, as
                                                                                             shown in right_encode(0) in Step 1 of the TupleHashXOF128(X, L, S) and
                                                                                             TupleHashXOF256(X, L, S) pseudocodes below. Conceptually, TupleHash in XOF mode
                                                                                             produces an infinite-length output string, and the caller simply uses as many bits of the output
                                                                                             string as are needed. Truncated outputs of TupleHash in XOF mode can be computed by the
                                                                                             function TupleHashXOF128(X, L, S) or TupleHashXOF256(X, L, S) given by the following
                                                                                             pseudocode:

                                                                                             TupleHashXOF128(X, L, S):
                                                                                             Validity Conditions: 0 ≤ L and len(S) < 22040

                                                                                             1. z = "".
                                                                                             2. n = the number of input strings in the tuple X.
                                                                                             3. for i = 1 to n:
                                                                                                    z = z || encode_string(X[i]).
                                                                                             4. newX = z || right_encode(0).
                                                                                             5. return cSHAKE128(newX, L, “TupleHash”, S).

                                                                                             TupleHashXOF256(X, L, S):
                                                                                             Validity Conditions: 0 ≤ L and len(S) < 22040

                                                                                             1. z = "".
                                                                                             2. n = the number of input strings in the tuple X.
                                                                                             3. for i = 1 to n:
                                                                                                    z = z || encode_string(X[i]).
                                                                                             4. newX = z || right_encode(0).
                                                                                             5. return cSHAKE256(newX, L, “TupleHash”, S).



                                                                                                                                             13
