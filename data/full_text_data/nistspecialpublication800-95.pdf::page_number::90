                                                                              GUIDE TO SECURE WEB SERVICES



inlining. Code obfuscation can be classified according to the kind of information the obfuscation
technique targets and how it affects that target.

6.3.1.3 Microsoft’s .NET Languages: C# and VB.NET

C# was developed by Microsoft as part of its .NET initiative to provide developers with the power of
languages like Java and C++ for rapid application development. Like Java, C# runs in a secure
environment through code access security, which provides a sandbox in which to run Common Language
Runtime (CLR) applications, such as C# and VB.NET. C# applications also benefit from a garbage
collection system, preventing most memory leaks from affecting C# applications. C# provides a more
type-safe environment than C++, but unlike Java, C# applications support accessing raw memory—
although this requires certain code access security permissions to be enabled. .NET’s code access
security offers security features similar to Java’s, such as code signing, stringent access control and
sandboxing.

Visual Basic .NET was released alongside of C# as a successor to the legacy Visual Basic language.
While the VB.NET syntax is similar to the original Visual Basic language, VB.NET provides a fully
object-oriented language in place of the COM-based language of Visual Basic. While Visual Basic has
some security concerns, VB.NET’s support of garbage collection, object-oriented design, code access
security, and the .NET framework make VB.NET similar to C# and Java. Through the .NET framework
and the CLR, C# and VB.NET have access to the same security libraries and both C# and VB.NET
applications are subject to code access security.

As in Java, code written in C# or VB.NET can be downloaded and run from untrusted sources. To
alleviate this problem, Microsoft has integrated code access security into the .NET Framework. Code
access security provides varying levels of trust for code based on where the code originates and allows
individual users to specify what permissions will be given to an application. Because code access
security is part of the .NET Framework, all applications that access the .NET Framework can be subject
to code access security. Because policies are defined on a per-machine basis, libraries are provided that
allow applications to determine whether the application has a particular permission prior to performing a
potentially restricted act—allowing .NET applications to alter their behavior rather than simply generate a
security exception.

6.3.2   XML

Content within SOAP messages is expressed in XML. Because of this, the security technologies used by
Web services are based on those developed for XML. XML was designed so that it could be easily
extensible and combined with itself. It should be natural to provide integrity, confidentiality and other
security benefits to entire XML documents or portions of these documents in a way that does not prevent
further processing by standard XML tools.

In general, most of the risks posed by XML are not unique. They can appear with many other
technologies and systems, new and old. Some of the risks are more severe for XML than for older
systems simply because XML is more expressive, flexible and powerful. Some of the risks derive from
the ways in which XML is used (e.g., for metadata) and would appear whether using XML or some other
technology.

Some recognized vulnerabilities and attacks specific to XML and XML Style Sheets (XSL) include the
inability to:




                                                   6-4
