                                                                GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



Author-oriented signature schemes, such as Authenticode, were originally intended to serve as “digital
shrink wrap”, whereby the original product warranty limitations stated in the license remain in effect
(e.g., the manufacturer makes no warranties as to the fitness of the product for any particular purpose).
Many users misinterpret the significance of such a signature scheme beyond its original intent of
establishing the authenticity of distributed software. Instead, it has become for the users a form of trust in
the software’s behavior, which could ultimately have disastrous consequences. The organization that
issues trustworthy certificates can also be a potential source of problems. For example, an individual,
posing as an employee of a well-known software manufacturer, was able to receive a class 3 software
publisher certificate from a certification authority for Authenticode public key certificates [Ver01]. The
successful deception demonstrated the possibility of malicious content being produced and distributed,
which appears to come from a legitimate manufacturer.

5.2.4   Proofs

This technique obligates the code producer to provide formal evidence that the program possesses certain
properties required by the consumer’s policy (e.g., memory safety, access control, resource usage
bounds). The best-known example of this technique is known as proof carrying code, in which the formal
evidence is a proof of the safety properties of the code. The code and proof are sent together to the code
consumer where the safety properties can be verified, as illustrated in Figure 5-4. The safety predicate
must represent the semantics of the program to ensure that the companion proof does in fact correspond to
the code. The proof should be structured in a way that makes it straightforward to verify without using
cryptographic techniques or external assistance. Once verified, the code can run without further
checking.




                          Figure 5-4. Verifying Proofs of Active Content Properties

Any attempts to tamper with the code or the safety proof result in either a verification error or, if the
verification succeeds, a safe code transformation. The theoretical underpinnings of proof carrying code
are based on well-established principles from logic, type theory, and formal verification. Nevertheless,
some potentially difficult problems remain to solve before the approach is considered practical for
widespread use.




                                                    5-11
