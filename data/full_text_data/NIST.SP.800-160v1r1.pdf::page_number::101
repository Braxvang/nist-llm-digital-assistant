NIST SP 800-160v1r1                                                                         Engineering Trustworthy Secure Systems
November 2022

E.2.       Clear Abstractions
Principle: The abstractions used to characterize the system are simple, well-defined, accurate,
precise, necessary, and sufficient.
Note: Abstractions can help manage the complexity of the system [24]. Clarity in the abstract
representations of the system facilitates an accurate understanding of the system and how the system
functions to deliver the required capability. Clear abstractions also reduce the potential for
misunderstanding or misinterpretation of what is represented by the abstraction. Applying the principle of
clear abstractions means that a system has simple, well-defined interfaces and functions that provide a
consistent and intuitive view of the data and how it is managed. The elegance (e.g., accuracy, precision,
simplicity, necessity, sufficiency) of the system interfaces – combined with a precise definition of the
functional behavior of the interfaces – promotes ease of analysis, inspection, and testing, as well as the
correct and secure use of the system. Examples that reflect the application of this principle include
avoidance of redundant, unused interfaces; information hiding; 78 and avoidance of semantic overloading
of interfaces or their parameters (e.g., not using one function to provide different functionality, depending
on how it is used).
It is important to ensure that the proper rigor is applied in the development of system abstractions during
design. Clarity in the abstract representation of the system requires the use of well-defined syntax and
semantics with elaboration as needed to ensure that the representations are well-defined, precise,
necessary, and sufficient. Clear abstractions promote confidence in analysis, verification, and the correct
use of the system. Abstractions can be achieved using models, including Systems Modeling Languages.
References: [2] [20] [21] [24]

E.3.       Commensurate Protection
Principle: The strength and type of protection provided to a system element are commensurate
with the most significant adverse effect that results from a failure of that element.
Note: The strength and effectiveness of the protection for a system element must be proportional to the
need. As the need increases, the protection of that element should also increase to the same degree. Need
is derived from the most significant adverse effect associated with the system element or the trust that is
placed in the element. The protection can come in the form of the system element’s own self-protection,
from protections provided by the system architecture, or from protection provided by other elements. The
needed strength of protection is independent of these design choices (or others, such as distributed versus
centralized design), a concept sometimes referred to as secure distributed composition [2]. Furthermore,
confidence in the effectiveness of the protections provided to a system element should also increase
commensurate to the need. This is addressed by the principle of Commensurate Rigor.
References: [2] [21]

E.4.       Commensurate Response
Principle: The system design matches the aggressiveness of an engineered response action’s
effect to the needed immediacy to control the effects of each loss scenario.



78
   The term information hiding, also called representation-independent programming, is a design discipline to ensure that the internal
representation of information in one system component is not visible to another system component invoking or calling the first component, such
that the published abstraction is not influenced by how the data may be managed internally.



                                                                      85
