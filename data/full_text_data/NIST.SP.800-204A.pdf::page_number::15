                                                                                              NIST SP 800-204A                                 BUILDING SECURE MICROSERVICES-BASED APPLICATIONS
                                                                                                                                                               USING SERVICE-MESH ARCHITECTURE




                                                                                              It is considered economical to deploy Service Mesh when the number of microservices in the
                                                                                              application is in the order of hundreds or thousands. However, the Service Mesh is not without
                                                                                              some drawbacks. Because each microservice requires its own service proxy, the number of
                                                                                              runtime instances and the overall attack surface for the application increases. As the
                                                                                              functionality built into a service proxy increases, it may become a communication bottleneck.

                                                                                              3.1    Service Mesh Components & Capabilities

                                                                                              A Service Mesh consists of two main architectural layers or components:
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204A




                                                                                                    ● Data plane
                                                                                                    ● Control plane

                                                                                              The interconnected set of proxies in a Service Mesh that control the inter-services
                                                                                              communication represents its data plane. The data plane is the data path and provides the ability
                                                                                              to forward requests from the applications. A data plane may also provide more sophisticated
                                                                                              features like health checking, load balancing, circuit breaking, timeouts, retries, authentication,
                                                                                              and authorization [5]. The specialized proxy that is created for each service instance (i.e., side-
                                                                                              car proxy) performs the runtime operations needed for enforcing security (e.g., access control,
                                                                                              communication-related), which are enabled by injecting policies (e.g., access control policies)
                                                                                              into the proxy from the control plane. This also provides the flexibility to dynamically change
                                                                                              policies without modifying the microservice’s code.

                                                                                              A control plane is a set of APIs and tools used to control and configure data plane (proxy)
                                                                                              behavior across the mesh. The Service Mesh control plane is distinct from the orchestrator’s
                                                                                              control plane—the former controls the Service Mesh, while the latter controls the cluster. The
                                                                                              control plane is where users specify authentication policies and naming information, gather
                                                                                              metrics (in general telemetry collection), and configure the data plane as a whole [6]. The
                                                                                              intelligence, data, and other artifacts required for implementing all security functions lie in the
                                                                                              control plane. These include the software for generating authentication certificates and the
                                                                                              repository for storing them, policies for authentication, authorization engine, software for
                                                                                              receiving telemetry/monitoring data regarding each microservice and aggregating them, and
                                                                                              APIs for modifying the behavior of the network through various features, such as load balancing,
                                                                                              circuit breaking, or rate limiting. The control plane of the Service Mesh platform has to be
                                                                                              integrated with the orchestration platform (as it gets critical data from the platform, such as
                                                                                              service registry) of the microservices-based application and should therefore have the required
                                                                                              integration capabilities to be useful. Since the control plane is a critical component of the Service
                                                                                              Mesh, it must be highly available and distributed. A control plane can be implemented through
                                                                                              configuration files, API calls, and user interfaces [7].

                                                                                              As part of the process of providing the communication, the following functions are supported
                                                                                              [1,2]:


                                                                                                                                               7
