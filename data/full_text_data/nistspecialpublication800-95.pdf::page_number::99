                                                                                GUIDE TO SECURE WEB SERVICES



A.4.2     Schema Poisoning

XML schemas provide formatting instructions for parsers when interpreting XML documents. Schemas
are used for all of the major XML standard grammars coming out of OASIS. Because these schemas
describe necessary preprocessing instructions, they are susceptible to poisoning. An attacker may attempt
to compromise the schema in its stored location and replace it with a similar but modified one that will
either cause valid XML documents to be rejected, or cause invalid or malicious XML documents to be
accepted by the application.

Similarly, such attacks can be used to manipulate data if the data types described in the schema are also
compromised (e.g., by changing dates to integers when the Web service is performing arithmetic
operations, or by modifying the data encoding to enable obfuscation of data that will eventually reach the
XML parser and be reformed into attack code, similar to the way a Unicode attack traverses directories
via Web servers).

A.4.3     Spoofing of UDDI/ebXML Messages

Dense groups of UDDI or ebXML garbage data can obscure query results related to specific providers.
Garbage data within UDDI is defined as useless data either intentionally or carelessly added by users via
the publish API defined in the Programmers API Specification. This garbage, if permitted to collect at
too great a rate, can shut down one or more UDDI operators. For example, a vast amount of data could be
added to UDDI as a form of a denial of service attack upon the registry. Similarly, UDDI entries may be
added that reference malicious Web services; without proper protections in place, requesters may access
such malicious Web services assuming they can be trusted.

Another possible target of attack is the UDDI or ebXML registry used for discovery of Web services.
This registry is a directory (comparable to an LDAP or X.500 directory) or database, which is vulnerable
to the same types of attacks as other directories and databases, particularly in terms of integrity and
availability. It is possible to conceive of a cross-site scripting attack in which a Web service’s entry in a
UDDI or ebXML registry is compromised to direct the unsuspecting user to a bogus Web service (i.e.,
spoofing).

A.4.4     Checksum Spoofing

The attacker intercepts and updates a message with a hash attached as an integrity mechanism,
recomputes the hash (guessing the algorithm that was used to compute the original hash) and applies it to
the altered message, then forwards that message to the intended destination. The provider processes the
message, running the plaintext of the message (“Place 100 orders”) through the hashing algorithm to
recompute the hash, which will be equal to whatever the attacker computed.

A.4.5     Principal Spoofing

In this attack, a false message is sent which appears to be from a requester. For example, the attacker
sends a message that appears as though it is from a valid requester service. Countermeasures for spoofing
require correctly configuring perimeter security, such as rejecting incoming packets from the Internet that
contain an internal (behind the firewall) IP address in their header, as well as rejecting outgoing packets
when their headers indicate that the packets originated from an external IP address (outside the firewall).




                                                     A-6
