                                                                                              NIST SP 800-53, REV. 5                      SECURITY AND PRIVACY CONTROLS FOR INFORMATION SYSTEMS AND ORGANIZATIONS
                                                                                              _________________________________________________________________________________________________


                                                                                                              mitigate attack vectors generated as a result of the changes. The correction of identified
                                                                                                              flaws includes deprecation of unsafe functions.
                                                                                                              Related Controls: SA-15.
                                                                                                       (7) DEVELOPER TESTING AND EVALUATION | VERIFY SCOPE OF TESTING AND EVALUATION
                                                                                                              Require the developer of the system, system component, or system service to verify that
                                                                                                              the scope of testing and evaluation provides complete coverage of the required controls at
                                                                                                              the following level of rigor: [Assignment: organization-defined breadth and depth of
                                                                                                              testing and evaluation].
                                                                                                              Discussion: Verifying that testing and evaluation provides complete coverage of required
                                                                                                              controls can be accomplished by a variety of analytic techniques ranging from informal to
                                                                                                              formal. Each of these techniques provides an increasing level of assurance that corresponds
                                                                                                              to the degree of formality of the analysis. Rigorously demonstrating control coverage at the
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-53r5




                                                                                                              highest levels of assurance can be achieved using formal modeling and analysis techniques,
                                                                                                              including correlation between control implementation and corresponding test cases.
                                                                                                              Related Controls: SA-15.
                                                                                                       (8) DEVELOPER TESTING AND EVALUATION | DYNAMIC CODE ANALYSIS
                                                                                                              Require the developer of the system, system component, or system service to employ
                                                                                                              dynamic code analysis tools to identify common flaws and document the results of the
                                                                                                              analysis.
                                                                                                              Discussion: Dynamic code analysis provides runtime verification of software programs using
                                                                                                              tools capable of monitoring programs for memory corruption, user privilege issues, and
                                                                                                              other potential security problems. Dynamic code analysis employs runtime tools to ensure
                                                                                                              that security functionality performs in the way it was designed. A type of dynamic analysis,
                                                                                                              known as fuzz testing, induces program failures by deliberately introducing malformed or
                                                                                                              random data into software programs. Fuzz testing strategies are derived from the intended
                                                                                                              use of applications and the functional and design specifications for the applications. To
                                                                                                              understand the scope of dynamic code analysis and the assurance provided, organizations
                                                                                                              may also consider conducting code coverage analysis (i.e., checking the degree to which the
                                                                                                              code has been tested using metrics such as percent of subroutines tested or percent of
                                                                                                              program statements called during execution of the test suite) and/or concordance analysis
                                                                                                              (i.e., checking for words that are out of place in software code, such as non-English language
                                                                                                              words or derogatory terms).
                                                                                                              Related Controls: None.
                                                                                                       (9) DEVELOPER TESTING AND EVALUATION | INTERACTIVE APPLICATION SECURITY TESTING
                                                                                                              Require the developer of the system, system component, or system service to employ
                                                                                                              interactive application security testing tools to identify flaws and document the results.
                                                                                                              Discussion: Interactive (also known as instrumentation-based) application security testing is
                                                                                                              a method of detecting vulnerabilities by observing applications as they run during testing.
                                                                                                              The use of instrumentation relies on direct measurements of the actual running applications
                                                                                                              and uses access to the code, user interaction, libraries, frameworks, backend connections,
                                                                                                              and configurations to directly measure control effectiveness. When combined with analysis
                                                                                                              techniques, interactive application security testing can identify a broad range of potential
                                                                                                              vulnerabilities and confirm control effectiveness. Instrumentation-based testing works in
                                                                                                              real time and can be used continuously throughout the system development life cycle.
                                                                                                              Related Controls: None.
                                                                                                       References: [ISO 15408-3], [SP 800-30], [SP 800-53A], [SP 800-154], [SP 800-160-1].




                                                                                              CHAPTER THREE                                                                                             PAGE 279
