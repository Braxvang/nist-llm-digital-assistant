                                                                              GUIDE TO SECURE WEB SERVICES



from returning a response to the requester. In a distributed deadlock, one Web service that is not
responding may lead to the entire choreography stalling until an administrator notices.

If deadlock occurs, multiple requesters could have their requests blocked indefinitely and could cause the
clients awaiting the responses to suspend all other activities until the responses are received, thus
rendering them unavailable to their users. Because Web services can be sequenced (i.e., a provider
responding to one requester sometimes needing to act as a requester of services from another provider),
the probabilities of a circular chain of waiting are increased. A deadlock may also occur if one of the
systems in a circular chain of waiting crashes during a request, leaving some systems endlessly waiting
for a response.

3.8.5    Service Recursion

Similar to a deadlock, Web services can also experience an infinite recursion, where Web services keep
initiating requests to one another to solve a problem. For example, Web service A implements a service
by forwarding it to Web service B, and Web service B searches the UDDI registry to dynamically bind a
Web service that performs the required functionality and finds Web service A, so it forwards the request
back to Web service A. Because neither Web service implements the required functionality, they will
continue to send requests until they run out of resources. Such a situation needs to be carefully avoided,
which may be difficult in a highly dynamic SOA.

Execution flow diagrams are the method development teams usually use to mitigate deadlock and
recursion. These diagrams are fairly effective for predicting interactions within a single application. The
interfaces from the Web service under development with other services, especially those provided by
third parties (COTS, Open Source Software [OSS]), are more difficult to manage.

At the design level, service interface information for third-party services needs to be thoroughly reviewed
so shortcomings can be effectively mitigated in the Web service design. At the design level, the most
effective antideadlock mechanisms are to implement asynchronous (non-blocking) service-to-service calls
and to design the Web service to use message buffering.

3.9     Securing the Discovery Service: Secure Interfaces to UDDI and WSDL

UDDI provides a medium for publishing and locating Web services. Originally, UDDIâ€™s main focus was
the Universal Business Registry (UBR), a publicly accessible directory of Web services. Most Web
services are not for public use, so the UDDI specification expanded to include private implementations of
the UDDI registry. A private UDDI registry provides a mechanism for internal applications and users to
discover and access Web services within an organization with little, if any, human interaction. UDDI v3
was approved as an OASIS Standard in 2005, but as of this writing a number of UDDI registries
implement UDDI v2, so UDDI v2 is also discussed. The following subsections provide additional details
into the structure, operations, and security inherent to UDDI, as well as explanations of the APIs relevant
to UDDI.

3.9.1    UDDI Structure

UDDI registries provide information about organizations and the Web services they provide through three
different interfaces:

 White pages, which provide the identity and contact information of an organization
 Yellow pages, which divide organizations into categories and provide information about their services



                                                   3-38
