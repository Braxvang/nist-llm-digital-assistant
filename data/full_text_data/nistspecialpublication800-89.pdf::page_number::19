SP 800-89                                                                 November 2006



Providing/obtaining assurance of possession normally requires explicit actions. However,
once the necessary actions have been taken, the assurance obtained may be leveraged as
assurance of private key possession by the owner during some reasonable period
containing the time at which those actions were performed. It may be appropriate to
periodically repeat the process of explicitly providing/obtaining assurance of possession,
due to the possible lessening of assurance over time (see Section 6.1).
In the case of DSA, the private key is denoted as x, coupled with the (public) domain
parameters; for ECDSA, the private key is d, coupled with the (public) domain
parameters. No explicit assurance of possession is required for the DSA and ECDSA per-
message secret number k (which may be considered as a key). For RSA, the private key is
denoted as the private value d, coupled with the (public) modulus, or an equivalent
representation.
For DSA and ECDSA, assurance of domain parameter validity shall be obtained prior to
obtaining assurance of private key possession.
For all digital signature algorithms, assurance of the validity of the public key shall be
obtained prior to or concurrently with obtaining assurance of the possession of the
associated private key.

6.1      The Effect of Time on Assurance of Private Key Possession
Assurance of private key possession is explicitly provided at a specific point in time,
herein referred to as the assurance_time. The passage of time may adversely affect the
level of confidence that a relying party has in the ownerâ€™s continued possession of that
key. For example, the possible occurrence of one or more of the following events would
negatively impact assurance of possession:
      1. Owner operations. Activities by the owner may corrupt the private key or break
         the association between private and public keys. For example, the owner may lose
         a pointer into a database.
      2. Faults due to random errors. Hardware failures may lead to a non-repeatable
         corruption of the stored private key or the links from the associated public key.
      3. Implementation errors. Undetected implementation errors may affect the integrity
         of either the public or private key, or the association between them. For example,
         a program could unintentionally overwrite memory. Validation by a NIST
         Approved testing laboratory provides assurance that implementation errors do not
         exist.
      4. Deliberate attack. Adversarial actions can compromise the assurance of key pair
         integrity, private key possession and/or private key confidentiality. If a
         sufficiently long interval has passed since assurance of possession was last
         explicitly obtained, there may have been adequate time and opportunity for an
         adversary to mount an attack.
As time progresses, there is ordinarily a decrease in the level of assurance because of the
increased probability that one or more of the above events has occured.



                                             14
