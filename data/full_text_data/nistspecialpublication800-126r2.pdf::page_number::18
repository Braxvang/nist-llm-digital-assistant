               The Technical Specification for the Security Content Automation Protocol (SCAP): SCAP Version 1.2



to connect the components together within the data stream. Content authors MAY place components in
any order. For example, some authors might choose to place dictionary components first to help optimize
data stream parsing.
Links serve two purposes: to indicate which component is being referred to, and to provide a map to
associate references within a component to other links within the data stream. The latter allows a data
stream to define context for each component’s references within the bounds of the data stream’s own set
of links. Figure 2 provides a conceptual example that illustrates how a data stream is constructed.




                                        Figure 2 - SCAP Data Stream

In Figure 2, the data stream links to three components. The OVAL component does not reference out to
external content, so there are no mappings captured for it. The XCCDF and CPE Dictionary components
reference other components (e.g., oval1). When referencing components within the example data stream,
a mapping indicates that when xccdf1 references “sample-oval.xml”, the content is found through the link
to the component identified as “oval1”. Similarly, when the cpe dict1 component references “dict-
oval.xml” the component reference is resolved through the link to the component identified as “oval1”.
This approach associates SCAP components within a data stream at the SCAP logical level, allowing
components to be reused across data streams within the same data stream collection. This reuse can be
accomplished irrespective of how references are made within a given component.
The following is a stripped down example of the source data stream. The details are covered later in this
specification.
<ds:data-stream-collection id="dsc1" schematron-version="1.0">
 <ds:data-stream id="ds1" scap-version="1.2" use-case="CONFIGURATION">
   <ds:dictionaries>
     <ds:component-ref id="ref1" xlink:href="#dict1">
       <cat:catalog>
         <cat:uri name="dict-oval.xml" uri="#ref3"/>
       </cat:catalog>
     </ds:component-ref>
   </ds:dictionaries>
   <ds:checklists>
     <ds:component-ref id="ref2" xlink:href="#xccdf1">
       <cat:catalog>
         <cat:uri name="sample-oval.xml" uri="#ref3"/>



                                                      11
