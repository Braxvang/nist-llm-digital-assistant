                                                                                             NIST SP 800-204                                                          SECURITY STRATEGIES FOR
                                                                                                                                                      MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                             In a microservices-based application system, each of the multiple, collaborative services can be
                                                                                             built using different technologies. This promotes the concept of technical heterogeneity, which
                                                                                             means that each service in a microservices-based application system may be written in a different
                                                                                             programming language, development platform, or using different data storage technologies. This
                                                                                             concept enables developers to choose the right tool or language depending on the type of service.
                                                                                             Thus, in a single microservices-based application system, the constituting services may be built
                                                                                             using different languages (e.g., Ruby, Golang, Java) and may be hosting different stores (e.g.,
                                                                                             document datastore, graphical Database (DB), or multimedia DB). Each component service is
                                                                                             developed by a team–a microservice or DevOps team—which provides all of the development
                                                                                             and operational requirements for that service with a high degree of autonomy regarding
                                                                                             development and deployment techniques so long as the service functionality or service contract
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                             is agreed upon [6].

                                                                                             Services in microservices are separately deployed on different nodes. The communication
                                                                                             between them is transformed from a local function call to a remote call, which could affect
                                                                                             system performance due to inherent latency in network communication. Thus, a lightweight
                                                                                             communication infrastructure is required.

                                                                                             Scaling can be applied selectively on those services that have performance bottlenecks due to
                                                                                             insufficient Central Processing Unit (CPU) or memory resources, while other services can
                                                                                             continue to be run using smaller, less expensive hardware. The functionality associated with such
                                                                                             a service may be consumed in different ways for different purposes, thereby promoting
                                                                                             reusability and composability. One example includes a customer database service, the contents of
                                                                                             which are used both by shipping departments for preparing bills of lading and by accounts
                                                                                             receivable or the billing department to send invoices.

                                                                                             2.5   Microservices: Interaction Styles

                                                                                             In monolithic applications, each component (i.e., a procedure or function) invokes another using
                                                                                             a language-level call, such as a method or function. In microservices-based applications, each
                                                                                             service is typically a process running in its own distinct network node that communicates with
                                                                                             other services through an inter-process communication mechanism (IPC) [7]. Additionally, a
                                                                                             service is defined using an interface definition language (IDL) (e.g., Swagger/OpenAPI),
                                                                                             resulting in an artifact called the application programming interface (API). The first step in the
                                                                                             development of a service involves writing the interface definition, which is reviewed with client
                                                                                             developers and iterated multiple times before the implementation of the service begins. Thus, an
                                                                                             API serves as a contract between clients and services.

                                                                                             The choice of the IPC mechanism dictates the nature of the API [7]. Table 1provides the nature
                                                                                             of API definitions for each IPC mechanism.




                                                                                                                                             5
