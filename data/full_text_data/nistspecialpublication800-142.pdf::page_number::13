                                                            Practical Combinatorial Testing
 _______________________________________________________
     In the second approach, we select combinations of input data values, which then
become part of complete test cases, creating a test suite for the application. In this case
combinatorial coverage of input data values is required for tests constructed. A typical ad
hoc approach to testing involves subject matter experts setting up use scenarios, then
selecting input values to exercise the application in each scenario, possibly supplementing
these tests with unusual or suspected problem cases. In the combinatorial approach to input
data selection, a test data generation tool is used to cover all combinations of input values
up to some specified limit. One such tool is ACTS (described in Appendix C), which is
available freely from NIST.

2.1.1 Configuration Testing

     Many, if not most, software systems have a large number of configuration parameters.
Many of the earliest applications of combinatorial testing were in testing all pairs of system
configurations. For example, telecommunications software may be configured to work
with different types of call (local, long distance, international), billing (caller, phone card,
800), access (ISDN, VOIP, PBX), and server for billing (Windows Server, Linux/MySQL,
Oracle). The software must work correctly with all combinations of these, so a single test
suite could be applied to all pairwise combinations of these four major configuration items.
Any system with a variety of configuration options is a suitable candidate for this type of
testing.

     Configuration coverage is perhaps the most developed form of combinatorial testing.
It has been used for years with pairwise coverage, particularly for applications that must be
shown to work across a variety of combinations of operating systems, databases, and
network characteristics.

       For example, suppose we had an application that is intended to run on a variety of
platforms comprised of five components: an operating system (Windows XP, Apple OS X,
Red Hat Enterprise Linux), a browser (Internet Explorer, Firefox), protocol stack (IPv4,
IPv6), a processor (Intel, AMD), and a database (MySQL, Sybase, Oracle), a total of
3 ⋅ 2 ⋅ 2 ⋅ 2 ⋅ 3 = 72 possible platforms. With only 10 tests, shown in Table 1, it is possible to
test every component interacting with every other component at least once, i.e., all possible
pairs of platform components are covered.

                      Test    OS     Browser     Protocol   CPU     DBMS
                        1      XP        IE        IPv4     Intel   MySQL
                        2      XP     Firefox      IPv6     AMD     Sybase
                        3      XP        IE        IPv6     Intel   Oracle
                        4    OS X     Firefox      IPv4     AMD     MySQL
                        5    OS X        IE        IPv4     Intel   Sybase
                        6    OS X     Firefox      IPv4     Intel   Oracle
                        7    RHEL        IE        IPv6     AMD     MySQL
                        8    RHEL     Firefox      IPv4     Intel   Sybase
                        9    RHEL     Firefox      IPv4     AMD     Oracle



                                                                                                     7
