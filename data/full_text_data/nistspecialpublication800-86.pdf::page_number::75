                                                       GUIDE TO INTEGRATING FORENSIC TECHNIQUES INTO INCIDENT RESPONSE



          the raw network data is available for examination and analysis.110 Packet sniffer data is best
          reviewed with a protocol analyzer, which interprets the data for the analyst based on knowledge
          of protocol standards and common implementations.
      ! Network Monitoring. Network monitoring software is helpful in identifying significant
        deviations from normal traffic flows, such as those caused by DDoS attacks, during which,
        hundreds or thousands of systems launch simultaneous attacks against particular hosts or
        networks. Network monitoring software can document the impact of these attacks on network
        bandwidth and availability, as well as providing information about the apparent targets. Traffic
        flow data can also be helpful in investigating suspicious activity identified by other sources. For
        example, it might indicate whether a particular communications pattern has occurred in the
        preceding days or weeks.
      ! ISP Records. Information from an ISP is primarily of value in tracing an attack back to its
        source, particularly when the attack uses spoofed IP addresses. Section 6.4.4 discusses this
        subject in more depth.
6.4.2.2 Examination and Analysis Tools

Because network forensics can be performed for many purposes with dozens of data source types,
analysts may use several different tools on a regular basis, each well-suited to certain situations. Analysts
should be aware of the possible approaches to examining and analyzing network traffic data and should
select the best tools for each case, rather than applying the same tool to every situation. Analysts should
also be mindful of the shortcomings of tools; for example, a particular protocol analyzer might not be able
to translate a certain protocol or handle unexpected protocol data (e.g., illegal data field value). It can be
helpful to have an alternate tool available that might not have the same deficiency.

Tools are often helpful in filtering data. For example, an analyst might need to search data without any
concrete information that could narrow the search. This is most likely to occur when the analyst is
responsible for performing periodic or ongoing reviews of security event data logs and alerts. If the
volume of log entries and alerts is low, reviewing the data is relatively easy—but in some cases, there
may be many thousands of events listed per day. When a manual data review is not possible or practical,
analysts should use an automated solution that filters the events and presents the analysts with only the
events that are most likely to be of interest. One effective review technique is to import the logs into a
database and run queries against them, either eliminating types of activity highly likely to be benign and
reviewing the rest, or focusing on the types of activity most likely to be malicious. For example, if the
initial suspicion is that the server was compromised through HTTP activity, then log filtering might start
by eliminating everything except HTTP activity from consideration. An analyst who is very familiar with
a particular data source can generally perform a blind search on it relatively quickly, but, on unfamiliar
data sources, blind searches can take an extremely long time, because there might be little or no basis for
eliminating certain types of activity from consideration.

Another analysis option is to use a visualization tool. These tools present security event data in a
graphical format. This is most often used to represent network traffic flows visually, which can be very
helpful in troubleshooting operational issues and identifying misuse. For example, attackers might use
covert channels—using protocols in unintended ways to secretly communicate information (e.g., setting
certain values in network protocol headers or application payloads). The use of covert channels is
generally hard to detect, but one useful method is identifying deviations in expected network traffic flows.



110
      Many NFAT programs, as described in Section 6.2.6, provide this function, as well as additional capabilities.


                                                               6-15
