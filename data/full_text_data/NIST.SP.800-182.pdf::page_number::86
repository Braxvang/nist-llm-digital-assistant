Auto m ate d Co mbin atorial Te st in g                            combinatorial measurement tools; input modeling and
     Software developers often encounter failures that result      fault location tools; a provisional patent application on the
from an unexpected interaction between components. NIST            oracle-free testing method; plus seminars at a number of
research has shown that most failures are triggered by one         conferences, universities, and federal agencies.
or two parameters, and progressively fewer by three, four, or           Plans for FY 2016 include combinatorial testing for
more parameters (see Figure 25 below), a relationship that         big data software; initiation of a new CRADA project;
is called the Interaction Rule. These results have important       measurement of input model combination coverage of
implications for testing. If all faults in a system can be         security-critical software; a beta release of tools for testing
triggered by a combination of n or fewer parameters, then          to the modified condition decision coverage test criterion
testing all n-way combinations of parameters can provide           for life-critical software; developing tools to implement
very strong fault detection efficiency. These methods are          oracle-free testing methods; analysis of empirical data
being applied to software and hardware testing for reliability,    on failures; further development of methods and tools for
safety, and security. CSD’s focus is on empirical results and      fault localization; and seminars, workshops, and tutorials at
real-world problems.                                               professional meetings and research labs.
     Project highlights for FY 2015 include the publication of     For More Information, See:
a paper on a new method of “oracle-free testing”, a form
                                                                   http://csrc.nist.gov/groups/SNS/acts/
of consistency checking using two-layer covering arrays
with equivalence classes to automatically detect a large
class of software faults; invited lectures at conferences and      CON TACTS:
universities; leading the fourth International Workshop on         Mr. Rick Kuhn			  Dr. Raghu Kacker
Combinatorial Testing, held in conjunction with the eighth         (301) 975-3337			 (301) 975-2109
IEEE International Conference on Software Testing; initiating      kuhn@nist.gov			raghu.kacker@nist.gov
research on using combinatorial methods to reduce the cost
of high assurance for life-critical software, tools and methods
for locating faults from test results; and analyzing the factors   Ro o ts o f Trust
involved in different types of software faults. Collaborators          Modern computing devices consist of various hardware,
include researchers from the University of Texas at Arlington,     firmware, and software components at multiple layers of
the University of Texas at Dallas, East Carolina University,       abstraction. Many security and protection mechanisms are
and Duke University.                                               currently rooted in software that, along with all underlying
                                                                   components, must be trusted and not tampered with. A
                                                                   vulnerability in any of those components could compromise
                                                                   the trustworthiness of the security mechanisms that rely
                                                                   upon those components. Stronger security assurances may
                                                                   be possible by grounding security mechanisms in roots of
                                                                   trust.
                                                                        Roots of trust are highly reliable and secure hardware,
                                                                   firmware, and software components that perform specific,
                                                                   critical security functions. Because roots of trust are
                                                                   inherently trusted, they must be secure by their design. As
                                                                   such, many roots of trust are implemented in hardware or
                                                                   protected firmware so that malware cannot tamper with
                                                                   the functions they provide. Roots of trust provide a firm
                                                                   foundation from which to build security and trust.
             Figure 25: Interaction Rule Graph                         CSD’s work aims to encourage the use of roots of
                                                                   trust in computers to provide stronger security assurances.
    Technology transfer activities included the publication
                                                                   A focus area for this work has been securing firmware.
of a number of technical papers and software distribution;
                                                                   Previous guidelines by CSD described methods to protect
publication of the results of a Cooperative R&D (CRADA)
                                                                   boot firmware, commonly known as the Basic Input/Output
project with Lockheed Martin; release of enhanced
                                                                   System (BIOS) in PC clients and servers. In FY 2015, the first



78
COMPUTER SECURITY DIVISION ANNUAL REPORT | 2015                        T H I S P U B L I C AT I O N I S AVA I L A B L E F R E E O F C H A R G E F R O M :
                                                                                               h t t p : // d x . d o i . o r g / 1 0 . 6 0 2 8 / N I S T . S P. 8 0 0 - 1 8 2
