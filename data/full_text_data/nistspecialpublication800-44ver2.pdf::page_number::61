                                                                             GUIDELINES ON SECURING PUBLIC WEB SERVERS



interact more dynamically with Web sites. Unfortunately, these interactive elements introduced many
Web-related vulnerabilities that remain a concern today. 42

Active content refers to interactive program elements downloaded to the client (i.e., a Web browser) and
processed there instead of the server. A variety of active content technologies exists; some of the more
popular examples are ActiveX, Java, VBScript, JavaScript, and Asynchronous JavaScript and XML
(AJAX). The use of active content often requires users to reduce the security settings on their Web
browsers for processing to occur. If not implemented correctly, active content can present a serious threat
to the end user. For example, active content can take actions independently without the knowledge or
expressed consent of the user. While active content poses risk to the client, it can also pose risk to the
Web server. The reason is that information processed on the client is under the control of the user, who
can potentially manipulate the results by reverse engineering and tampering with the active content. For
example, form validation processing done with active content elements on the client side can be changed
to return out-of-range options or other unexpected results to the server. Therefore, the results of
processing done on the client by elements of active content should not be trusted by the server; instead,
the results should be verified by the server. Organizations considering the deployment of client-side
active content should carefully consider the risks to both their users and their Web servers.

Content generators are programs on a Web server that dynamically generate HTML pages for users; these
pages may be generated using information retrieved from a backend server, such as a database or
directory, or possibly user-supplied input. Some of the earliest content generators were CGI scripts
executed by the Web server when a specific URL was requested. In contrast, some modern content
generators are an integral component of the servers on which they run, such as Java Enterprise Edition
(Java EE) application servers. Because content generators are implemented on the server, they can open
the Web server itself to threats. The danger with content generators occurs when they blindly accept
input from users and apply it to actions taken on the Web server. If the content generator has not been
implemented correctly to restrict input, an attacker can enter certain types of information that may
negatively affect the Web server or compromise its security. For example, one common attack against
content generators is Structured Query Language (SQL) injection. In this type of attack, a malicious
entity sends specially crafted input to the content generator. The input includes a specific SQL command
string that, when submitted unfiltered to a SQL database server, potentially returns to the attacker any or
all of the information stored in the database. SQL injections and other attacks are used to execute
commands or gain unauthorized access to the Web server or a backend database server.

All Web sites that implement active content and content generators should perform additional steps to
protect the active content from compromise. These steps, which are discussed in the following sections,
may not apply to all installations; therefore, they should be used as guidance in conjunction with
appropriate manufacturerâ€™s documentation.

Special caution is also required for downloading preprogrammed scripts or executables from the Internet.
Many Web administrators and Webmasters are tempted to save time by downloading freely available
code from the Internet. Although this is obviously convenient, it is not risk-free. There are many
examples of malicious code being distributed this way. In general, no third-party scripts should be
installed on a Web server unless they are first subjected to a thorough code review by a trusted expert.
Security code reviews should also be considered for content on Web servers that are critical to the
organization or are highly threatened.



42
     For more extensive guidelines on active content, please see NIST SP 800-28 Version 2, Guidelines on Active Content and
     Mobile Code (http://csrc.nist.gov/publications/nistpubs/).


                                                             6-9
