      NIST SP 800-63B-4 ipd                                            Digital Identity Guidelines
      December 2022                                     Authentication and Lifecycle Management


729   Verifiers SHALL implement a rate-limiting mechanism that effectively limits the number
730   of failed authentication attempts that can be made on the subscriber account as described
731   in Sec. 5.2.2.
732   Verifiers SHALL NOT impose other composition rules (e.g., requiring mixtures of
733   different character types or prohibiting consecutively repeated characters) for memorized
734   secrets. Verifiers SHALL NOT require users to periodically change memorized secrets.
735   However, verifiers SHALL force a change if there is evidence of compromise of the
736   authenticator.
737   Verifiers SHALL allow the use of password managers. To facilitate their use, verifiers
738    SHOULD permit claimants to use “paste” functionality when entering a memorized
739   secret. Password manangers may increase the likelihood that users will choose stronger
740   memorized secrets.
741 In order to assist the claimant in successfully entering a memorized secret, the verifier
742  SHOULD offer an option to display the secret — rather than a series of dots or asterisks
743 — while it is entered and until it is submitted to the verifier. This allows the claimant to

744 confirm their entry if they are in a location where their screen is unlikely to be observed.
745 The verifier MAY also permit the claimant’s device to display individual entered
746 characters for a short time after each character is typed to verify correct entry. This is
747 common on mobile devices.
748   The verifier SHALL use approved encryption and an authenticated protected channel
749   when requesting memorized secrets in order to provide resistance to eavesdropping and
750   adversary-in-the-middle attacks.
751   Verifiers SHALL store memorized secrets in a form that is resistant to offline attacks.
752   Memorized secrets SHALL be salted and hashed using a suitable password hashing
753   scheme. Password hashing schemes take a password, a salt, and a cost factor as inputs and
754   generate a password hash. Their purpose is to make each password guess more expensive
755   for an attacker who has obtained a hashed password file and thereby make the cost of a
756   guessing attack high or prohibitive. A function that is both memory-hard and compute-
757   hard SHOULD be used because it increases the cost of an attack. While NIST has not
758   published guidelines on specific password hashing schemes, examples of such functions
759   include Argon2 [Argon2] and scrypt [Scrypt]. Examples of approved one-way functions
760   include Keyed Hash Message Authentication Code (HMAC) [FIPS198-1], any approved
761   hash function in [SP800-107], Secure Hash Algorithm 3 (SHA-3) [FIPS202], CMAC
762   [SP800-38B], Keccak Message Authentication Code (KMAC), Customizable SHAKE
763   (cSHAKE), and ParallelHash [SP800-185]. The chosen output length of the password
764   hashing scheme SHOULD be the same as the length of the underlying one-way function
765   output.
766   The salt SHALL be at least 32 bits in length and be chosen arbitrarily so as to minimize
767   salt value collisions among stored hashes. Both the salt value and the resulting hash
768    SHALL be stored for each memorized secret authenticator.


                                                 16
