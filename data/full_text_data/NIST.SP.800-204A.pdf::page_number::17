                                                                                              NIST SP 800-204A                                 BUILDING SECURE MICROSERVICES-BASED APPLICATIONS
                                                                                                                                                               USING SERVICE-MESH ARCHITECTURE


                                                                                              3.2   Service Mesh as Communication Middleware: What is Different

                                                                                              Prior to the Service Mesh, in order to provide infrastructure functionality (e.g., service discovery,
                                                                                              load balancing, circuit breaking, fault injection, security monitoring, authorization, and
                                                                                              distributed tracing for distributed systems such as microservices-based applications), a set of
                                                                                              components and frameworks that provide these functionalities must be carefully chosen. Some
                                                                                              components will only work within certain frameworks, and frameworks themselves are tied to
                                                                                              specific languages. Additionally, the application service’s code must be modified to work with or
                                                                                              be integrated into these components [8].

                                                                                              In the case of Service Mesh, the technology or programming language in which the individual
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204A




                                                                                              microservices are written do not matter since operation occurs at the network level. For example,
                                                                                              if the microservices application developer develops an HTTP server, they have complete
                                                                                              freedom to choose any language—Java, C++, Rust, Go, JavaScript, Python, etc. Service Mesh
                                                                                              decouples application code from the management of service-to-service communication. The
                                                                                              application code does not need to know about network topology, service discovery, load
                                                                                              balancing, or connection management logic [9]. Features like telemetry, traffic shaping, service
                                                                                              discovery, and network policy control can be provided out of the box as well.

                                                                                              Since Service Mesh is defined as a communication middleware, the next question that arises is,
                                                                                              “how does it differ from any other distributed system middleware?” The traditional middleware
                                                                                              for distributed systems includes application delivery controllers (ADCs), load balancers, and API
                                                                                              gateways. In addition to having heavy costs and operating overheads, these middleware
                                                                                              appliances are unsuitable in contexts where the application components they serve are in the
                                                                                              form of loosely coupled modular microservices since these components require fine-grained
                                                                                              capabilities and functionalities, such as dynamic discovery, which are not required by modules of
                                                                                              monolithic applications.

                                                                                              In order to understand the unsuitability of traditional communication middleware components for
                                                                                              distributed systems and the need for lightweight solutions for microservices-based application
                                                                                              systems, consider the nature of communications in those systems. Clients of various types
                                                                                              interface with an application made up of a huge number of microservices. The communication
                                                                                              traffic between the clients and any application service is called “north-south” traffic, and those
                                                                                              between one microservice and another is called “east-west” traffic. Because of the relatively high
                                                                                              number of microservices as components in a microservices-based application compared to a
                                                                                              monolithic application, the amount of east-west traffic is so high that a lightweight
                                                                                              communication middleware, such as the Service Mesh, is needed to provide an acceptable level
                                                                                              of performance for a production application.

                                                                                              Though a microservices-based application can be implemented without a container and its
                                                                                              associated orchestration service, it is often identified as a cloud-native application with a service-
                                                                                              based architecture, API-driven communications, container-based infrastructure, and a bias for
                                                                                              DevOps (i.e., development and operations) processes (e.g., continuous improvement, agile
                                                                                              development, continuous delivery, collaborative development among developers, quality
                                                                                              assurance teams, security professionals, IT operations, and line-of-business stakeholders [3]).
                                                                                              Part of the reason for this perspective is that monolithic software development and deployment
                                                                                                                                                 9
