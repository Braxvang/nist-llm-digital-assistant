ESTABLISHING WIRELESS ROBUST SECURITY NETWORKS: A GUIDE TO IEEE 802.11I



6.1.2.2 One-Time Password (OTP)

The OTP method, which is based on RFC 2289 and RFC 2243, 70 involves the use of an identical OTP
generator on the peer and authenticator. The generator iterates a secure hash function a specified number
of times using a passphrase and random seed as the initial input. After each successful authentication
transaction, the number of iterations is reduced by one, resulting in a unique series of passwords. The
OTP generator can reside on a hardware token or in software on a client computer (e.g., a STA). The
OTP method cannot make any of the WLAN required security claims, but potentially could be used if it
were tunneled within another method that can support the required claims.

6.1.2.3 Generic Token Card (GTC)

The GTC method is used for hardware token schemes that require user input. The EAP Request contains
a displayable message, and the EAP Response contains the token-generated information needed for
authentication. Like MD5-Challenge and OTP, GTC does not support any of the required WLAN
security claims, but could be used if it were tunneled within another method that can support the required
claims.

6.1.3    TLS-Based EAP Methods

The EAP methods defined in RFC 3748 have a number of serious security shortcomings; one of the most
significant is that they do not generate key material. Without key material, the WLAN software on the
STA and AP cannot apply protections to the traffic between STA and AP, as required for WLAN
security. Consequently, IEEE 802.11 RSN solutions must deploy EAP methods other than those defined
in RFC 3748 for the networks to be operational, regardless of the level of security desired. RFC 3748
states that due to the complexity of developing key generation algorithms, EAP methods should be based
on well-established and analyzed key establishment and generation techniques. In practice, this
recommendation limits potential methods to those based on the following key establishment and
generation protocol: Transport Layer Security (TLS), 71 a revision of Secure Sockets Layer (SSL), which
is most commonly used to secure Web site communications.

TLS has emerged as the dominant protocol for EAP methods that support IEEE 802.11 RSNs. TLS can
use public key certificates for authentication and secure transfer of key material; it also supports
authentication via pre-shared keys. 72 TLS is designed either to authenticate a server to a client or to
mutually authenticate the client and server to each other. For a device to be authenticated using TLS, it
must host a public key certificate or be provisioned with a pre-shared key. In an IEEE 802.11 RSN
context, if TLS using certificates is used only to authenticate the AS and generate key material, then only
the AS must possess a certificate. In addition, the STA needs to have a copy of the AS’s certificate in
order to authenticate the AS. In this scenario, the AS must authenticate the STA using one or more
additional EAP methods tunneled within the TLS session. However, if TLS with certificates is used for
mutual authentication, then both the STA and the AS must have certificates. Mutual TLS authentication
generally is more secure than one-way TLS authentication coupled with one or more additional EAP
methods.


70
     For more information, see RFC 2289, A One-Time Password System, at http://www.ietf.org/rfc/rfc2289.txt, and RFC 2243,
     OTP Extended Responses, at http://www.ietf.org/rfc/rfc2243.txt.
71
     For more information on TLS, see RFC 2246, The TLS Protocol, Version 1.0, at http://www.ietf.org/rfc/rfc2246.txt.
     Another good source of information is NIST SP 800-52, Guidelines for the Selection and Use of Transport Layer Security
     (TLS) Implementations, available at http://csrc.nist.gov/publications/nistpubs/800-52/SP800-52.pdf.
72
     IPsec’s IKE has always included authentication using pre-shared secret keys. The TLS Working Group recently adopted
     RFC 4279, Pre-Shared Key Ciphersuites for TLS, to enable both pre-shared key authentication and key derivation.


                                                            6-6
