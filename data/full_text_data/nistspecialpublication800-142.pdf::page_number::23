                                                           Practical Combinatorial Testing
 _______________________________________________________
the original configurations are underlined. Note that adding the constraint also resulted in
reducing the number of test configurations by one. This will not always be the case,
depending on the constraints used, but it illustrates how constraints can help reduce the
problem. Even if particular combinations are testable, the test team may consider some
combinations unnecessary, and constraints could be used to prevent these combinations,
possibly reducing the number of test configurations.

                     Test    OS     Browser    Protocol   CPU      DBMS
                       1     XP        IE        IPv4      Intel   MySQL
                       2     XP      Firefox     IPv6     AMD      Sybase
                       3     XP        IE        IPv6      Intel   Oracle
                       4    OS X     Firefox     IPv4     AMD      MySQL
                       5    OS X     Firefox     IPv4      Intel   Sybase
                       6    OS X     Firefox     IPv6     AMD      Oracle
                       7     RHL     Firefox     IPv6      Intel   MySQL
                       8     RHL     Firefox     IPv4      Intel   Oracle
                       9     XP        IE        IPv4     AMD      Sybase

      Figure 8.      Test configurations for simple example with constraint.


3.3.2 Cost Factors

Using combinatorial methods to design test configurations is probably the most widely
used combinatorial approach because it is quick and easy to do and typically delivers
significant improvements to testing.     Combinatorial testing for input parameters can
provide better test coverage at lower cost than conventional tests, and can be extended to
high strength coverage to provide much better assurance.

3.4   Chapter Summary

1. Configuration testing is probably the most commonly used application of combinatorial
methods in software testing. Whenever an application has roughly five or more
configurable attributes, a covering array is likely to make testing more efficient.
Configurable attributes usually have a small number of possible values each, which is an
ideal situation for combinatorial methods. Because the number of t-way tests is
proportional to vt log n, for n parameters with v values each, unless configurable attributes
have more than 8 or 10 possible values each, the number of tests generated will probably be
reasonable. The real-world testing problem introduced in Section 3.2 is a fairly typical
size, where 4-way interactions can be tested with a few hundred tests.

2. Because many systems have certain configurations that may not be of interest (such as
Internet Explorer browser on a Linux system), constraints are an important consideration in
any type of testing. With combinatorial methods, it is important that the covering array
generator allows for the inclusion of constraints so that all relevant interactions are tested,
and important information is not lost because a test contains an impossible combination.


                                                                                                  17
