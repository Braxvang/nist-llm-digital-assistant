                                                                                             NIST SP 800-204                                                              SECURITY STRATEGIES FOR
                                                                                                                                                          MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                                   •    One should reuse existing trusted services (e.g., databases, caches, directories) for state
                                                                                                        management.
                                                                                             These drivers, in turn, result in the following design principles for a microservice:

                                                                                                   •    Autonomy,
                                                                                                   •    Loose coupling,
                                                                                                   •    Re-use,
                                                                                                   •    Composability,
                                                                                                   •    Fault tolerance,
                                                                                                   •    Discoverability, and
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                                   •    APIs alignment with business processes.

                                                                                             2.3       Business Drivers

                                                                                             Though the business drivers for deployment of microservices-based application systems are only
                                                                                             marginally related to the theme of this document, it is useful to identify and state those that are
                                                                                             relevant from the point of view of user and organizational behavior [5]:

                                                                                                   •    Ubiquitous access: users want access to applications from multiple client devices (e.g.,
                                                                                                        browsers, mobile devices).
                                                                                                   •    Scalability: applications must be highly scalable to maintain availability in the face of an
                                                                                                        increasing number of users and/or increased rate of usage from the existing user base.
                                                                                                   •    Agile development: organizations want frequent updates to quickly respond to
                                                                                                        organizational (process and structural) changes and market demands.

                                                                                             2.4       Building Blocks

                                                                                             Microservices-based applications (e.g., distributed enterprise or web applications [1]) are built
                                                                                             using an architectural style or design pattern that is not restricted to any specific technology and
                                                                                             is comprised of small independent entities (end points) that communicate with each other using
                                                                                             lightweight mechanisms. These end points are implemented using well-defined APIs. There are
                                                                                             several types of API endpoints, such as Simple Object Access Protocol (SOAP) or REST (
                                                                                             Hypertext Transfer Protocol (HTTP) protocol). Each of the small independent entities provides a
                                                                                             distinct business capability called a “service” and may have its own data store or repository.
                                                                                             Access to these services is provided by various platforms or client types, such as web browsers
                                                                                             or mobile devices, using a component called the “client.” Together, the component services and
                                                                                             the client form the complete microservices-based application system. The services in such a
                                                                                             system may be classified as:

                                                                                                   •    Application-functionality services.
                                                                                                   •    Infrastructure services (called “core features” in this document) implemented either as
                                                                                                        stand-alone features or bundled into architectural frameworks (e.g., API gateway, service
                                                                                                        mesh). These include, but are not limited to, authentication and authorization, service
                                                                                                        registration and discovery, and security monitoring.
                                                                                                                                                  4
