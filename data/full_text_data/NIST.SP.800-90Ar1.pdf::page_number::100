NIST SP 800-90A Rev. 1                                             Recommendation for Random Number
                                                                    Generation Using Deterministic RBGs


The distinguishing attack is conceptually quite simple. For concreteness, consider the case of
TDEA CTR_DRBG. The DRBG generates a maximum of 128 64-bit blocks per generate
request, thus providing 213 bits per request. An ideal random source would have a very small
probability (about 2-51) of producing a pair of identical 64-bit blocks within that generate request
output; each generate request from the CTR_DRBG is generated by running the block cipher in
counter mode, so there can never be a duplicate block produced within a generate request
output. (The block cipher is rekeyed between generate requests, so duplicate blocks can appear
in different generate request outputs.) TDEA CTR_DRBG permits the use of up to 232 generate
requests. An ideal random source, providing 232 sequences of 128 64-bit blocks, would have a
probability of about 2-19 of having a duplicate block in one of those sequences of 128 64-bit
blocks; the CTR_DRBG will never have such a duplicate block. This provides a distinguisher âˆ’
an attacker, given a sequence of 213 232 = 245 bits from an ideal random source, has about a 2-19
probability of seeing an event happen that could never happen from TDEA CTR_DRBG.

Consider some application in which a DRBG's outputs must not be distinguishable by an
attacker, and assume that an attacker who sees 264 bits of output from the TDEA CTR_DRBG
across at least one reseed, and wants to decide whether these bits came from the CTR_DRBG or
from an ideal random source. The best case for the attacker is that each generate request used
the maximum allowed value of 213 bits of output = 128 64-bit blocks of output. In this case, the
TDEA CTR_DRBG received 245 generate requests. An ideal random sequence has a probability
of about 2-6 of having a duplicate block in one of the generate outputs; the CTR_DRBG outputs
will never have one. An attacker looking at the sequence will not be able to determine that it
came from the CTR_DRBG, though he would have a pretty large advantage in a distinguishing
game.

The case for AES CTR_DRBG is similar: each generate request may produce no more than 219
bits, which means 212 128-bit blocks. In an ideal random sequence of 212 128-bit blocks, the
probability that any two blocks will be the same is approximately 2-105; AES CTR_DRBG will
never provide a generate output with duplicate blocks. AES CTR_DRBG permits up to 248
generate requests, so an attacker seeing the maximum length of output permitted (267 bits) from
either an AES CTR_DRBG instance or an ideal random sequence will have a 2-57 probability of
being able to distinguish the two.
Resources. CTR_DRBG may be implemented with or without a derivation function.
When a derivation function is used, CTR_DRBG can process the personalization string and any
additional input in the same way as any other DRBG mechanism, but at a cost in performance
because of the use of the derivation function (as opposed to not using the derivation function; see
below). Such an implementation may be seeded by any approved randomness source that may
or may not provide full entropy.
When a derivation function is not used, CTR_DRBG is more efficient when the personalization
string and any additional input are provided, but is less flexible because the lengths of the
personalization string and additional input cannot exceed seedlen bits. Such implementations
must be seeded by a randomness source that provides full entropy (e.g., an approved entropy
source that has full entropy output or an approved NRBG).
CTR_DRBG requires access to a block cipher algorithm, including the ability to change keys,
and the storage space required for the internal state (see Section 10.2.1.1).

                                                 91
