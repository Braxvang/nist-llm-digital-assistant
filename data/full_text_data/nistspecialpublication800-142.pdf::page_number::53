                                                           Practical Combinatorial Testing
 _______________________________________________________

9 MODEL-BASED TEST ORACLES

        One of the most effective ways to produce test oracles is to use a model of the
system under test, and generate complete tests, including both input data and expected
results, directly from the model. The model in this case is exactly what the name implies:
it incorporates the most important aspects of the system, but not every detail such as the
location of an amount on a screen (if it did include all details, it would be equivalent to the
system itself). This chapter provides a step-by-step introduction to model-based automated
generation of tests that provide combinatorial coverage. Procedures introduced in this
tutorial will produce a set of complete tests, i.e., input values with the expected output for
each set of inputs.

      In addition to the ACTS covering array generator, (see Appendix C), we use
NuSMV [18], a variant of the original SMV model checker. NuSMV is freely available
and was developed by Carnegie Mellon University, Instituto per la Ricerca Scientifica e
Tecnolgica (IRST), U. of Genova, and U. of Trento. NuSMV can be installed on either
UNIX/Linux or Windows systems running Cygwin.             Links and instructions for
downloading NuSMV are included in the appendix.

        Also needed is a formal or semi-formal specification of the system or subsystem
under test (SUT). This can be in the form of a formal logic specification, but state
transition tables, decision tables, pseudo-code, or structured natural language can also be
used, as long as the rules are unambiguous. The specification will be converted to SMV
code, which provides a precise, machine-processable set of rules that can be used to
generate tests.


9.1   Overview

To apply combinatorial testing, two tasks must be accomplished:

1. Using ACTS, construct a set of tests that will cover all t-way combinations of
parameter values. The covering array specifies test data, where each row of the array can
be regarded as a set of parameter values for an individual test (see Chapter 4).

2. Determine what output should be produced by the SUT for each set of input parameter
values. The test data output from ACTS will be incorporated into SMV specifications that
can be processed by the NuSMV model checker for this step.               In many cases, the
conversion to SMV will be straightforward. The example in Section 9.2.1 illustrates a
simple conversion of rules in the form “if condition then action” into the syntax used by the
model checker. The model checker will instantiate the specification with parameter values
from the covering array once for each test in the covering array. The resulting specification
is evaluated against a claim that negates each specified result Rj using a model checker, so
that the model checker evaluates claims in the following form: Ci => ~Rj, where Ci is a set
of parameter values in one row of the covering array in the form p1 = vi1 & p2 = vi2 & ... &


                                                                                                  47
