                                                                                               NIST SP 800-56A Rev. 3                             Recommendation for Pair-Wise Key Establishment
                                                                                                                                                          Using Discrete Logarithm Cryptography

                                                                                                        that assurance in compliance with this Recommendation, such assurance shall be
                                                                                                        obtained as specified in Section 5.6.2.2.4. Although other methods are sometimes
                                                                                                        used to provide such assurance, this Recommendation makes no statement as to their
                                                                                                        adequacy.

                                                                                               5.7      DLC Primitives
                                                                                               A primitive is a relatively simple operation that is defined to facilitate implementation in
                                                                                               hardware or in a software subroutine. Each key-establishment scheme shall use exactly one
                                                                                               DLC primitive. Each scheme in Section 6 shall use an appropriate primitive from the
                                                                                               following list:
                                                                                                   1. The FFC DH primitive (see Section 5.7.1.1): This primitive shall be used by the
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-56Ar3




                                                                                                      dhHybrid1, dhEphem, dhHybridOneFlow, dhOneFlow and dhStatic schemes, which
                                                                                                      are based on finite field cryptography and the Diffie-Hellman algorithm.
                                                                                                     2. The ECC CDH primitive (called the Modified Diffie-Hellman primitive in ANS
                                                                                                        X9.63; see Section 5.7.1.2 below): This primitive shall be used by the Full Unified
                                                                                                        Model, Ephemeral Unified Model, One-Pass Unified Model, One-Pass Diffie-
                                                                                                        Hellman and Static Unified Model schemes, which are based on elliptic curve
                                                                                                        cryptography and the Diffie-Hellman algorithm.
                                                                                                     3. The FFC MQV primitive (see Section 5.7.2.1): This primitive shall be used by the
                                                                                                        MQV2 and MQV1 schemes, which are based on finite field cryptography and the
                                                                                                        MQV algorithm.
                                                                                                     4. The ECC MQV primitive (see Section 5.7.2.3): This primitive shall be used by the
                                                                                                        Full MQV and One-Pass MQV schemes, which are based on elliptic curve
                                                                                                        cryptography and the MQV algorithm.
                                                                                               The shared secret output from these primitives shall be used as input to a key-derivation
                                                                                               method (see Section 5.8).

                                                                                               5.7.1 Diffie-Hellman Primitives

                                                                                               5.7.1.1 Finite Field Cryptography Diffie-Hellman (FFC DH) Primitive
                                                                                               A shared secret Z is computed using the domain parameters (p, q, g{, SEED, counter}), the
                                                                                               other party’s public key and one’s own private key. This primitive is used in Section 6 by
                                                                                               the dhHybrid1, dhEphem, dhHybridOneFlow, dhOneFlow and dhStatic schemes. Assume
                                                                                               that the party performing the computation is party A, and the other party is party B. Note that
                                                                                               party A could be either party U or party V.
                                                                                               Input:
                                                                                                  1. (p, q, g{, SEED, counter}): Domain parameters,
                                                                                                     2. xA : One’s own private key, and
                                                                                                     3. yB : The other party’s public key.
                                                                                               Process:
                                                                                                                                             48
