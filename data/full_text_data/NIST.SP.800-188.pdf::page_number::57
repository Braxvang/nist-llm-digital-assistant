NIST SP 800-188
September 2023



one dataset may not be appropriate for others. For these reasons, agencies that engage in
de-identifcation should ensure that their workers have adequate education and training in
the subject domain. Agencies may wish to establish education or certifcation requirements
for those who work directly with the datasets or to adopt industry standards, such as the
HITRUST De-Identifcation Framework [101]. Because de-identifcation techniques are
modality-dependent, agencies using de-identifcation may need to institute research efforts
to develop and test appropriate data release methodologies.
Although some de-identifcation standards may call for training data recipients [82], this is
typically not an option for government datasets that are made freely available on the public
internet.

3.9.     Alternative Approaches for Computing Statistics on Confdential Informa-
         tion
In addition to de-identifcation, there are other technologies and methodologies that can
secure sensitive data. Many of these approaches can complement de-identifcation and
further reduce privacy risk to data subjects. Combining techniques is an example of defense
in depth and should be considered whenever possible. The NIST Privacy Framework [113]
provides more information about additional measures for defense in depth.

3.9.1.    Encryption and Access Control
Encrypting sensitive data at rest can prevent attackers from obtaining the data directly
(e.g., by compromising the server that stores it). Encryption can also serve as a form of
access control (i.e., it can control who can access the data) because examining the data
requires access to the encryption keys. If the original data (with identities) are retained,
they should be stored encrypted, and access should be limited. Even after de-identifcation,
more sensitive data not intended for public release can be provided to select individuals by
limiting access via encryption.

3.9.2.    Secure Computation
Two technologies enable computing on encrypted data without decrypting it:
   1. Fully-homomorphic encryption (FHE) [70] allows a server to compute a function
      f (x) on an encrypted value x without decrypting it. The result is a new encrypted
      value that can only be decrypted by someone who holds the original encryption key.
   2. Secure multi-party computation (MPC) [95] allows multiple servers to jointly
      compute a function f (x1 , . . . , xk ), where each server provides one of the inputs xi ,
      and no server learns any of the othersâ€™ inputs.
Both of these approaches are general-purpose in that they can be used to compute any
function, and both are considerably slower than performing the equivalent computation


                                              43
