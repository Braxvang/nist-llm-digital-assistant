                                                                                             NIST SP 800-193                                              PLATFORM FIRMWARE RESILIENCY GUIDELINES


                                                                                                   2) Critical data updates shall be validated either by the device or a symbiontâ€™s host device
                                                                                                      prior to committing changes to critical data to ensure that the new data is well-formed.
                                                                                                      Examples of validation can include range or bounds checking, format checking, etc.
                                                                                                   3) Critical data updates shall be authorized by a Platform Administrator or part of an
                                                                                                      authorized firmware update mechanism.
                                                                                                   4) Critical data updates may employ mechanisms to authenticate the critical data before it is
                                                                                                      used.
                                                                                                   5) The device shall protect its factory defaults at least as well as it protects its code. The
                                                                                                      factory defaults shall be able to be updated in the same manner as the code.

                                                                                             4.3     Detection
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-193




                                                                                             The detection guidelines in this section describe mechanisms which can detect unauthorized
                                                                                             changes to device firmware and critical data before it is executed or consumed by the device.
                                                                                             When unauthorized changes are detected, a device could initiate a recovery process, as described
                                                                                             in Section 4.4. Detection mechanisms are particularly important for devices that lack strong
                                                                                             protections on their firmware or critical data. However, these mechanisms can also provide a
                                                                                             means to detect failures in firmware or critical data protection for devices that attempt to
                                                                                             implement the guidelines in Section 4.2.

                                                                                             All devices which provide detection of corruption of their firmware code and critical data must
                                                                                             meet the guidelines which follow.

                                                                                             4.3.1    Detection of Corrupted Code

                                                                                             Execution of unauthorized or corrupted firmware on a device could damage the device, inject
                                                                                             malware in the system, or otherwise impact the security functions and capacities of a device or
                                                                                             encompassing system. The following guidelines describe mechanisms to verify the integrity of
                                                                                             firmware during the boot process using the Root of Trust for Detection (RTD), specified in
                                                                                             Section 4.1.3. While cryptographic integrity checks, either by the device itself or a host device,
                                                                                             are preferred, some hardware device (e.g., FPGAs or CPLDs) may use other mechanisms to
                                                                                             detect corruption in their code and programmable logic.

                                                                                             For these detection mechanisms to be effective, the design of the device needs to ensure that the
                                                                                             RTD remains trustworthy in the event of a successful attack on the firmware itself.

                                                                                                   1) A successful attack which corrupts the active critical data or the firmware image, or
                                                                                                      subverts their protection mechanisms, shall not in and of itself result in a successful
                                                                                                      attack on the RTD or the information necessary to detect corruption of the firmware
                                                                                                      image.
                                                                                                   2) One or more of the following techniques shall be used by the RTD or CTD to validate
                                                                                                      firmware code:
                                                                                                      a) Integrity verification, using an approved digital signature algorithm or cryptographic
                                                                                                         hash, of device firmware code prior to execution of code outside the RTD.


                                                                                                                                                 25
