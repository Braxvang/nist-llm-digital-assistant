                                                              CLOUD COMPUTING SYNOPSIS AND RECOMMENDATIONS



 Collaboration. Applications in this area help teams of people work together, either within or between
  organizations. Examples include calendar systems, email, screen sharing, collaborative document
  authoring, conference management, and online gaming.
 Office productivity. Applications in this area implement the applications that typify office
  environments such as word processors, spreadsheet programs, presentation programs, and database
  programs. In their SaaS incarnations, these applications often offer collaboration features missing
  from traditional office productivity applications.
 Software tools. Applications in this area solve security or compatibility problems and support new
  software development. Examples include format conversion tools, security scanning and analysis,
  compliance checking, and Web development.
It is important to emphasize that the SaaS deployment model is broadly applicable and spans more
groupings of software than are enumerated above. As the ubiquity and performance of the Internet have
increased, SaaS has become nearly universally applicable. There are, however, three classes of software
that may not be good fits for public SaaS:

 Real-time software. Applications, such as flight control systems or factory robot control, that require
  precise timing of task completion, are unsuitable for SaaS because of the variable response times that
  SaaS systems may experience as well as the typically unavoidable round trip delays for messages to
  be exchanged between SaaS consumers and cloud providers.
 Bulk-consumer-data. For some applications, such as monitoring of medical devices or other
  physical phenomenon, data originates physically at the consumer and the volume of data can be
  extremely large. In such cases, it may not be feasible to transfer the data in real time over wide area
  networks to a SaaS provider.
 Critical software. Software is labeled critical if its failure can cause loss of life or loss of significant
  property. Critical software may fail either by doing the wrong thing or by doing the right thing too
  slowly (or too quickly). Achieving acceptable reliability for critical software is an area of ongoing
  research, but one of the key engineering approaches is to reduce the complexity of the critical
  software. By its nature, however, SaaS applications depend on the proper operation of a large and
  complex software stack that includes a network. In the case of a public SaaS, the network is not a
  controlled medium, and hence no guarantees can be given that the network will continue to provide
  acceptable levels of service.
It is possible that these issues can be ameliorated, however, with on-site SaaS, or with outsourced or
community SaaS where explicit network provisioning has been performed to ensure network quality to
the needed level of assurance.

Additionally, some applications require high refresh rates to the consumer's display. Although SaaS can
support high refresh rates, the supportable refresh rate falls as the distance between the SaaS provider and
the consumer increases. Historically, higher latencies experienced on long haul networks also imply that
high refresh rates may not be achievable on a continuous basis.

5.6   Recommendations for Software as a Service

For Federal information systems and those operated on behalf of the US Government, the Federal
Information Security Management Act of 2002 and the associated NIST standards and special
publications (e.g. FIPS 199, FIPS 200, SP 800-53, etc.) do apply to SaaS systems. General
recommendations for cloud computing services are given in section 9. See also Appendix A on the



                                                      5-8
