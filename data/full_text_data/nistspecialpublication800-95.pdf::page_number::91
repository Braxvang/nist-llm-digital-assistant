                                                                                GUIDE TO SECURE WEB SERVICES



 Prove validity of XML content and originator. Not all XML parsers validate the URIs of entity
  references before accessing them
 Prevent exploitation of XML entities to steal information. Because some parsers reference entities
  without first validating their URIs, it may be possible to inject references to other locations on the
  target server from which secret information could then be extracted
 Prevent exploitation of XML entities to launch DoS attacks. Because some parsers reference
  entities without first validating their URIs, it may be possible to create DoS attacks by flooding the
  XML parser with illegitimate entity references
 Enforce validation. An attacker may be able to subvert the validate command called by the XML
  application when it has loaded the schema cache with namespaces. Attackers do this by using a root
  element from a different namespace to redirect xsi:schemaLocation to point to their own schema, in
  which they include the declaration <xs:any namespace=##any,, processContents=“skip”/>.
6.4   Security Testing: Tools and Techniques

Security testing in the Web services realm should be included in the overall test plan, and should be
performed iteratively throughout the Web service’s lifecycle, not just after implementation or
deployment. The characteristics of Web services make security testing more difficult than for more
traditional applications. The Web services model provides a completely implementation-independent
mechanism through which applications can interact. The tester can make no accurate assumptions about
how that application software is built. Thus, the reliance on black box testing is much heavier than it is
for other application testing. Testers must also rely heavily for their understanding of the software on its
interface and system specifications.

The highly distributed nature of Web services technology creates a dependence on complex interactions,
which must be testable. The tester will need to adopt new techniques and processes for many aspects of
Web services security testing. Security function testing in particular will require greater use of distributed
test agents and associated technology, comparable to how load testing is done.

How much security-focused testing is enough? Ideally, the tester would trace all paths through the code
and all internal interfaces among components within the service and all external interfaces between the
service and other services, and would try out every possible input to ensure it didn’t cause an unexpected
security violation. Depending on the complexity of the service, testing every possible path, interface, and
input may not be feasible. A more practical goal is to cover every path through each unit, and every inter-
unit and external interface at least once.

Each of the categories of Web services security tests is discussed below.

 Web Service Security Protocol Conformance Testing. This type of testing is generally performed
  by an independent testing organization on specific implementations of Web services security
  protocols by specific vendors in their Web service products, as well as some open source
  implementations. The objective of this testing is to ensure that individual protocol implementations
  conform to the relevant published standards from OASIS or W3C.
 Correctness Testing of Web Service Security Functionality. This type of testing is focused on
  ensuring that the security functionality performed by a Web service meets its stated requirements.
 Security Focused Unit Testing. This type of testing focuses on the smallest unit of the Web service
  application, such as individual classes or functions, apart from the rest of the application. Through



                                                     6-5
