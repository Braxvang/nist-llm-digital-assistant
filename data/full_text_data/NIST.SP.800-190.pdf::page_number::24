                                                                                             NIST SP 800-190                                               APPLICATION CONTAINER SECURITY GUIDE


                                                                                                •   ‘Scale out’ scenarios, where an app may need to have many new instances deployed or
                                                                                                    decommissioned quickly depending on the load at a given point in time. The
                                                                                                    immutability of containers makes it easier to reliably scale out instances, knowing that
                                                                                                    each instance is exactly like all the others. Further, because containers are typically
                                                                                                    stateless, it is easier to decommission them when they are no longer needed.
                                                                                                •   Cloud-native apps, where developers can build for a microservices architecture from the
                                                                                                    beginning, ensuring more efficient iteration of the app and simplified deployment.

                                                                                             Containers provide additional benefits; for example, they can increase the effectiveness of build
                                                                                             pipelines due to the immutable nature of container images. Containers shift the time and location
                                                                                             of production code installation. In non-container systems, app installation happens in production
                                                                                             (i.e., at server runtime), typically by running hand-crafted scripts that manage installation of app
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-190




                                                                                             code (e.g., programming language runtime, dependent third-party libraries, init scripts, and OS
                                                                                             tools) on servers. This means that any tests running in a pre-production build pipeline (and on
                                                                                             developers’ workstations) are not testing the actual production artifact, but a best-guess
                                                                                             approximation contained in the build system. This approximation of production tends to drift
                                                                                             from production over time, especially if the teams managing production and the build system are
                                                                                             different. This scenario is the embodiment of the “it works on my machine” problem.

                                                                                             With container technologies, the build system installs the app within the image it creates (i.e., at
                                                                                             compile-time). The image is an immutable snapshot of all userspace requirements of the app
                                                                                             (i.e., programming language runtime, dependent third-party libraries, init scripts, and OS tools).
                                                                                             In production the container image constructed by the build system is simply downloaded and
                                                                                             run. This solves the “works on my machine” problem since the developer, build system, and
                                                                                             production all run the same immutable artifact.

                                                                                             Modern container technologies often also emphasize reuse, such that a container image created
                                                                                             by one developer can be easily shared and reused by other developers, either within the same
                                                                                             organization or among other organizations. Registry services provide centralized image sharing
                                                                                             and discovery services to make it easy for developers to find and reuse software created by
                                                                                             others. This ease of use is also leading many popular software vendors and projects to use
                                                                                             containers as a way to make it easy for customers to find and quickly run their software. For
                                                                                             example, rather than directly installing an app like MongoDB on the host OS, a user can simply
                                                                                             run a container image of MongoDB. Further, since the container runtime isolates containers from
                                                                                             one another and the host OS, these apps can be run more safely and reliably, and users do not
                                                                                             have to worry about them disturbing the underlying host OS.




                                                                                                                                              12
