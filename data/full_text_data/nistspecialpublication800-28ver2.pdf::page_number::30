                                                               GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



access and maintaining mutually exclusive execution domains. In Java code, such as an applet, the
sandbox is an instance of the Java security manager configured to prevent the applet from performing
unauthorized operations. The Java security manager can limit a variety of activities, such as inspecting or
changing files on a client file system, using network connections, or even restricting what class libraries
the code may access. The Java security manager is flexible and can be configured for any application,
providing additional security protections beyond those provided by the OS.

Security is enforced through a variety of mechanisms. Static type checking in the form of byte code
verification is used to check aspects of the safety of downloaded code. Some dynamic checking is also
performed during runtime. A distinct name space is maintained for distinct packages or modules, and
linking of references between packages is restricted to public methods. A security manager mediates all
accesses to system resources, serving in effect as a reference monitor. Permissions can be assigned based
on the source of the code (where it came from), the author of the code (who developed it), or a specific
package name, which restricts the access of the code to computational resources. In addition, Java
inherently supports code mobility, dynamic code downloading, digitally signed code, remote method
invocation, object serialization, and platform heterogeneity.

Web browsers can download Java byte code from Web sites and run it with restricted privileges as Java
applets. Many services offered by various popular Web sites require the user to have a Java-enabled
browser. When the Web browser sees references to Java code, it loads the code and then processes it
using the built-in JVM with strict permissions enforced by the Java security manager.

Hostile applets still pose security threats even while executing within the sandbox. A hostile applet can
consume or exploit system resources inappropriately or cause a user to perform an undesired or unwanted
action. Examples of hostile applet exploits are denial of service, mail forging, invasion of privacy (e.g.,
exporting of identity, email address, and platform information), and installing backdoors to the system.
The Java security model is rather complex and can be difficult to understand and manage, which can
increase risk. Moreover, implementation bugs have also been found that allow security mechanisms to be
bypassed [Sun07]. Finally, signed Java applets are often run without restrictions; attackers able to coerce
users into loading a hostile signed applet will be able to bypass many of Java’s security mechanisms.

4.1.4   JavaScript, VBScript, and AJAX

JavaScript is a general-purpose scripting language available in most Web browsers. It can be embedded
within standard Web pages to create interactive documents. Each JavaScript interpreter supplies the
needed objects to control the execution environment, and because of differences the functionality can
vary considerably. Within the context of a Web browser, the language is powerful, allowing prepared
scripts to modify the Web page and perform calculations on the client side, improving perceived
performance and potentially reducing the load on the server. Within a browser context, JavaScript does
not have methods for directly accessing a client file system or for directly opening connections to other
computers besides the host that provided the content source. Moreover, the browser normally confines a
script’s execution to the page in which it was downloaded.

The name JavaScript is a misnomer since the language has little relationship to Java technology and arose
independently from it. Netscape developed JavaScript for its Navigator browser, and eventually JScript, a
variation of JavaScript, appeared in Microsoft’s Internet Explorer. Standardizing the core language and
facilities of JavaScript and JScript resulted in the ECMAScript Language Specification [ECMA99],
which most modern Web browsers support. Design and implementation bugs have been discovered in the
commercial scripting products provided with many browsers, including those from Microsoft, Apple,
Mozilla, and Opera.




                                                    4-4
