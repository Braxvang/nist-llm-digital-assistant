                                                                                              NIST SP 800-204C                                            DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                 APPLICATION WITH SERVICE MESH

                                                                                              1     Introduction

                                                                                              Cloud-native applications are made up of multiple loosely coupled components (called
                                                                                              microservices typically implemented as containers), operate in perimeter-less network
                                                                                              environments requiring zero trust concepts (on-premises or cloud), and are accessed by users
                                                                                              from a diverse set of locations (e.g., campus, home office, etc.). Cloud-native applications do not
                                                                                              just refer to applications that run in the cloud. They also refer to the class of applications with
                                                                                              design and runtime architectures, such as microservices, and a dedicated infrastructure for
                                                                                              providing all application services, including security. The incorporation of zero trust principles
                                                                                              [1] into this class of application provides techniques wherein access to all protected resources is
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                              enforced through identity-based protection and network-based protections (e.g., micro-
                                                                                              segmentation), where applicable.

                                                                                              Cloud-native applications require agile and secure updates and deployment techniques for
                                                                                              business reasons as well as the necessary resilience to respond to cybersecurity events. Hence,
                                                                                              they call for a different application development, deployment, and runtime monitoring paradigm
                                                                                              (collectively called the software life cycle paradigm) than the ones used for traditional monolithic
                                                                                              or multi-tier applications. DevSecOps (Development, Security, and Operations) is a facilitating
                                                                                              paradigm for this class of applications since it facilitates agile and secure development, delivery,
                                                                                              deployment, and operations through (a) primitives, such as continuous integration, continuous
                                                                                              delivery/continuous deployment (CI/CD) pipelines (explained in section 3); (b) security testing
                                                                                              throughout the life cycle; and (c) continuous monitoring during runtime, all of which are
                                                                                              supported by automation tools. In fact, the paradigm that meets the above objectives was
                                                                                              originally given the term DevOps to indicate the fact that it seeks to remove the silos between
                                                                                              development and operations groups and promotes (or drives) increased collaboration. The term
                                                                                              DevSecOps was later coined by a portion of the community to emphasize the role of the security
                                                                                              team in the whole process. Thus, DevSecOps is the term that denotes a culture and set of
                                                                                              practices with automation tools to drive increased collaboration, trust, shared responsibility,
                                                                                              transparency, autonomy, agility, and automation across the key stakeholders responsible for
                                                                                              delivering software, including development, operations, and security organizations. DevSecOps
                                                                                              has the necessary primitives and other building blocks to meet the design goals of cloud-native
                                                                                              applications.

                                                                                              It should be noted that there is no community-wide consensus on the term “DevSecOps.” As
                                                                                              already stated, the term was primarily coined to emphasize the fact that security must be tested
                                                                                              and incorporated in all stages of the software development life cycle (i.e., build, test, package,
                                                                                              deploy, and operate). A portion of the community continues to use the term “DevOps” based on
                                                                                              the argument that there is no need to define a new term since security must be an integral part of
                                                                                              any software life cycle process.

                                                                                              1.1 Scope

                                                                                              In theory, DevSecOps primitives can be applied to many application architectures but are best
                                                                                              suited to microservices-based ones, which permit agile development paradigms due to the fact
                                                                                              that the application is made up of relatively small, loosely coupled modules called microservices.
                                                                                              Even within microservices-based architectures, the implementation of DevSecOps primitives can
                                                                                                                                               1
