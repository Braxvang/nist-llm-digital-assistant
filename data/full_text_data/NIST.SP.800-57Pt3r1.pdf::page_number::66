      Maintaining context in the face of global data placement (many owners and large
       quantities of data).
      Very large numbers of keys to manage and distribute.
      If numerous keys are stored in a single location within an EFS, that site provides
       an attractive target for an adversary  a single point of trust for a large domain.
      Difficulty in accounting for revoked users (individuals who have left an
       organization, whose subscriptions have expired, or otherwise should not be
       authorized to access the file any longer).
      Reassignment of ownership of protected data to another individual or
       organization.
      Recovery of data in the event of lost keys (e.g., the case of archived encrypted
       data that is encrypted and stored by an individual who has left the organization
       and cannot be found).
      A sharing user who has been provided the keys to a number of the owner’s files,
       then provides the keys, and the owner’s data, to additional users.

9.1.2 Access to Symmetric Keys used in File Encryption
After the decision has been made about the number of files to be protected with a single
symmetric key, key management questions can be considered. How does the File
Encryption System generate the encryption keys? How will the keys be stored and
protected? This section identifies common ways of answering these questions, as well as
discussing their strengths and weaknesses. As technology advances, additional techniques
will be developed, and as such, the list below is not complete nor should be considered
mandatory.

Consider common answers to the important questions above. First, how do file
encryption systems generate symmetric keys? A simple method is to derive the key from
a password as described in [SP 800-132]. In this case, the security of the system depends
on the randomness of the password; normally, passwords do not contain enough
randomness to be used for generating keys (i.e., they can be guessed relatively easily). A
standard dictionary attack can often recover weak passwords, so a strong password is
vital for the security of this type of system. It is preferable to utilize a good random bit
generator within the system to generate keys. Approved random bit generators can be
found in [SP 800-90A], [SP 800-90B] and [SP 800-90C].

Next, consider the question of how to protect the keys. There is a great deal of effort
underway by the Trusted Computing Group (TCG) to develop secure storage of keys on
computers. As this effort continues to mature, the Trusted Platform Module chip, through
its key cache management, offers another format for protecting keys used in EFS.

Then, consider where these keys will be stored. If keys need to be stored, they could
simply be stored on the computer itself or on a hardware token. Alternatively, the key
could be split into two (or more) key components with, for example, one component
stored on a hardware token and the other key component stored on the computer itself. If
a split key is employed, the method used to combine the key components is important;
performing an XOR operation on equal length key components is better than simply

                                             58
