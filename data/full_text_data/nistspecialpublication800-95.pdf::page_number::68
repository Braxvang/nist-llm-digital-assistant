                                                                               GUIDE TO SECURE WEB SERVICES



 Structured Query Language (SQL) injection. Providing specially crafted parameters that will be
  combined within the Web service to generate a SQL query defined by the attacker
 Buffer overflows. Providing specially crafted parameters that will overload the input buffers of the
  application and will crash the Web service—or potentially allow arbitrary code to be executed.
Additionally, Web services behind an XML gateway may not need to implement the security
functionality provided by the firewall, allowing developers to focus only on what the firewall does not
support. Because SSL/TLS can be used between the firewall and the Web service, all communication
between the Web service and the XML gateway can be trusted. If Web services behind the firewall do
not implement security mechanisms to support confidentiality, integrity, and authentication, attackers that
bypass the XML gateway may be able to subvert internal Web services. As such, it is always beneficial
to implement defense-in-depth using XML gateways at the perimeter along with WS-Security or HTTPS
for all internal Web services.

Finally, XML gateways support in-depth logging facilities for audit purposes. In conjunction with
individual audit logs at each Web service, this allows administrators to keep track of what anomalies the
XML gateway is experiencing to potentially fine-tune the XML gateway or notice when an attack has
been successful and compromised an internal Web service. Nevertheless, the effectiveness of an XML
gateway is dependent on the richness of the feature set and the granularity of policy control. Like any
Web service, XML gateways are susceptible to threats from external attackers, so it is important to apply
updates and define a policy for handling any intrusions related to the XML gateway.

3.7   Accountability End-to-End throughout a Service Chain

Because of the SOA property allowing Web services to dynamically bind to one another, it is difficult to
implement accountability in a service chain. Auditing is essential in many transactions to be able to
ensure, after the fact, that the transaction took place as expected. For example, financial transactions
often require extensive auditing. The lack of auditing standards for Web services serves as the primary
hindrance to effectively implementing accountability across a SOA.

In a SOA, auditing is accomplished by using a secure, distributed logging facility and WS-Security digital
signatures. Through the use of a secure logging facility, all important WS-Security signed elements can
be stored for audit purposes to determine which Web service performed what action. One common
mechanism for implementing the logging facility is to develop Web service intermediaries that
transparently log information about captured SOAP messages. Web services developed from scratch can
be implemented to support an organization’s distributed logging facility, but many COTS and
government off-the-shelf (GOTS) Web services use their own non-standard logging mechanism.
Standards efforts are on the horizon to enable interoperability between logging mechanisms, but until they
are in place, organizations must support the wide variety of logging mechanisms in use.

Regardless of what logging mechanisms are in use within an organization, there is no way in a SOA to
require all participants in a service chain to use WS-Security or logging. For example, one member of the
service chain may not perform logging but may advertise that it does; while another member of the
service chain does not support WS-Security but the service that accesses it performs signatures itself. It is
important that the Web services a requester communicates with be trusted—and that trust should imply
that each subsequent service in the chain will be held to the same standard of trust. When going through
audit logs it will be apparent which member of a service chain did not follow the requirements of the
SOA, as the required logs or signed elements will not be available for examination.

Enforcing accountability in a SOA (or other) environment requires the use of diligent auditing
mechanisms, such that forensic data can be captured, compiled, and accurately attributed to users. The


                                                    3-33
