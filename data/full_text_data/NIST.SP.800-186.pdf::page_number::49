NIST SP 800-186                                                Discrete Logarithm-based Cryptography:
February 2023                                                        Elliptic Curve Domain Parameters

           b. The curve has cofactor h = 4, or the quadratic twist of this curve has cofactor h =
              2 (the latter implies that the Koblitz curve defined over the binary field GF(2m)
              with a = 1 has cofactor h = 2); and
           c. The determined curve satisfies the cryptographic criteria in Appendix C.1.
   3. Select a pair (a, m) from the set determined above.
   4. Select an irreducible polynomial f(z) of degree m, where f(z) is selected of a special form
      so as to allow efficient modular reduction (f(z) is a trinomial or pentanomial).
   5. Select a base point G = (Gx, Gy) of order n.

C.2.4.2.          Pseudorandom Curves B-233, B-283, B-409, and B-571
Each of the curves B-233 (Section 3.3.2.2), B-283 (Section 3.3.2.3), B-409 (Section 3.3.2.4), and
B-571 (Section 3.3.2.5) is a curve Ba,b in short-Weierstrass form with cofactor h = 2. Each curve
is defined over a binary field GF(2m), where m is a prime number, and the prime number is
among those values for which a binary Koblitz curve exists. The NIST prime curves were
generated using the procedure in Appendix C.3.3,with hdigest = 160 and SHA-1 hash function.
The curve parameters a and b are:
   1. The parameter a was set to a = 1 (this ensures that curves with cofactor h = 2 may exist).
   2. The parameter b was derived in a hard-to-invert way using the procedure in Appendix
      C.3.3 from a pseudorandom Seed value so that the following conditions were satisfied
      simultaneously:
           a. b â‰  0 in GF(p);
           b. The curve has cofactor h = 2; and
           c. The curve satisfies the cryptographic criteria in Appendix C.1.
   3. Select a base point G = (Gx, Gy) of order n.

C.3.   Generation and Verification of Pseudorandom Curves

C.3.1. Generation of Pseudorandom Curves (Prime Case)
When generating the NIST pseudorandom curves (i.e, those in Section 3.2.1), hdigest = 160 and
SHA-1 hash were used.
Inputs:
   1. Positive integer l
   2. Bit-string s of length hdigest
   3. Approved hash function HASH with output length of hdigest bits and security design
       strength of at least requested_security_strength.

Output: Coefficient b used to generate a pseudorandom prime curve




                                                38
