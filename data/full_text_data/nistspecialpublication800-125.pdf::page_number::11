                                                        GUIDE TO SECURITY FOR FULL VIRTUALIZATION TECHNOLOGIES



support for applications that only run on a particular OS. It allows changes to be made to an OS and
subsequently revert to the original if needed, such as to eliminate changes that negatively affect security.
Desktop virtualization also supports better control of OSs to ensure that they meet the organization’s
security requirements. This control can be asserted by creating a high-assurance platform that constantly
updates the guest OS to have the exact versions of the programs that it is authorized to have, and no other
programs.

A more recent use of desktop virtualization is to enable the use of applications that only run on an older
version of an OS when the user’s desktop is running a newer version. In such a situation, desktop
virtualization is useful for continuity of applications as the OSs advance faster than the applications that
run on them. As more applications become web-based, desktop virtualization can become even more
important: a web application that only runs on an older version of a particular browser can be run in a
virtualized system that has the older version of that browser, while the user’s main environment is
running the newer (usually more secure) version of the browser. For use cases such as this, many
organizations use application virtualization instead of desktop virtualization.

Full virtualization has some negative security implications. Virtualization adds layers of technology,
which can increase the security management burden by necessitating additional security controls. Also,
combining many systems onto a single physical computer can cause a larger impact if a security
compromise occurs. Further, some virtualization systems make it easy to share information between the
systems; this convenience can turn out to be an attack vector if it is not carefully controlled. In some
cases, virtualized environments are quite dynamic, which makes creating and maintaining the necessary
security boundaries more complex.

2.2   Types of Full Virtualization

There are two forms of full virtualization. Figure 2-1 compares their high-level architectures. In bare
metal virtualization, also known as native virtualization, the hypervisor runs directly on the underlying
hardware, without a host OS; the hypervisor can even be built into the computer’s firmware. In the other
form of full virtualization, known as hosted virtualization, the hypervisor runs on top of the host OS; the
host OS can be almost any common operating system such as Windows, Linux, or MacOS. Hosted
virtualization architectures usually also have an additional layer of software (the virtualization
application) running in the guest OS that provides utilities to control the virtualization while in the guest
OS, such as the ability to share files with the host OS. Hosted virtualization architectures also allow users
to run applications such as web browsers and email clients alongside the hosted virtualization application,
unlike bare metal architectures, which can only run applications within virtualized systems.




                                                     2-2
