      NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
      September 2022

550   once the secret information within the DRBG’s internal state is compromised, all future DRBG
551   outputs are known to the adversary unless the DRBG is reseeded − a process that returns the DRBG
552   to a non-compromised state.
553   A DRBG is reseeded when at least s bits of fresh entropy are used to update the internal state
554   (where s is the security strength of the DRBG) so that the updated internal state is unknown and
555   extremely unlikely to be correctly guessed. A DRBG that has been reseeded has prediction
556   resistance against an adversary who knows its previous internal state. Reseeding may be
557   performed upon request from a consuming application (either an explicit request for reseeding or
558   a request for the generation of bits with prediction resistance); on a fixed schedule based on time,
559   number of outputs, or events; or as sufficient entropy becomes available.
560   Although reseeding provides fresh entropy bits that are incorporated into an already instantiated
561   DRBG at a security strength of s bits, this Recommendation does not consider the reseed process
562   as increasing the DRBG’s security strength. For example, a reseed of a DRBG that has been
563   instantiated to support a security strength of 128 bits does not increase the DRBG’s security
564   strength to 256 bits when reseeding with 128 bits of fresh entropy.
565   An RBG1 construction has no access to a randomness source after instantiation and so cannot be
566   reseeded or recover from a compromise (see Section 4). Thus, it can never provide prediction
567   resistance.
568   An RBG2 construction contains an entropy source that is used to reseed the DRBG within the
569   construction (see Section 5) and recover from a possible compromise of the RBG’s internal state.
570   Prediction resistance may be requested by a consuming application during a request for the
571   generation of (pseudo) random bits. If sufficient entropy can be obtained from the entropy
572   source(s) at that time, the DRBG is reseeded before the requested bits are generated. If sufficient
573   entropy is not available, an error indication is returned, and no bits are generated for output.
574   Therefore, it is recommended that prediction resistance not be claimed for an RBG implementation
575   unless sufficient entropy is reliably available upon request.
576   An RBG3 construction is provided with fresh entropy for every RBG output (see Section 6). As a
577   result, every output from an RBG3 construction has prediction resistance.
578   For a more complete discussion of backtracking and prediction resistance, see [SP800-90A].

579           RBG Security Boundaries
580   An RBG exists within a conceptual RBG security boundary that should be defined with respect to
581   one or more threat models that include an assessment of the applicability of an attack and the
582   potential harm caused by the attack. The RBG security boundary must be designed to assist in the
583   mitigation of these threats using physical or logical mechanisms or both.
584   The primary components of an RBG are a randomness source (i.e., an entropy source or an RBG
585   construction), a DRBG, and health tests for the RBG. RBG input (e.g., entropy bits and a
586   personalization string) shall enter an RBG only as specified in the functions described in Section
587   2.8. The security boundary of a DRBG is discussed in [SP800-90A]. The security boundary for an
588   entropy source is discussed in [SP800-90B]. Both the entropy source and the DRBG contain their
589   own health tests within their respective security boundaries.

                                                       8
