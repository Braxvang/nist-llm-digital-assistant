                                                                                              NIST SP 800-204B                                                   ABAC FOR MICROSERVICES-BASED
                                                                                                                                                               APPLICATIONS USING A SERVICE MESH

                                                                                                 and canary rollouts. It may also include configuration parameters related to resiliency in the
                                                                                                 service mesh, such as timeout, retry, and circuit-breaking capabilities.
                                                                                              b. A module that provides all of the infrastructure functionality for authentication,
                                                                                                 authorization, and establishing a secure, encrypted session while two microservices
                                                                                                 communicate. These functions include user authentication, credential management, digital
                                                                                                 certificate management, and traffic encryption.

                                                                                              2.2.1   Service Mesh Functions for Reference Orchestration and Resource Management
                                                                                                      Platform

                                                                                              In order to describe the generic service mesh functions in the context of the reference platform –
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204B




                                                                                              which, in this case, is Kubernetes – the deployment details of both the microservices application
                                                                                              and service mesh components in that platform must be considered. Since authentication and
                                                                                              authorization functions are the focus of this document, discussions for those functions on the
                                                                                              Kubernetes platform will be confined to the functions in the service mesh.

                                                                                              Since the sidecar proxy code “implemented as a container” is hosted in the same pod as the
                                                                                              microservice container, they share the same network namespace and are presented in the same
                                                                                              node (e.g., VM or a physical machine). Both containers have the same Internet Protocol (IP)
                                                                                              address and share the same IP Table rules. That allows the proxy to take complete control over
                                                                                              the pod’s network and handle all traffic that passes through it [10].

                                                                                              Taking the example of establishing a mutual TLS session, the proxy will interact with the
                                                                                              module in the control plane of the service mesh to check whether it needs to encrypt traffic
                                                                                              through the chain and establish mutual TLS with the backend pod. Enabling this functionality
                                                                                              using mutual TLS requires every pod to have a certificate (i.e., a valid credential), and, since a
                                                                                              good-sized microservice application may be hosted in hundreds of pods, this may involve
                                                                                              managing hundreds of short-lived certificates. This, in turn, requires the service mesh to have a
                                                                                              robust identity, access manager, certificate store, and certificate validation. In addition,
                                                                                              mechanisms for identifying and authenticating the two communicating pods are required for
                                                                                              supporting authentication policies.

                                                                                              A service mesh not only provides various application services during runtime but also supports
                                                                                              the DevSecOps development and maintenance paradigm. The development team can concentrate
                                                                                              their efforts on efficient development paradigms, such as application architecture (code
                                                                                              modularity and structuring) and secure deployment (including interaction with sidecars and data
                                                                                              flows through PEPs), without worrying about the implementation (development and deployment)
                                                                                              of all infrastructure services, including many aspects of security. The service mesh is reference
                                                                                              platform-aware and thus automatically injects sidecar containers into the pods. Once the service
                                                                                              mesh inserts the sidecar containers, the combined team of developers, operations, and security
                                                                                              teams can define policies, deploy them, and monitor their enforcements during runtime. These
                                                                                              teams can also configure monitoring of the microservices applications without interfering with
                                                                                              the functioning of the applications.



                                                                                                                                               8
