                                                                                               GUIDE TO SECURE WEB SERVICES



3.5     Distributed Authorization and Access Management

Given the distributed nature of Web services architectures, managing authorization and access control
credentials for users in a SOA environment can be challenging. Section 3.5 describes a number of
traditional and emerging models and practices that may be extended to capture, manage, and enforce
access control decisions for authorized users.

3.5.1     Authorization Models

The following subsections describe the authorization models most relevant to access management in a
SOA, namely role-based, attribute-based, policy-based, and risk-adaptive access control. While role-
based access control models may be familiar to most software designers and developers, knowledge of the
other models can provide a perspective on the direction in which Web services access management is
heading.

3.5.1.1 Role-Based Access Control

Role-based access control (RBAC) is an authorization mechanism that associates a set of access
privileges with a particular role, often corresponding to a job function. With RBAC, all user access is
mediated through roles. RBAC simplifies security management by providing a role hierarchy structure.
In addition, RBAC has extensive provisions for constraints on user access based on administrator-defined
relationships. This feature makes it possible to implement complex controls such as separation of duty.
Constraints can include either static or dynamic attributes. Most commercially available RBAC systems
conform to some of the RBAC standards, which are summarized on the NIST RBAC Web site. 36
Additionally, OASIS provides the Core and hierarchical role based access control profile of XACML,
allowing organizations to support RBAC using the flexible and platform-independent XACML
specification. 37

In most cases, COTS Web servers or Web service platforms will support designation and assignment of
privileges to roles as part of their standard definition of user accounts and access control privileges. In
worst cases, the administrator will have to create the necessary user groups, enroll the appropriate users,
and assign them role-appropriate privileges.

RBAC on a Web service platform should be implemented at a minimum for the administrator, developers,
and any other privileged accounts that will be required for the Web service to operate. The Web service
platform must be configured to enforce separation of roles (i.e., not allowing a user assigned to one role to
perform functions exclusively assigned to another role). The privileges associated with each role should
be assigned in a way that implements least privilegeâ€”each role should be assigned only the minimum
privileges needed to perform the functions required by the role.

Most vendors implement some form of RBAC in their core Web services products. Another alternative is
to implement or deploy RBAC at the Web services level, which is supported by a number of XML
gateways and Web service vendors. However, the RBAC policies supported are less granular because a
COTS product may need to be generic so it can support many different types of organizational policies.




36
      The NIST RBAC Web site is available at http://csrc.nist.gov/rbac/.
37
      The Core and hierarchical role based access control profile of XACML is available at http://docs.oasis-
      open.org/xacml/2.0/access_control-xacml-2.0-core-spec-os.pdf.


                                                              3-14
