                                                                GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



On the server side, any unnecessary software not needed in providing Web services should be removed as
well, particularly any development tools that could be used to further an attack if an intruder should gain
an initial foothold. Ideally, server-side scripts should constrain users to a small set of well-defined
functionality and validate the size and values of input parameters so that an attacker cannot overrun
memory boundaries or piggy back arbitrary commands for execution. Scripts should be run only with
minimal privileges (i.e., non-administrator) to avoid compromising the entire Web site in case the scripts
have security flaws (see next subsection). Potential security holes can be exploited even when Web
applications run with low privilege settings. For example, a subverted script could have enough
privileges to mail out the system password file, examine the network information maps, or launch a login
to an unknown service.

Whenever possible, content providers and site operators should provide material encoded in less harmful
document formats. For example, if document distillers are not available to convert textual documents into
PDF, an alternative is to make available a version in .rtf (rich text format), rather than a proprietary word
processing format.

5.1.9   Least Privilege

The principle of least privilege states that programs should operate with only the privileges needed to
perform authorized functions. During application development, it is easier to run code with all privileges,
with the intention of paring back privileges in the production deployment. Unfortunately, privilege
reduction is easy to overlook and often is. For example, Unix developers may enhance the server using
Set-User-ID (SUID) programs, which refer to code that run with privileges of the owner (e.g., root)
regardless of who is executing them. SUID programs, particularly those owned by root, can be dangerous
because if subverted, they allow an intruder to gain control with the ownerâ€™s privilege. Running the code
instead with the minimum privileges needed restricts the range of access to the intruder, if an attack is
successful. Similarly, on the browser side, any mobile code received should be constrained to the
minimal privileges needed. For example, the Java security manager, part of the Java Runtime
Environment of the browser, offers the user the ability to set fine-grained permission controls for
incoming Java applets.

When applied to users, the principle implies that they should be assigned the minimum privileges
necessary to perform their assigned tasks. For example, with Windows desktop systems, most users
should be assigned to a rights-limited user group instead of one with full administrator rights. Such a
constraint makes it more difficult for malware to install successfully and take effect, and also helps ensure
only authorized applications are installed. To accommodate those users who at times require
administrator rights, two separate accounts could be set up: an account with limited rights for performing
daily tasks and an account with elevated rights for those exceptional times when administrator rights are
needed to make configuration changes, install applications, and run applications that require higher
privileges.

5.1.10 Layered and Diverse Defenses

Defending an information system requires safeguards to be applied throughout the system, as well as at
points of entry. This principle is commonly called defense in depth. The selection and placement of
security controls should be done in a way that progressively weakens or defeats all attacks. Having a
series of similar controls in succession tends to only lengthen the duration of the attack. Applying
different types of controls that complement each other and are mutually supportive is a much more
effective approach. While the capabilities of available safeguards may overlap to some extent, the
combined effect should exceed the effects of each control used individually. For instance, if control A
misses 30% of attacks and control B also misses 30%, in combination they should only miss about 9% (.3


                                                    5-6
