                                                                                             NIST SP 800-185                                                SHA-3 DERIVED FUNCTIONS: CSHAKE,
                                                                                                                                                           KMAC, TUPLEHASH, AND PARALLELHASH

                                                                                             Appendix A—KMAC, TupleHash, and ParallelHash in Terms of KECCAK[c]

                                                                                             FIPS 202 specifies the KECCAK[c] function, on which the SHA-3 and SHAKE functions are
                                                                                             built. KMAC, TupleHash, and ParallelHash are defined in terms of cSHAKE, as specified in
                                                                                             Sec. 3. In this appendix, KMAC, TupleHash, ParallelHash and these functions in XOF mode are
                                                                                             defined directly in terms of KECCAK[c]. These definitions are exactly equivalent to the
                                                                                             definitions made in terms of cSHAKE in Secs. 4, 5, and 6.

                                                                                             KMAC128(K, X, L, S):
                                                                                             Validity Conditions: len(K) < 22040 and 0 ≤ L < 22040 and len(S) < 22040

                                                                                             1. newX = bytepad(encode_string(K), 168) || X || right_encode(L).
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-185




                                                                                             2. T = bytepad(encode_string(“KMAC”) || encode_string(S), 168).
                                                                                             3. return KECCAK[256](T || newX || 00, L).

                                                                                             KMAC256(K, X, L, S):
                                                                                             Validity Conditions: len(K) < 22040 and 0 ≤ L < 22040 and len(S) < 22040

                                                                                             1. newX = bytepad(encode_string(K), 136) || X || right_encode(L).
                                                                                             2. T = bytepad(encode_string(“KMAC”) || encode_string(S), 136).
                                                                                             3. return KECCAK[512](T || newX || 00, L).

                                                                                             KMACXOF128(K, X, L, S):
                                                                                             Validity Conditions: len(K) < 22040 and 0 ≤ L and len(S) < 22040

                                                                                             1. newX = bytepad(encode_string(K), 168) || X || right_encode(0).
                                                                                             2. T = bytepad(encode_string(“KMAC”) || encode_string(S), 168).
                                                                                             3. return KECCAK[256](T || newX || 00, L).

                                                                                             KMACXOF256(K, X, L, S):
                                                                                             Validity Conditions: len(K) <22040 and 0 ≤ L and len(S) < 22040

                                                                                             1. newX = bytepad(encode_string(K), 136) || X || right_encode(0).
                                                                                             2. T = bytepad(encode_string(“KMAC”) || encode_string(S), 136).
                                                                                             3. return KECCAK[512](T || newX || 00, L).

                                                                                             TupleHash128(X, L, S):
                                                                                             Validity Conditions: 0 ≤ L < 22040 and len(S) < 22040

                                                                                             1. z = "".
                                                                                             2. n = the number of input strings in the tuple X.
                                                                                             3. for i = 1 to n:
                                                                                                    z = z || encode_string(X[i]).
                                                                                             4. newX = z || right_encode(L).
                                                                                             5. T = bytepad(encode_string(“TupleHash”) || encode_string(S), 168).
                                                                                             6. return KECCAK[256](T || newX || 00, L).


                                                                                                                                             22
