                                                                  GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE

eliminating malware, filtering network protocols, patching computer systems, and detecting and
preventing intrusions is widely available. While the outlook should be positive due to these
advancements, a number of factors contribute to perpetuating security problems, particularly those
summarized below.

3.1.1   Scale of the Internet

Millions of computers make up the Internet. Its vast scale precludes wholesale upgrades to new security
protocols and solutions. As a result, a large pool of systems lags in various degrees from having the most
current protection mechanisms in place. While a single organization’s network may have up-to-date and
secure systems, one or more systems from the pool of stragglers may be used as a launch pad for new
attacks individually or as part of a coordinated group of systems called a botnet [McC03]. Members of a
botnet are typically poorly secured desktop or laptop computers with high-speed Internet connectivity on
which programs to cause them to attack other systems have been surreptitiously installed. A study done
in 2006 of about 4.5 million URLs found that, at a minimum, 10 percent of them were engaging in
surreptitious downloads of malicious code [Pro07].

3.1.2   Window of Exposure

Errors of commission or omission invariably occur that create vulnerabilities that allow protection
mechanisms to be bypassed or disabled. An individual vulnerability may not pose a serious problem,
depending on such factors as the level of access and complexity of the attack needed to exploit the
vulnerability and the availability of exploit code or tools. As vulnerabilities are discovered and made
known to the manufacturer, a window of exposure exists until a patch containing corrective code to close
the vulnerability is made available. A patch usually involves the installation of native, platform-specific
code modules, which are developed as a replacement for or an insertion into compiled code that is already
installed on a computer. Any delay in applying the patch opens the window not only to a wider time
period for exploitation, but also to a greater audience of potential intruders, as attack tools that exploit the
vulnerability emerge. Today, vulnerabilities are discovered at an increasingly high frequency, further
aggravating the problem. In fact, it is not uncommon for exploits to be available before the vulnerability
is publicly announced or acknowledged by the software’s manufacturer; these are known as zero-day
exploits.

3.1.3   Quality of Software Products

Software products often contain large numbers of unintentional implementation errors. Modern market-
driven development processes, such as synchronize and stabilize [Cus99] and extreme programming
[Bec99], evolved to meet the demand for constructing large, complex feature-rich software products in a
flexible manner. While such approaches emphasize efficient adaptability to incorporating new
technologies, shifting priorities, and competition-driven features, these benefits come at the expense of
discipline (e.g., formal design, code review, and complete testing) and schedule. The goal of producing a
shippable product can take precedence over the elimination of known errors. While most errors are
benign with respect to security, an unresolved implementation error may create a serious security
vulnerability. Efforts are underway in industry, academia, and government to improve the quality of
software, such as Microsoft’s Secure Development Lifecycle [SDL].

3.1.4   Quality of Software Applications

Application development suffers from many of the same problems that affect software products:
emphasizing functionality over security, speedy deployment over comprehensive testing, and technology
for technology’s sake. In striving to offer greater functionality and flexibility, software developers

                                                      3-2
