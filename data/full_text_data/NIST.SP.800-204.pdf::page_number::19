                                                                                             NIST SP 800-204                                                          SECURITY STRATEGIES FOR
                                                                                                                                                      MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                             ways the security policies can be encoded and input in a gateway. One approach is to encode
                                                                                             policies using JSON format and input them through a graphical policy management interface.
                                                                                             The microgateway should contain policies for both application requests and responses. When
                                                                                             policies and their enforcement are implemented as a container, they are immutable and thus
                                                                                             provide a degree of protection against accidental and unintended modifications which may result
                                                                                             in security breaches or conflicts. In other words, these types of modifications are prevented when
                                                                                             the microgateway is implemented as a container since any security policy update will require
                                                                                             redeployment of the microgateway. It is essential that the microgateway deployed for any
                                                                                             microservice instance communicate with service registry and monitoring modules to keep track
                                                                                             of the operational status of the microservice it is designed to protect.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                             2.7.2    Service Mesh

                                                                                             A service mesh is a dedicated infrastructure layer that facilitates service-to-service
                                                                                             communication through service discovery, routing and internal load balancing, traffic
                                                                                             configuration, encryption, authentication and authorization, metrics, and monitoring. It provides
                                                                                             the capability to declaratively define network behavior, node identity, and traffic flow through
                                                                                             policy in an environment of changing network topology due to service instances coming and
                                                                                             going offline and continuously being relocated. It can be looked upon as a networking model
                                                                                             that sits at a layer of abstraction above the transport layer of the Open System Interconnection
                                                                                             (OSI) model (e.g., Transport Control Protocol/Internet Protocol (TCP/IP)) and addresses the
                                                                                             service’s session layer (Layer 5 of the OSI model) concerns [11]. However, fine-grained
                                                                                             authorization may still need to be performed at the microservice since that is the only entity
                                                                                             that has the full knowledge of the business logic. A service mesh conceptually has two
                                                                                             modules—the data plane and the control plane. The data plane carries the application request
                                                                                             traffic between service instances through service-specific proxies. The control plane configures
                                                                                             the data plane, provides a point of aggregation for telemetry, and provides APIs for modifying
                                                                                             the behavior of the network through various features, such as load balancing, circuit breaking,
                                                                                             or rate limiting.

                                                                                             Service meshes create a small proxy server instance for each service within a microservices
                                                                                             application. This specialized proxy car is sometimes called a “sidecar proxy” in service mesh
                                                                                             parlance [12]. The sidecar proxy forms the data plane, while the runtime operations needed for
                                                                                             enforcing security (access control, communication-related) are enabled by injecting policies
                                                                                             (e.g., access control policies) into the sidecar proxy from the control plane. This also provides
                                                                                             the flexibility to dynamically change policies without modifying the microservices code.

                                                                                             2.8     Comparison with Monolithic Architecture

                                                                                             To fully compare the microservice architecture with the monolithic architecture used for all
                                                                                             legacy applications, it is necessary to compare the features of applications developed using these
                                                                                             architectural styles as well as provide an example of an application under both architectures for a
                                                                                             specific business process. A detailed discussion involving these aspects is provided in Appendix
                                                                                             A.



                                                                                                                                             11
