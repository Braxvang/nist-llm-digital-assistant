                                                                                              NIST SP 800-204C                                            DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                 APPLICATION WITH SERVICE MESH

                                                                                                 •   After the container is built from a base-image (that is scanned as stated above), the
                                                                                                     container’s file system should be scanned for both vulnerabilities and misconfigurations.
                                                                                                 •   Git repositories (containing application source code) should be scanned for both
                                                                                                     vulnerabilities and misconfigurations.

                                                                                              Container images include OS packages (e.g., Alpine, UBI, RHEL, CentOS, etc.) and language-
                                                                                              specific packages (e.g., Bundler, Composer, npm, yarn, etc.).

                                                                                              Scanning infrastructure as code for security vulnerabilities reduces the operations workload by
                                                                                              preventing those vulnerabilities from making it to production, although it cannot replace checking
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                              for runtime security since the risk of drift will always exist. However, the reasons for all post-
                                                                                              deployment (runtime) changes to the architecture (due to drift) must be analyzed and addressed
                                                                                              by pushing appropriate updates to the IaC so that it becomes part of the pipeline and does not
                                                                                              reoccur in subsequent deployments. This approach facilitates the use of runtime checks for
                                                                                              remediating security design flaws.

                                                                                              The infrastructure-as-code files can be found in the following:

                                                                                                 •   The container orchestration platform itself to facilitate deployments (e.g., Kubernetes
                                                                                                     YAML infrastructure-as-code files).
                                                                                                 •   The dedicated infrastructure-as-code files found as part of CI/CD pipeline software (e.g.,
                                                                                                     HashiCorp Terraform infrastructure-as-code files, AWS CloudFormation infrastructure-
                                                                                                     as-code files).

                                                                                              Application services code, policy-as-code, and observability-as-code files can be found in the
                                                                                              data plane and control plane components of the dedicated application services component (e.g.,
                                                                                              service mesh) and should be scanned for both security vulnerabilities (e.g., information leakage in
                                                                                              authorization policies) and misconfiguration.

                                                                                              4.9 Benefits of DevSecOps Primitives to Application Security in the Service Mesh

                                                                                              The benefits of DevSecOps include:
                                                                                                 •   Better communication and collaboration between various IT teams especially between
                                                                                                     developers, operations and security teams and other stakeholders. Results in better
                                                                                                     productivity [39]
                                                                                                 •   Streamlined software development, delivery and deployment process – less downtime,
                                                                                                     faster time to market and lower infrastructure & operational costs and efficiency due to
                                                                                                     automation [39]
                                                                                                 •   Reduction of attack surfaces by implementing zero trust which also restricts lateral
                                                                                                     movement and thus prevents attack escalation. This is further facilitated by continuous
                                                                                                     monitoring with modern behavior prevention capabilities.



                                                                                                                                              28
