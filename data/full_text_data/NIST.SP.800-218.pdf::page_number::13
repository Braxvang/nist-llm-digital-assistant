                                                                                             NIST SP 800-218                                                                   SSDF VERSION 1.1



                                                                                             2       The Secure Software Development Framework

                                                                                             This document defines version 1.1 of the Secure Software Development Framework (SSDF)
                                                                                             with fundamental, sound, and secure recommended practices based on established secure
                                                                                             software development practice documents. The practices are organized into four groups:
                                                                                                 1. Prepare the Organization (PO): Organizations should ensure that their people,
                                                                                                    processes, and technology are prepared to perform secure software development at the
                                                                                                    organization level. Many organizations will find some PO practices to also be applicable
                                                                                                    to subsets of their software development, like individual development groups or projects.
                                                                                                 2. Protect the Software (PS): Organizations should protect all components of their
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-218




                                                                                                    software from tampering and unauthorized access.
                                                                                                 3. Produce Well-Secured Software (PW): Organizations should produce well-secured
                                                                                                    software with minimal security vulnerabilities in its releases.
                                                                                                 4. Respond to Vulnerabilities (RV): Organizations should identify residual vulnerabilities
                                                                                                    in their software releases and respond appropriately to address those vulnerabilities and
                                                                                                    prevent similar ones from occurring in the future.

                                                                                             Each practice definition includes the following elements:
                                                                                                 •    Practice: The name of the practice and a unique identifier, followed by a brief
                                                                                                      explanation of what the practice is and why it is beneficial
                                                                                                 •    Tasks: One or more actions that may be needed to perform a practice
                                                                                                 •    Notional Implementation Examples: One or more notional examples of types of tools,
                                                                                                      processes, or other methods that could be used to help implement a task. No examples or
                                                                                                      combination of examples are required, and the stated examples are not the only feasible
                                                                                                      options. Some examples may not be applicable to certain organizations and situations.
                                                                                                 •    References: Pointers to one or more established secure development practice documents
                                                                                                      and their mappings to a particular task. Not all references will apply to all instances of
                                                                                                      software development.

                                                                                             Table 1 defines the practices. They are only a subset of what an organization may need to do.
                                                                                             The information in the table is space constrained; much more information on each practice can
                                                                                             be found in the references. Note that the order of the practices, tasks, and notional
                                                                                             implementation examples in the table is not intended to imply the sequence of implementation or
                                                                                             the relative importance of any practice, task, or example.

                                                                                             The table uses terms like “sensitive data,” “qualified person,” and “well-secured,” which are not
                                                                                             defined in this publication. Organizations adopting the SSDF should define these terms in the
                                                                                             context of their own environments and use cases. The same is true for the names of
                                                                                             environments, like “development,” “build,” “staging,” “integration,” “test,” “production,” and
                                                                                             “distribution,” which vary widely among organizations and projects. Enumerating your
                                                                                             environments is necessary in order to secure them properly, and especially to prevent lateral
                                                                                             movement of attackers from environment to environment.


                                                                                                                                               4
