                                                                                              NIST SP 800-204A                                BUILDING SECURE MICROSERVICES-BASED APPLICATIONS
                                                                                                                                                              USING SERVICE-MESH ARCHITECTURE


                                                                                                 ● Authentication and authorization – Certificate generation, key management, whitelist and
                                                                                                   blacklist, Single sign-on (SSO) tokens, API keys
                                                                                                 ● Secure service discovery – Discovery of service endpoints through a dedicated service
                                                                                                   registry
                                                                                                 ● Secure communication – Mutual Transport Layer Security (TLS), encryption, dynamic
                                                                                                   route generation, multiple protocol support, including protocol translation where required
                                                                                                   (e.g., Hypertext Transfer Protocol (HTTP)1.x, HTTP2, gRPC, etc.)
                                                                                                 ● Resilience/stability features for communication – Circuit breakers, retries, timeouts, fault
                                                                                                   injection/handling, load balancing, failover, rate limiting, request shadowing
                                                                                                 ● Observability/monitoring features – Logging, metrics, distributed tracing
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204A




                                                                                              3.1.1   Ingress Controller

                                                                                              The service proxy of a Service Mesh can be deployed for control of ingress traffic (i.e., external
                                                                                              traffic coming into microservices application as opposed to microservice-to-microservice
                                                                                              communication). In this sense, it realizes the functions of an API gateway. Conceptually, the
                                                                                              ingress controller can be looked upon as a side-car proxy for an external client. The ingress
                                                                                              controller (sometimes called the front proxy) provides the following functions:

                                                                                                 ● A common API for all clients shielding the actual API inside the Service Mesh
                                                                                                 ● Protocol translation from web-friendly protocols, such as HTTP/Hypertext Transfer
                                                                                                   Protocol Secure (HTTPS), to protocols used by microservices, such as
                                                                                                   RPC/gRPC/Representational State Transfer (REST)
                                                                                                 ● Composition of results received from calls to multiple services inside the Service Mesh in
                                                                                                   response to a single call from the client
                                                                                                 ● Load balancing
                                                                                                 ● Public TLS termination

                                                                                              3.1.2   Egress Controller

                                                                                              The service proxy of a Service Mesh can be deployed for control of egress traffic (i.e., internal
                                                                                              traffic coming from microservices destined for microservices outside of the mesh). In this sense,
                                                                                              it functions as an egress-only gateway. Conceptually, the egress controller can be looked upon as
                                                                                              a side-car proxy for one or more external servers. The egress proxy provides the following
                                                                                              functions:

                                                                                                 ● A single set of workloads (e.g., hosts, IP addresses) to whitelist for communication to
                                                                                                   external networks (e.g., firewalls can be configured to allow only egress proxies to
                                                                                                   forward traffic out of the local network)
                                                                                                 ● Credential exchange: Translate from internal (mesh) identity credentials to external
                                                                                                   credentials (e.g., SSO tokens or API keys) without the application directly accessing the
                                                                                                   external system’s credentials
                                                                                                 ● Protocol translation from microservice-friendly protocols (e.g., RPC/gRPC/REST) to
                                                                                                   web-friendly protocols (e.g., HTTP/HTTPS)

                                                                                                                                               8
