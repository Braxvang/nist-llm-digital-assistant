concatenating the components. Common hardware tokens include smartcards. The
advantage of using a hardware token is that if the user stores the hardware token away
from the computer, and the key is split between the token and the computer, an adversary
needs to recover both pieces of hardware to recover the key. Additional security may be
provided by encrypting the key splits, perhaps by using a password.

There are many permutations of answers to the questions above. Four examples of how
these questions can be answered will be considered, along with the pros and cons of each
system. It is important to consider the specific environment in which the File Encryption
System will be used, as that will usually point to a specific type of system that is
preferable for that case.

The first example that will be considered is a file encryption system that uses a single
symmetric key to encrypt every file on the system. This single key is generated using a
method in [SP 800-132] from a user’s password.

The second example is a system that utilizes per-file encryption keys, which are stored on
the hard disk, encrypted by a key encryption key. The key encryption key (which is also
used to decrypt each file encryption key) is securely stored on the hard drive (e.g., using
the Trusted Platform Module (TPM) [TPM]).

The third example is a system that utilizes per-file encryption keys that are split into two
key components that will be XORed to recreate the key, with one key component stored
on a hardware token and the other component derived from a password (e.g., using a
method in [SP 800-132] to derive the key).

The fourth example uses per-file encryption keys, which are encrypted under the file
owner’s asymmetric private key as previously described. This system is common in
current file-encryption packages, while the previous three are extreme to show the pros
and cons of the systems more clearly.




                                             59
