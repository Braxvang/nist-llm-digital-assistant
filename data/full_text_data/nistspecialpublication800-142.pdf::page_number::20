Practical Combinatorial Testing
________________________________________________________________
The complete test set for 2-way combinations is shown in Table 1 in Section 2.1.1. Only
10 tests are needed. Moving to 3-way or higher interaction strengths requires more tests, as
shown in Table 3.

                                t   # Tests   % of Exhaustive
                                2        10                14
                                3        18                25
                                4        36                50
                                5        72              100
         Table 3. Number of combinatorial tests for a simple example.


        In this example, substantial savings could be realized by testing t-way
configurations instead of all possible configurations, although for some applications (such
as a small but highly critical module) a full exhaustive test may be warranted. As we will
see in the next example, in many cases it is impossible to test all configurations, so we need
to develop reasonable alternatives.

3.2   Smart Phone Application Example

        Smart phones have become enormously popular because they combine
communication capability with powerful graphical displays and processing capability.
Literally tens of thousands of smart phone applications, or ‘apps’, are developed annually.
Among the platforms for smart phone apps is the Android, which includes an open source
development environment and specialized operating system. Android units contain a large
number of configuration options that control the behavior of the device. Android apps
must operate across a variety of hardware and software platforms, since not all products
support the same options. For example, some smart phones may have a physical keyboard
and others may present a soft keyboard using the touch sensitive screen. Keyboards may
also be either only numeric with a few special keys, or a full typewriter keyboard.
Depending on the state of the app and user choices, the keyboard may be visible or hidden.
Ensuring that a particular app works across the enormous number of options is a significant
challenge for developers. The extensive set of options makes it intractable to test all
possible configurations, so combinatorial testing is a practical alternative.

         Figure 7 shows a resource configuration file for Android apps. A total of 35
options may be set. Our task is to develop a set of test configurations that allow testing
across all 4-way combinations of these options. The first step is to determine the set of
parameters and possible values for each that will be tested. Although the options are listed
individually to allow a specific integer value to be associated with each, they clearly
represent sets of option values with mutually exclusive choices. For example, “Keyboard
Hidden” may be “yes”, “no”, or “undefined”. These values will be the possible settings for
parameter names that we will use in generating a covering array. Table 4 shows the
parameter names and number of possible values that we will use for input to the covering
array generator. For a complete specification of these parameters, see:
 http://developer.android.com/reference/android/content/res/Configuration.html




14
