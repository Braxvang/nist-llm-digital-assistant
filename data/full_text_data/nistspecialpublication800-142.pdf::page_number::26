Practical Combinatorial Testing
________________________________________________________________
        Ideally, the program should behave the same for any
of the times within the partitions; it should not matter           Use a maximum
whether the time is 4:00 am or 7:03 am, for example,               of 8 to 10 values
because the specification treats both of these times the same.     per parameter to
Similarly, it should not matter which time between the hours       keep testing
of 9 am and 5 pm is chose; the program should behave the           tractable.
same for 10:20 am and 2:33 pm. One common strategy,
boundary value analysis, is to select test values at each boundary and at the smallest
possible unit on either side of the boundary, for three values per boundary. The intuition,
backed by empirical research, is that errors are more likely at boundary conditions because
errors in programming may be made at these points. For example, if the requirements for
automated teller machine software say that a withdrawal should not be allowed to exceed
$300, a programming error such as the following could occur:

       if (amount > 0 && amount < 300) {
               //process withdrawal
       } else {
               // error message
       }
Here, the second condition should have been “amount <= 300”, so a test case that
includes the value amount = 300 can detect the error, but a test with amount = 305
would not.

        It is generally also desirable to test the extremes of ranges. One possible selection
of values for the time parameter would then be: 0000, 0539, 0540, 0541, 1019, 1020, 1021,
and 1440. More values would be better, but the tester may believe that this is the most
effective set for the available time budget. With this selection, the total number of
combinations is 2 ⋅ 8 ⋅ 7 ⋅ 2 ⋅ 2 = 448.

        Generating covering arrays for t = 2 through 6, as detailed in Section 3.1 results in
the following number of tests:

                                      t      # Tests
                                      2             56
                                      3            112
                                      4            224
             Figure 11.     Number of tests for access control example.


4.2   Real-world Systems

       As with the previous example, the advantage over
exhaustive testing is not large, because of the small number of
                                                                    The larger the
parameters.     With larger problems, the advantages of             system, the greater
combinatorial testing can be spectacular. For example,              the benefit from
consider the problem of testing the software that processes         combinatorial
switch settings for the panel shown in Figure 12. There are 34      testing.
switches, which can each be either on or off, for a total of 234


20
