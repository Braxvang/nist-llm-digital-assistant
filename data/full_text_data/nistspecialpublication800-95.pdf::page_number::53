                                                                                GUIDE TO SECURE WEB SERVICES



Because of the functions they perform, trusted objects often require higher privileges than untrusted
objects. Regardless of whether an object is trusted or untrusted, a privilege should be granted to it only at
the moment the object needs that privilege, and the object should relinquish the privilege as soon as it
completes the function/access for which the privilege was needed. Objects should not be allowed to
retain a privilege that they are not actively using. Privileges should never be granted in anticipation of
their being needed to perform some function/access in the future.

The application’s design should ensure that only a minimal number of application objects need to be
trusted or are ever granted privileges that exceed those of the end users that are associated with those
objects. Whenever possible, implement objects without privileges, and if necessary, divide the complex
functions they must perform into multiple simple functions, with a separate minimal required privilege for
each function.

The application should also support minimization of permissions granted to a user, with each user granted
only those minimal privileges needed to execute the application and access the data/resources for which
the user is authorized. In most cases, user privileges will be determined by the user’s role. As with other
application objects, user privileges should be assigned at the moment they are needed, and revoked as
soon as they are no longer being used.

Web services should be designed so that only a few components perform trusted operations. By
restricting trusted functions to a small number of components, the overall architecture is simplified and
the potential attack scenarios are minimized. Nevertheless, trusted functions should not be limited solely
to a single component, which introduces a single point of failure. If the single trusted component fails,
none of the dependent components will be able to function adequately, leading to a loss of availability.
Trusted Web services should be deployed to be as available as possible.

There are three important concepts to consider when developing the access control policy for Web
services. These concepts apply equally within the OS itself and within the SOA as a whole.

 Separation of Duties. Developers should write Web services to require only appropriate system
  roles or attributes to operate correctly.
 Separation of Roles and Separation of Privileges. The roles or attributes required for Web services
  should directly correspond to the set of functions to be performed.
 Separation of Domains (Compartmentalization). Access control policy may benefit from
  separating Web services into various compartments. For example, separating roles associated with
  rate service A from those associated with rate service B will allow an administrator to modify each
  service’s permissions separately. The difficulty of compartmentalization depends on the access
  control mechanism used: this could be implemented in ABAC using resource attributes or through
  additional roles in RBAC.
Note that most general purpose operating systems’ access controls cannot isolate intentionally
cooperating programs. If the cooperation of malicious programs is a concern, the application should be
implemented on a system which implements mandatory access controls and limits covert channels.

3.5.3   SAML

SAML defines an XML vocabulary for sharing security assertions that specify whether and how an entity
was authenticated, information about an entity's attributes or whether an entity is authorized to perform a
particular action. These assertions enable identity federation and distributed authorization within a SOA.



                                                    3-18
