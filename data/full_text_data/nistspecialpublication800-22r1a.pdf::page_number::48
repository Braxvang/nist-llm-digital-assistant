A STATISTICAL TEST SUITE FOR RANDOM AND PSEUDORANDOM NUMBER GENERATORS FOR CRYPTOGRAPHIC APPLICATIONS



2.10.5 Decision Rule (at the 1% Level)
If the computed P-value is < 0.01, then conclude that the sequence is non-random. Otherwise, conclude
that the sequence is random.

2.10.6 Conclusion and Interpretation of Results
If the P-value were < 0.01, this would have indicated that the observed frequency counts of Ti stored in
the νI bins varied from the expected values; it is expected that the distribution of the frequency of the Ti
(in the νI bins) should be proportional to the computed πi as shown in step (6) of Section 2.10.5.

2.10.7 Input Size Recommendation
Choose n ≥ 106. The value of M must be in the range 500≤ M ≤ 5000, and N ≥ 200 for the χ2 result to be
valid (see Section 3.10 for a discussion).

2.10.8 Example
(input)     ε = “the first 1,000,000 binary digits in the expansion of e”

(input)          n = 1000000 = 106, M = 1000

(processing)     v0 = 11; v1 = 31; v2 = 116; v3 = 501; v4 = 258; v5 = 57; v6 = 26

(processing)     χ2(obs) = 2.700348

(output)         P-value = 0.845406

(conclusion)     Since the P-value ≥ 0.01, accept the sequence as random.


2.11 Serial Test

2.11.1 Test Purpose

The focus of this test is the frequency of all possible overlapping m-bit patterns across the entire
sequence. The purpose of this test is to determine whether the number of occurrences of the 2m m-bit
overlapping patterns is approximately the same as would be expected for a random sequence. Random
sequences have uniformity; that is, every m-bit pattern has the same chance of appearing as every other
m-bit pattern. Note that for m = 1, the Serial test is equivalent to the Frequency test of Section 2.1.

2.11.2 Function Call
Serial(m,n), where:

           m     The length in bits of each block.

           n     The length in bits of the bit string.

Additional input used by the function, but supplied by the testing code:

           ε     The sequence of bits as generated by the RNG or PRNG being tested; this exists as a
                 global structure at the time of the function call; ε = ε1, ε2, … , εn.



                                                         2-26
