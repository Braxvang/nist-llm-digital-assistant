NIST SP 800-38G                                                 METHODS FOR FORMAT-PRESERVING ENCRYPTION


only block cipher that fits this profile.

The choice of the key length affects the security of the FPE modes, e.g., against brute-force
search, and also affects the details of the implementation of the AES algorithm. Otherwise, the
key length does not affect the implementation of FF1 and FF3, and the choice of the key length
is not explicitly indicated in their specifications. Methods for generating cryptographic keys are
discussed in [13]; the goal is to select the keys uniformly at random, i.e., for each possible key to
occur with equal probability.

The key shall be kept secret, i.e., disclosed only to parties that are authorized to know the
protected information. Compliance with this requirement is the responsibility of the entities
using, implementing, installing, or configuring applications that incorporate the functions that are
specified in this publication. The management of cryptographic keys is outside the scope of this
publication.

4.4    Encryption and Decryption Functions

For a given key, denoted by K, for the designated block cipher, FF1 and FF3 each consist of two
related functions: encryption and decryption. The inputs to the encryption function are a numeral
string called the plaintext, denoted by X, and a byte string, called the tweak, denoted by T; the
function returns a numeral string called the ciphertext, denoted by Y, with the same length as X.
Similarly, the inputs to the decryption function are a numeral string X and a tweak T; the output
is a numeral string Y of the same length as X.

For FF1, the encryption function is denoted by FF1.Encrypt(K, T, X), and the decryption function
is denoted by FF1.Decrypt(K, T, X), with analogous notation for FF3.

For a given tweak, the decryption function is the inverse of the encryption function, so that

                               FF1.Decrypt(K, T, FF1.Encrypt(K, T, X)) = X,
                               FF3.Decrypt(K, T, FF3.Encrypt(K, T, X)) = X.

Thus, when a ciphertext is an input to the decryption function, along with the same tweak that
was used to generate the ciphertext, the output is the corresponding plaintext.

The tweak does not need to be kept secret; often, it is some readily available data that is
associated with the plaintext. Although implementations may fix the value of the tweak, the use
of variable tweaks is strongly recommended as a security enhancement; see Appendix C. In FF1
and FF3, tweaks are byte strings. The specifications in Sec. 5 include the lengths that can be
supported for the tweak, as well as for the plaintext/ciphertext.

The key, K, is indicated in the above notation as an input for the encryption and decryption
functions; however, in the specifications in this publication, the key is listed as a prerequisite,
i.e., an input that is usually established prior to the invocation of the function.3 Several other


3
 The distinction doesnâ€™t affect the execution of the function: all inputs are required, independent of when they were
established or provided to the implementation.

                                                          9
