                                                                 GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



Web pages as they are downloaded, often by augmenting their functionality through other Web resources.
To accomplish its tasks, it provides a means to bypass the same origin policy of the browser and interact
with any domain, which could be exploited by a malicious Web site.

From a security standpoint, plug-ins are executable code, and precautions should be exercised in
obtaining and installing them, as with any other software application. Downloading plug-ins directly
from a reputable manufacturer is normally less risky than downloading them from other sources, but even
in the first case, it is difficult for the user to be aware of the security implications. In the past, unwanted
side effects such as changes to browser security settings and tracking of a user’s content preferences,
albeit well intentioned, have occurred. Plug-ins designed to animate cursors or hyperlinks have also been
designed to track user preferences and viewing habits across a particular Web site more accurately.
Although these capabilities may improve the user's experience with a particular Web site, the privacy and
security implications are often not readily disclosed [Mar00]. Even if the site has a valid identity
certificate associated with the signed downloaded code, that only tells the user that the manufacturer of
the code has been verified by a certificate authority, not whether the code obtained from them will behave
non-maliciously or correctly. Users of plug-ins should be cautioned to read the fine print before agreeing
to download executables and take adequate measures to backup the system in the event of problems.

4.2   Server-Side Technologies

Unlike the technologies described above, Web applications, which rely on CGI or other server-side
content-generating components, fall on the producer side of the producer-consumer model. Through such
components, Web applications can be written in most programming languages to run on a Web server.
More often than not, a server-side scripting language or framework such as Perl, .NET, or Java Enterprise
Edition (Java EE) is used for this purpose, because of its flexibility, compactness, and robustness. If these
programs are not prepared carefully, attackers can find and exercise flaws in the code to compromise the
Web server. A compromised Web server may eventually be used to deliver malicious active content to
Web browsers visiting the site. Server scripts and code modules should be written with security in mind
and, for example, should not run arbitrary commands on a system or launch insecure programs. Even
content files generated with authoring tools may contain vulnerabilities that can be exploited [CERT08,
Goo08a]. An attacker can find flaws through trial and error and does not necessarily need the source code
or a content generating tool to uncover vulnerabilities.

Three general areas exist where server applications can introduce security vulnerabilities at the server:

 They may intentionally or unintentionally leak information about the host system that can aid an
  attacker, for example, by allowing access to information outside the areas designated for Web use.
 When processing user-provided input, such as the contents of a form, URL parameters, or a search
  query, they may be able to be tricked into executing arbitrary commands supplied in the input stream.
 When returning user-provided content, such as an email or uploaded video, they may deliver
  malicious content constructed by attackers for execution in other users’ Web browsers.
The three areas of vulnerability mentioned potentially affect all Web servers. Active content generating
technologies used at the server are frequently the source of these vulnerabilities. CGI has gained
particular notoriety over the years, because it was an early and well-supported standard. However, the
same types of vulnerabilities exist when applying similar Web development technologies at the server.
An in-depth discussion on this matter can be found in NIST SP 800-44 Version 2, Guidelines on Securing
Public Web Servers [NIST07].




                                                     4-8
