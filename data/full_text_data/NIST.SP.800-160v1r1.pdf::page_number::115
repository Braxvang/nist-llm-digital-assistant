NIST SP 800-160v1r1                                                    Engineering Trustworthy Secure Systems
November 2022

be preserved (e.g., self-reliant trustworthiness cannot be claimed if the protection assertions for trust are
allocated to and dependent on some other entity). Similarly, when a system capability is distributed across
multiple system elements, self-reliant trustworthiness requires that the trust expectations for the capability
be properly allocated across the elements that comprise the distributed capability.
The judgment that a system element is self-reliantly trustworthy is based on the element’s ability to
satisfy a specific set of requirements and associated assumptions. An element that is self-reliantly
trustworthy for one set of requirements and assumptions is not necessarily self-reliantly trustworthy for
other sets of requirements and assumptions. Any change in the requirement, the satisfaction of the
requirement, or in the assumptions associated with the requirement requires reassessment to determine
that the element remains self-reliantly trustworthy.
References: [2]

E.28. Structured Decomposition and Composition
Principle: System complexity is managed through the structured decomposition of the system
and the structured composition of the constituent elements to deliver the required capability.
Note: The structured decomposition of the system and the subsequent composition of the system elements
are guided and informed by the concepts of modularity, layering, and partially ordered dependencies.
Modularity is the system design technique to divide and conquer – that is, sub-divide the system into
smaller, well-defined cohesive components and assemblies that are referred to as modules. Modularity
serves to isolate functions and data structures into well-defined logical units. Modular decomposition can
include the allocation of policies to systems in a network, the allocation of system policies to layers, the
separation of system applications into processes with distinct address spaces, and the separation of
processes into subjects with distinct privileges based on hardware-supported privilege domains. Modular
design may also extend to consider trust, trustworthiness, privilege, and policy.
Layering is the grouping of modules into a relational structure with well-defined interfaces, function,
data, and control flow so that the dependencies graph among layers is linearly or partially ordered such
that higher layers are dependent only on lower layers [2]. Partially ordered dependencies among modules
(e.g., if module A depends on module B, then module B cannot depend on module A) and system
layering contribute significantly to system design simplicity and coherence. While a partial ordering of all
functions and processes may not be possible, the inherent problems of circularity can be more easily
managed if the circular dependencies are constrained to occur within layers and minimized within each
layer. Partially ordered dependencies also facilitate system testing and analysis and enable a strong form
of loose coupling (i.e., minimizing interdependencies among modules).
Modularity and layering are effective in managing the complexity of the composed system. They provide
the means to decompose the system into discrete and aggregate elements to better comprehend the system
in terms of its structure, flows, relationships, and how the system delivers the required capability. The
structured composition of the constituent elements must also adhere to the principle of Compositional
Trustworthiness to provide a basis to support claims about how the system is composed based on the
application of modularity, layering, and partially ordered dependencies to achieve authorized and
intended behaviors and outcomes.
References: [2] [20] [46] [48] [49]




                                                     99
