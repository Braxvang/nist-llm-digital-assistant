                                                                                               GUIDE TO SECURE WEB SERVICES



 Internal, informative application error messages returned to users. Such messages, if
  intercepted, can provide important reconnaissance information to attackers. To prevent this, all error
  messages should be logged and redirected via an SSL-encrypted connection to the administrator. In
  place of the original error message, an uninformative generic error message should be provided to all
  other users.
A.3 Attacks on Confidentiality

The objective of a confidentiality attack is to force the targeted application to disclose information that the
attacker is not authorized to see, including sensitive information and private information. The XML
Encryption, WS-Security, and HTTPS standards provide confidentiality protection for Web services.
WS-Security and HTTPS are generally used to protect confidentiality of SOAP messages in transit,
leaving data at rest vulnerable to attack. Because most Web service data is stored in the form of XML,
using XML Encryption before storing data should provide confidentiality protection while maintaining
compatibility. Other forms of data may be encrypted using AES, as defined in FIPS 197 57, or public key
algorithms such as RSA, ElGamal, and ECC. Confidentiality attacks can also be aimed at subverting the
Web service itself or the business process it is part of. To prevent such attacks, Web service designs and
configurations should be reviewed by a third party and the developers should practice secure software
development techniques.

A.3.1       Sniffing

Sniffing, or eavesdropping, is the act of monitoring network traffic exchanged between Web services to
capture sensitive plaintext data such as unencrypted passwords and security configuration information
transmitted in SOAP, UDDI, WSDL, and other such messages. With a simple packet sniffer, an attacker
can easily read all plaintext traffic. Also, attackers can crack packets encrypted by lightweight algorithms
and decipher the payload that the Web service developer considers to be secure. The sniffing of packets
requires inserting a packet sniffer into the path between the service-to-service (or portal-to-service) traffic
flow.

A.4 Attacks on Integrity

The objective of an integrity attack is to exploit the targeted application to make unauthorized changes to
information accessed/handled by the application. Web service standards for protecting the integrity of
data include WS-Security, XML Signature. Through cryptography, services can determine whether a
particular SOAP message has been tampered with. Other tools and standards, such as FIPS 197, FIPS
186-2, and HTTPS, provide similar functionality for non-XML content. Due to Web servicesâ€™ reliance on
XML, integrity attacks are not limited to altering messages in transit or data in storage. Integrity attacks
can be aimed at the integrity of the Web service itself or the business process it is part of. To prevent
such attacks, Web service designs and configurations should be reviewed by a third party and the
developers should practice secure software development techniques.

A.4.1       Parameter Tampering

In a Web service, arbitrary data can be passed as parameters to Web service methods. These parameters
may have been thought to be immutable within the Web service. If sufficient verification mechanisms are
not in place, this leads to possible attacks. An example of a verification mechanism is the establishment
of constraints on type and format in the WSDL file, then verifying that the correct type and format was
received by the Web service.

57
     FIPS 197, Advanced Encryption Standard, is available at http://csrc.nist.gov/publications/fips/.


                                                               A-5
