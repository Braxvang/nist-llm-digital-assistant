                                                                                              NIST SP 800-204A                                 BUILDING SECURE MICROSERVICES-BASED APPLICATIONS
                                                                                                                                                               USING SERVICE-MESH ARCHITECTURE


                                                                                                    ● Circuit breaker: Large-scale distributed systems, no matter how they are architected, have
                                                                                                      one defining characteristic—they provide many opportunities for small, localized failures
                                                                                                      to escalate into system-wide catastrophic failures. The Service Mesh must be designed to
                                                                                                      safeguard against these escalations by shedding load and failing quickly when the
                                                                                                      underlying systems approach their limits. Circuit breaking involves setting a threshold for
                                                                                                      the failed responses from an instance of a microservice and cutting off forwarding
                                                                                                      requests to that instance when the failure is above the threshold (e.g., when the circuit
                                                                                                      breaker trips). This mitigates the possibility of cascading failure and allows for time to
                                                                                                      analyze logs, implement the necessary fix, and push an update for the failing instance.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204A




                                                                                                      Thus, circuit breaking is a temporary measure that prevents total disruption to responses
                                                                                                      for service requests. The service requests will be restored to the instance once the service
                                                                                                      is responsive.
                                                                                                    ● Rate limiting (throttling): The rate of requests coming into a microservice must be limited
                                                                                                      to ensure continued availability of service for all clients.
                                                                                                    ● Blue/green deployments: When a new version of a microservice is deployed, requests
                                                                                                      from customers using the old version can be redirected to the new version using the API
                                                                                                      gateway that can be programmed to maintain awareness of the locations of both versions.
                                                                                                    ● Canary releases: Only a limited amount of traffic is initially sent to a new version of a
                                                                                                      microservice since the correctness of its response or performance metric under all
                                                                                                      operating scenarios is not fully known. Once sufficient data is gathered about its
                                                                                                      operating characteristics, then all of the requests can be proxied to the new version of the
                                                                                                      microservice.
                                                                                              2.4     Application Monitoring Requirement

                                                                                              To detect attacks and identify factors for degradation of services (which may impact
                                                                                              availability), it is necessary to monitor network traffic into and out of microservices through
                                                                                              distributed logging, generation of metrics, performance of analytics, and tracing.




                                                                                                                                                5
