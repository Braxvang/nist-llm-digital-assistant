NIST SP 800-167                                                                                GUIDE TO APPLICATION W HITELISTING


    substantially better unique identification of files than file size does, and should be used instead of file
    size whenever feasible.
   Digital signature or publisher. Application files are increasingly being digitally signed by their
    publishers. A digital signature provides a reliable, unique value for an application file that is to be
    verified by the recipient to ensure that the file is legitimate and has not been altered. Unfortunately,
    many application files are not yet signed by their publishers, so using only publisher-provided digital
    signatures as attributes is generally not feasible. Some application whitelists can be based on
    verifying the publisher’s identity instead of verifying individual digital signatures; this is based on the
    assumption that all applications from trusted publishers can themselves be trusted.3 This assumption
    may be faulty if the software vendor has multiple applications and the organization wants to restrict
    which of those applications can be executed. Also, relying on the publisher’s verified identity only
    would allow older software versions with known vulnerabilities to be executed. However, the benefit
    of basing a whitelist on publisher identities is that the whitelist only needs updates when there is a
    new publisher (i.e., software vendor) or when a publisher updates its signature key.4
   Cryptographic hash. A cryptographic hash provides a reliable, unique value for an application file,
    so long as the cryptography being used is strong and the hash is already known to be associated with a
    good file. Cryptographic hashes are accurate no matter where the file is placed, what it is named, or
    how it is signed. However, a cryptographic hash is not helpful when a file is updated, such as when an
    application is patched; the patched version will have a different hash. In these cases the patch should
    be identified as legitimate through its digital signature, then its cryptographic hash should be added to
    the whitelist. Note that if the whitelist is not continuously updated with new hashes for new and
    updated applications, there is a significant risk of software not functioning correctly, and if the
    whitelist is not continuously updated to remove existing hashes for older software versions with
    known vulnerabilities, there is a significant risk of vulnerable software being allowed to run.
As the discussions above indicate, choosing attributes is largely a matter of achieving the right balance of
security, maintainability, and usability. Simpler attributes such as file path, filename, and file size should
not be used by themselves unless there are strict access controls in place to tightly restrict file activity,
and even then there are often significant benefits to pairing them with other attributes. A combination of
digital signature/publisher and cryptographic hash techniques generally provides the most accurate and
comprehensive application whitelisting capability, but usability and maintainability requirements can put
significant burdens on the organization.

2.2.2    Application Resources

Application whitelisting is most often associated with monitoring executables. However, most application
whitelisting technologies also have the ability to monitor at least some other types of application-related
files, such as libraries, scripts, macros, browser plug-ins (or add-ons or extensions), configuration files,
and application-related registry entries (on Windows hosts). The granularity of this monitoring varies
significantly among application whitelisting technologies; for example, some can only permit or block
whole classes of scripts (e.g., JavaScript)5, while others can permit or block individual scripts within a
class of scripts.



3   For its internal applications, an organization can issue its own internal signing key to anchor its root of trust, instead of
    depending on a signing key from an external publisher.
4   An alternative approach is to employ cross-signing, where both the software vendor and the organization sign each
    application, thus indicating that it is both authentic and approved by the organization.
5   Generally this means that the application is blocking the executable for the scripting language, instead of blocking the
    scripts themselves.



                                                                  4
