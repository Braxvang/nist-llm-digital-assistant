                                                                                              NIST SP 800-204B                                                    ABAC FOR MICROSERVICES-BASED
                                                                                                                                                                APPLICATIONS USING A SERVICE MESH




                                                                                              2     Reference Platform for Microservices-based Application and Service Mesh

                                                                                              The objective of this document is to offer recommendations for the deployment of an
                                                                                              authentication and authorization framework for microservices-based applications within a
                                                                                              service mesh that provides the infrastructure for various services, including critical security
                                                                                              services. A reference platform for hosting microservices-based applications and the service mesh
                                                                                              is included to provide clarity and context for concepts and recommendations in real-world
                                                                                              application environments. A brief description of these reference platforms is also provided in
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204B




                                                                                              terms of their overall architecture and salient building blocks.

                                                                                              2.1   Reference Platform for Orchestration and Resource Management of a
                                                                                                    Microservices-based Application

                                                                                              Kubernetes is an orchestration and resource management system widely used for microservices-
                                                                                              based applications. In a large application, there will be several microservices, each of which is
                                                                                              implemented as a container. Scalable, automated means are required for deployments,
                                                                                              operations, upgrading services, and monitoring the health of these containers. The Kubernetes
                                                                                              platform provides the building blocks to achieve these goals.

                                                                                              The fundamental building blocks in a Kubernetes platform are: pod, node, cluster, and control
                                                                                              plane components. A pod is the smallest object deployed, represents a set of running containers,
                                                                                              and is identified by a label that is a name/value pair. A node is a physical or virtual machine that
                                                                                              houses a set of pods as well as the interfaces necessary to run the housed pods. The set of nodes
                                                                                              is called a cluster.

                                                                                              The control plane's components make global decisions about the cluster (for example,
                                                                                              scheduling), as well as detecting and responding to cluster events (for example, starting up a
                                                                                              new pod when workload increases). Some key control plane components include: Kubernetes
                                                                                              API (application programming interface) server, a key/value store, a scheduler, and a set of
                                                                                              controllers. The node controller is one such controller that manages various aspects of nodes.

                                                                                              To ensure adequate performance and continued availability, it is imperative to have some cluster-
                                                                                              level mechanisms for the clusters that are configured using the hosts of the application
                                                                                              components (i.e., microservices). Considering a scenario where the host is a node of a
                                                                                              Kubernetes platform cluster and the application components are running inside of a container
                                                                                              with a pod (i.e., a group of containers) as a deployment artifact, the following cluster-level
                                                                                              mechanisms are required.

                                                                                              For example, one of the most well-known features of Kubernetes is pod-level horizontal scaling.
                                                                                              This means that when services receive more traffic, more instances will be generated across
                                                                                              machines that grow or shrink on demand. Kubernetes supports auto-vertical scaling on the pod
                                                                                              level. Thus, a cluster could be configured to scale the machine on which a pod runs up or down
                                                                                              to more accurately fit the anticipated power needs of any microservice. For example, if certain
                                                                                                                                               5
