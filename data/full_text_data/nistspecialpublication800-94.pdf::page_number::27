                                                   GUIDE TO INTRUSION DETECTION AND PREVENTION SYSTEMS (IDPS)



 How reliable the solution should be and what measures should be used to achieve that reliability, such
  as having multiple sensors monitor the same activity in case a sensor fails, or using multiple
  management servers so that a backup server can be used in case the primary server fails
 Where the other components of the IDPS will be located (e.g., management servers, database servers,
  consoles), and how many of each component are needed to achieve the necessary usability,
  redundancy, and load balancing goals
 With which other systems the IDPS needs to interface, including the following:

    –   Systems to which it provides data, such as security information and event management software,
        centralized log servers, e-mail servers, and paging systems

    –   Systems on which it initiates prevention responses (e.g., firewalls, routers, switches)

    –   Systems that manage IDPS components, such as network management software (for a
        management network) or patch management software (for keeping consoles’ operating systems
        and applications fully up-to-date)
 Whether or not a management network will be used; if so, what its design will be, and if not, how the
  IDPS communications will be protected on the standard networks
 What other security controls and technologies need to be altered to accommodate IDPS deployment,
  such as changing firewall rulesets to allow IDPS components to communicate.
3.3.1.2 Component Testing and Deployment

Organizations should consider implementing the components in a test environment first, instead of a
production environment, to reduce the likelihood of implementation problems disrupting the production
networks. When the components are being deployed to production networks, organizations should
initially activate only a few IDPS sensors or agents, with their prevention capabilities disabled. Because a
new deployment is likely to generate a large number of false positives until fully tuned and customized,
activating many sensors or agents at once might overwhelm the management servers and consoles,
making it difficult for administrators to perform tuning and customization. Many false positives are
likely to be the same across sensors or agents, so it is helpful to identify such false positives either during
the testing process or when deploying the first few sensors or agents, so that those false positives can be
addressed before widespread deployment. A phased deployment of sensors or agents is also helpful in
identifying potential problems with scalability.

Implementing an IDPS can necessitate brief network or system outages for component installation. As
mentioned above, performing a deployment in a test environment can be very helpful in identifying likely
implementation problems, so that they can be mitigated appropriately when the production deployment
occurs.

Appliance-based IDPS components are typically simple to deploy. Administrators might need to perform
software updates or signature updates to ensure the IDPS software is current. Otherwise, administrators
usually just need to provide power and connect network cables, boot the appliance, and perform some
basic configuration (e.g., enter a product license key, assign a name to the sensor).

Software-based IDPS components usually take more time to deploy than appliance-based components.
The organization first needs to acquire the appropriate hardware, which might include purchasing high-
bandwidth network cards and otherwise ensuring that the hardware is robust enough for the IDPS. Next,
administrators need to install an operating system (OS) that is compatible with the IDPS software, and


                                                     3-5
