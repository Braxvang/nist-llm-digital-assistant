                                                                                             NIST SP 800-218                                                                                       SSDF VERSION 1.1



                                                                                             1     Introduction

                                                                                             A software development life cycle (SDLC) 1 is a formal or informal methodology for designing,
                                                                                             creating, and maintaining software (including code built into hardware). There are many models
                                                                                             for SDLCs, including waterfall, spiral, agile, and – in particular – agile combined with software
                                                                                             development and IT operations (DevOps) practices. Few SDLC models explicitly address
                                                                                             software security in detail, so secure software development practices usually need to be added to
                                                                                             and integrated into each SDLC model. Regardless of which SDLC model is used, secure
                                                                                             software development practices should be integrated throughout it for three reasons: to reduce
                                                                                             the number of vulnerabilities in released software, to reduce the potential impact of the
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-218




                                                                                             exploitation of undetected or unaddressed vulnerabilities, and to address the root causes of
                                                                                             vulnerabilities to prevent recurrences. Vulnerabilities include not just bugs caused by coding
                                                                                             flaws, but also weaknesses caused by security configuration settings, incorrect trust assumptions,
                                                                                             and outdated risk analysis. [IR7864]

                                                                                             Most aspects of security can be addressed multiple times within an SDLC, but in general, the
                                                                                             earlier in the SDLC that security is addressed, the less effort and cost is ultimately required to
                                                                                             achieve the same level of security. This principle, known as shifting left, is critically important
                                                                                             regardless of the SDLC model. Shifting left minimizes any technical debt that would require
                                                                                             remediating early security flaws late in development or after the software is in production.
                                                                                             Shifting left can also result in software with stronger security and resiliency.

                                                                                             There are many existing documents on secure software development practices, including those
                                                                                             listed in the References section. This document does not introduce new practices or define new
                                                                                             terminology. Instead, it describes a set of high-level practices based on established standards,
                                                                                             guidance, and secure software development practice documents. These practices, collectively
                                                                                             called the Secure Software Development Framework (SSDF), are intended to help the target
                                                                                             audiences achieve secure software development objectives. Many of the practices directly
                                                                                             involve the software itself, while others indirectly involve it (e.g., securing the development
                                                                                             environment).

                                                                                             Future work may expand on this publication and potentially cover topics such as how the SSDF
                                                                                             may apply to and vary for particular software development methodologies and associated
                                                                                             practices like DevOps, how an organization can transition from their current software
                                                                                             development practices to also incorporating the SSDF practices, and how the SSDF could be
                                                                                             applied in the context of open-source software. Future work will likely take the form of use cases
                                                                                             so that the insights will be more readily applicable to specific types of development
                                                                                             environments, and it will likely include collaboration with the open-source community and other
                                                                                             groups and organizations.

                                                                                             This document identifies secure software development practices but does not prescribe how to
                                                                                             implement them. The focus is on the outcomes of the practices to be implemented rather than on


                                                                                             1   Note that SDLC is also widely used for “system development life cycle.” All usage of “SDLC” in this document is
                                                                                                 referencing software, not systems.



                                                                                                                                                          1
