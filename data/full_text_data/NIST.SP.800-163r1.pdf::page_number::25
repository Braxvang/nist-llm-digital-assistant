                                                                                               NIST SP 800-163 REV. 1                                                             VETTING THE SECURITY OF MOBILE APPS


                                                                                               Organizations that intend to develop apps in-house also should refer to guidance on secure
                                                                                               programming techniques and software quality assurance processes to appropriately address the
                                                                                               entire software development lifecycle [19] [20].

                                                                                               When an app’s source code is not available, its binary code can be analyzed instead. In the
                                                                                               context of apps, the term “binary code” can refer to either byte-code or machine code. For
                                                                                               example, Android apps are compiled to byte code that is executed on a virtual machine, similar
                                                                                               to the Java Virtual Machine (JVM), but they can also come with custom libraries that are
                                                                                               provided in the form of machine code, i.e., code executed directly on a mobile device’s CPU.
                                                                                               Android binary apps include byte-code that can be analyzed without hardware support using
                                                                                               emulated and virtual environments.

                                                                                               4.1.3     Static and Dynamic Testing
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-163r1




                                                                                               Analysis tools are often characterized as either static or dynamic. 11 Static analysis examines the
                                                                                               app source code and binary code and attempts to reason all possible behaviors that might arise at
                                                                                               runtime. It provides a level of assurance that analysis results accurately describe the program’s
                                                                                               behavior regardless of the input or execution environment. Dynamic analysis operates by
                                                                                               executing a program using a set of input use-cases and analyzing the program’s runtime
                                                                                               behavior. In some cases, the enumeration of input test cases is large, resulting in lengthy
                                                                                               processing times. However, methods such as combinatorial testing can reduce the number of
                                                                                               dynamic input test case combinations, reducing the amount of time needed to derive analysis
                                                                                               results [22]. However, dynamic analysis is unlikely to provide 100 percent code coverage [23].
                                                                                               Organizations should consider the technical tradeoff differences between what static and
                                                                                               dynamic tools offer and balance their usage given the organization’s software assurance goals.

                                                                                               Static analysis requires that binary code be reverse engineered when source code is not available,
                                                                                               which is relatively easy for byte code 12 but can be difficult for machine code. Many commercial
                                                                                               static analysis tools already support bytecode as do a number of open-source and academic
                                                                                               tools. 13 For machine code, it is especially hard to track the flow of control across many functions
                                                                                               and to track data flow through variables, since most variables are stored in anonymous memory
                                                                                               locations that can be accessed in different ways. The most common way to reverse engineer
                                                                                               machine code is to use a disassembler or a decompiler that attempts to recover the original
                                                                                               source code. These techniques are especially useful if the purpose of reverse engineering is to
                                                                                               allow humans to examine the code because the outputs are in a form that can be understood by
                                                                                               humans with appropriate skills. However, even the best disassemblers make mistakes [25]. If the
                                                                                               code is being reverse engineered for static analysis, it is preferable to disassemble the machine
                                                                                               code directly to a form that the static analyzer understands rather than creating human-readable
                                                                                               code as an intermediate byproduct. A static analysis tool aimed at machine code is likely to
                                                                                               automate this process.



                                                                                               11   For mobile devices, there are analysis tools that label themselves as performing behavioral testing. Behavioral testing (also
                                                                                                    known as behavioral analysis) is a form of static and dynamic testing that attempts to detect malicious or risky behavior such
                                                                                                    as the oft-cited example of a flashlight app that accesses a contact list [21]. This publication assumes that any mention of
                                                                                                    static or dynamic testing also includes behavioral testing as a subset of its capabilities.
                                                                                               12   The ASM framework [24] is a commonly used framework for byte code analysis.
                                                                                               13   Such as [24–27].

                                                                                                                                                              18
