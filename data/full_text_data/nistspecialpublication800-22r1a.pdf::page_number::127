A STATISTICAL TEST SUITE FOR RANDOM AND PSEUDORANDOM NUMBER GENERATORS FOR CRYPTOGRAPHIC APPLICATIONS



 #include <stdio.h>
 #include <math.h>

 #define B 32
 #define M 6

 int *A;
 static long nonPeriodic;
 unsigned displayBits(FILE*, long, long);

 int main()
 {
   FILE *fp1, *fp2;
   long i, j, count, num;

     A = (unsigned*) calloc(B,sizeof(unsigned));
     fp1 = fopen("template", "w");
     fp2 = fopen("dataInfo", "a");
     num = pow(2,M);
     count = log(num)/log(2);
     nonPeriodic = 0;
     for(i = 1; i < num; i++)
         displayBits(fp1, i,count);
     fprintf(fp2,"M = %d\n", M);
     fprintf(fp2,"# of nonperiodic templates = %u\n", nonPeriodic);
     fprintf(fp2,"# of all possible templates = %u\n", num);
     fprintf(fp2,"{# nonperiodic}/{# templates} = %f\n", (double)nonPeriodic/num);
     fprintf(fp2,"==========================================================\n");
     fclose(fp1);
     fclose(fp2);
     free(A);

     return 0;
 }

 void displayBits(FILE* fp, long value, long count)
 {
   int i, j, match, c, displayMask = 1 << (B-1);

     for(i = 0; i < B; i++)
         A[i] = 0;
     for(c = 1; c <= B; c++) {
        if (value & displayMask)
           A[c-1] = 1;
        else
           A[c-1] = 0;
        value <<= 1;
     }




                                                  F-5
