                                                                       GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE

continue to obscure the distinctions between code and data. Furthermore, the prevalence of unintentional
implementation errors in software applications that process electronic documents continues to plague
active content technology. Since commercial software products underpin most application development,
the overall effect of quality problems can be compounded. Even if an application design is correct and
secure, the implementation may unintentionally contain serious vulnerabilities that can be exploited by
malicious code conveyed in an active content document. An attacker needs only to learn what software
the target is using, find an appropriate exploit, and entice the target to download the document.

3.1.5   Complexity of Software

The trend in application software development is to add more features and greater complexity to products.
Greater complexity requires more code and more interaction among components, resulting in greater
difficulty in discerning the security implications of those interactions, as well as the potential for more
implementation errors. This trend, combined with the competitive pressures facing manufacturers to be
first to the market, the technical and cost barriers to extensive testing, and a marketplace that chooses
functionality over security, assures attackers of continual opportunities in the future.

Web content in particular has become increasingly complex. Many popular Web browsers fail to follow
the numerous applicable standards the same way, as demonstrated by the Acid2 test provided by the Web
Standards Project (WaSP). 4 The Acid2 test is a single page that tests browser compatibility against
HTML4, CSS1, Portable Network Graphics (PNG), and Data URLs. The differences in browser
implementations increase the complexity of Web content by requiring developers to construct content that
compensates for individual browser capabilities rather than relying on a single code base.

3.1.6   Configuration of Software

Understanding a system’s security posture and correctly setting its configuration is an unrealistic
expectation for the general population. The usability of most user interfaces for security configurations is
low. Yet, users are increasingly relied upon to exercise such skills, particularly with their own Web
browsers and desktop software configuration. Even knowledgeable enterprise system administrators are
faced with a similar challenge: confronted with an array of security solutions, including those involving
company proprietary and incompatible mechanisms, they must oversee a fragile patchwork of software
products and devices that demand constant oversight. Additionally, manufacturers use a variety of
mechanisms for patch distribution. Patches may also introduce defects into the system—for example, a
patch might break other applications by modifying the functionality of a library on which those
applications depend. As such, administrators should test each patch before applying it, increasing the
window of exposure for systems on their network.

3.1.7   Privacy Practices of Industry

Organizations are increasingly using their Internet offerings to collect information on individuals, both
directly (e.g., during credit card purchases and free service subscriptions) or indirectly (e.g., via persistent
cookies, Web bugs, and spyware). The latter can expose sensitive data that is stored at the client and
identifiable with the user. These actions exacerbate the aforementioned security problems, since
successful attacks launched against servers can also affect the privacy of individuals whose information
resides there.




4
    More information about WaSP is available at http://www.webstandards.org/.

                                                           3-3
