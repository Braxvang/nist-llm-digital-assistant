                                                             GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



The Common Gateway Interface (CGI) is an industry standard for communicating between a Web server
and another program that is often employed in such instances.

As with browsers, Web servers involve many different kinds of program components and are designed to
be extensible and to interact with databases, legacy systems, and other servers running on an
organization's network. Figure 2-2 illustrates the common components found in most servers [Has00].
The key components present in all Web servers are a basic protocol machine for HTTP, authentication
and access control enforcement, a means to fetch Web pages or resource templates, and a mechanism to
compose and validate the contents of the response. Resource templates are similar to Web pages, but in
addition to text and markup tags, also contain embedded commands and scripts that are executed to
dynamically create the Web page content. The remaining components represent mechanisms that
generate content dynamically through server side scripting or by other means. The specific choices for
extending server technology with specific types of dynamic content mechanisms depend on the
availability of compatible modules from the Web server manufacturer and other module producers.




                         Figure 2-2. Basic Components of a Generic Web Server

CGI scripts were the initial mechanism used to enable Web sites to interact with databases and other
applications. A CGI application executes as a separate process, which can be written in a variety of
programming languages. As an independent process, the application is capable of accessing other hosts
(e.g., a database server) and resources in performing its function, subject to its system security
permissions. Once the application creates the information, the Web server conveys it in a response back
to the browser.

One drawback with this approach is that it consumes a significant amount of computational resources to
spawn a new process for each request. As Web technologies evolved, a number of other programming
interfaces offering performance improvements have arisen, such as the Apache Application Programming
Interface (API), the Netscape Server Application Programming Interface (NSAPI), and the Internet Server
Application Programming Interface (ISAPI). Applications using these interfaces operate quite a bit
differently from a CGI application. For example, an ISAPI application executes as an integral part of the
Web server within the same address space as the server code and can remain in memory or be removed
from memory dynamically to conserve system resources.




                                                  2-7
