                                 GUIDE TO MALWARE INCIDENT PREVENTION AND HANDLING FOR DESKTOPS AND LAPTOPS


instructions on setting up malware test systems and their tools; further discussion of them is outside the
scope of this publication. Malware test systems are helpful not only for analyzing current malware threats
without the risk of inadvertently causing additional damage to the organization, but also for training staff
in malware incident handling.

Forensic approaches involve booting a forensic environment and using it to study the stored information
from an infected host. The toolsets for forensic analysis greatly overlap those for active analysis;
similarly, there are various websites and books available that explain how to create forensic analysis
environments. There are two basic approaches: create a bootable forensic environment on write-protected
removable media, or use a forensic workstation and connect it to the storage of the infected host (e.g.,
hard drive). The motivation for using such a trusted toolkit instead of relying on the information reported
by the infected host’s OS is that malware on the host may have disabled or altered the functionality of the
security tools on the infected host, such as antivirus software, so that they do not report malicious activity.
By running tools from a protected, verified toolkit, incident handlers can gain a more accurate
understanding of the activity on the host.

4.3   Containment

Containment of malware has two major components: stopping the spread of the malware and preventing
further damage to hosts. Nearly every malware incident requires containment actions. In addressing an
incident, it is important for an organization to decide which methods of containment to employ initially,
early in the response. Containment of isolated incidents and incidents involving noninfectious forms of
malware is generally straightforward, involving such actions as disconnecting the affected hosts from
networks or shutting down the hosts. For more widespread malware incidents, such as fast-spreading
worms, organizations should use a strategy that contains the incident for most hosts as quickly as
possible; this should limit the number of machines that are infected, the amount of damage that is done,
and the amount of time that it will take to fully recover all data and services.

In containing a malware incident, it is also important to understand that stopping the spread of malware
does not necessarily prevent further damage to hosts. Malware on a host might continue to exfiltrate
sensitive data, replace OS files, or cause other damage. In addition, some instances of malware are
designed to cause additional damage when network connectivity is lost or other containment measures are
performed. For example, an infected host might run a malicious process that contacts another host
periodically. If that connectivity is lost because the infected host is disconnected from the network, the
malware might overwrite all the data on the host’s hard drive. For these reasons, handlers should not
assume that just because a host has been disconnected from the network, further damage to the host has
been prevented, and in many cases, should begin eradication efforts as soon as possible to prevent more
damage.

Organizations should have strategies and procedures in place for making containment-related decisions
that reflect the level of risk acceptable to the organization. For example, an organization might decide that
infected hosts performing critical functions should not be disconnected from networks or shut down if the
likely damage to the organization from those functions being unavailable would be greater than the
security risks posed by not isolating or shutting down the host. Containment strategies should support
incident handlers in selecting the appropriate combination of containment methods based on the
characteristics of a particular situation.

Containment methods can be divided into four basic categories: relying on user participation, performing
automated detection, temporarily halting services, and blocking certain types of network connectivity.
Sections 4.3.1 through 4.3.4 describe each category in detail.




                                                      25
