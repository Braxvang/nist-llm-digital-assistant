                                                                                              NIST SP 800-204C                                              DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                   APPLICATION WITH SERVICE MESH

                                                                                              based on an HTTP header. There are Kubernetes ingress objects that provide a reverse proxy
                                                                                              based on layer 7, but they do not offer anything more than simple traffic routing. Kubernetes does
                                                                                              offer different ways of deploying pods that some form of A/B testing or canary deployments, but
                                                                                              they are done at the connection level and provide no fine-grained control or fast failback. For
                                                                                              example, if a developer wants to deploy a new version of a microservice and pass 10 % of traffic
                                                                                              through it, they will have to scale the containers to at least 10 â€“ nine for the old version and one
                                                                                              for the new version. Further, Kubernetes cannot split the traffic intelligently and instead balances
                                                                                              loads between pods in a round-robin fashion. Every Kubernetes container within a pod has a
                                                                                              separate log, and a custom solution over Kubernetes must be implemented to capture and
                                                                                              consolidate them.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                              Although the Kubernetes dashboard offers monitoring features on individual pods and their
                                                                                              states, it does not expose metrics that describe how application components interact with each
                                                                                              other or how much traffic flows through each of the pods. Consolidated logging is required to
                                                                                              determine error conditions that cause an application request or transaction to fail. Tracing is
                                                                                              required to trace the sequence of containers that are invoked as part of any application request
                                                                                              based on the application logic that underlies a transaction. Since traffic flow cannot be traced
                                                                                              through Kubernetes pods out of the box, it is unclear where on the chain the failure for the
                                                                                              request occurred.

                                                                                              This is where the service mesh software can provide the needed application services and much
                                                                                              more.

                                                                                              2.2     Service Mesh Software Architecture

                                                                                              Having looked at the various application services required by microservices-based applications,
                                                                                              consider the architecture of service mesh software that provides those services. The service mesh
                                                                                              software consists of two main components: the control plane and the data plane.

                                                                                              2.2.1 Control Plane

                                                                                              The control plane has several components. While the data plane of the service mesh mainly
                                                                                              consists of proxies running as containers within the same pod as application containers, the
                                                                                              control plane components run in their own pods, nodes, and associated clusters. The following
                                                                                              are the various functions of the control plane [9]:

                                                                                                    1. Service discovery and configuration of the Envoy sidecar proxies
                                                                                                    2. Automated key and certificate management
                                                                                                    3. API for policy definition and the gathering of telemetry data
                                                                                                    4. Configuration ingestion for service mesh components
                                                                                                    5. Management of an inbound connection to the service mesh (Ingress Gateway)
                                                                                                    6. Management of an outbound connection from the service mesh (Egress Gateway)


                                                                                                                                                 7
