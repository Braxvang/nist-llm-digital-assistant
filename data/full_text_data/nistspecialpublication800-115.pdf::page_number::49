                                                      TECHNICAL GUIDE TO INFORMATION SECURITY TESTING AND ASSESSMENT



6.4.3    Technical Tools and Resources Selection

Information systems built to execute a security assessment should meet the requirements of the specific
type of assessment and its expected tools. For example, systems for document review should have
applications installed to read documents, track vulnerabilities, and compose reports. Systems designed to
execute tests such as vulnerability assessments and penetration testing are more complex in terms of
system requirements and software tools. Systems for technical assessments can include servers,
workstations, or laptops. Laptops are generally used by traveling assessors, and servers or workstations
may be used if assessors are in a test lab or an onsite location. Assessors may also establish a network
from which to execute techniques—this enables an environment that supports the centralized logging of
activities and servers dedicated to activities that require increased processing power.

The requirements of test systems vary. A system that can handle the processing and memory
requirements of all tools, operating systems, and virtual machines 26 (VM) should be used to lessen the
likelihood of the system crashing during a test. A crash could cause that component of the test to need to
be redone, data to be lost, and test systems to be rebuilt. Processing power and memory requirements are
driven by both the tools used and the speed with which the test team expects to process certain
components. For example, password cracking generally requires increased processing power and
memory, so test teams may wish to have a dedicated password-cracking server. A dedicated system will
allow the team to execute other test objectives during the password-cracking process. Hard drive
requirements will depend on the expected amount of data collected during a test. In the event that long-
term storage of the data is required, a storage method (e.g., independent system or removable media)
should be identified and procured as appropriate.

Tools used by the test team will vary depending on the individual test scope, but the team should have a
core set of tools that it uses and keeps up to date. Depending on the engagement and organization, a team
may use a combination of tools developed in-house, open source tools, and/or commercial or government
off-the-shelf (GOTS) tools. Tools should be obtained from well-established sources. Some organizations
may also have specific tools they require or encourage teams to use—for example, an organization may
purchase a license for a product that all its test teams can use. Many freeware tools are available as well.
Appendix A lists common tools, and describes the purpose of and how it can be obtained. Organizations
should take care to evaluate each tool before using it in a test—this process could range from
downloading the tool from a trusted site to conducting an in-depth code review to ensure that the tool
does not contain malicious code.

Often, tools will determine the operating system required to execute the testing—including the need for
multiple operating systems. Systems may be configured a variety of ways, including single OS, single
OS with VM images, and dual-boot systems. An example of a dual-boot system is a system that can be
booted to either a version of Microsoft Windows or a version of Linux such as Red Hat, Mandrake, or
SuSE. A dual-boot system allows a tester to use two operating systems from a single machine, but this
can be inconvenient because the tester needs to reboot the system to switch between each OS and its
tools.

Another more popular and functional option is to use VMs. Many testing tools require a specific
operating system, and VMs allow testers to use a wider variety of tools more easily because they allow
testers to switch from one OS to another without rebooting the system—enabling them to run multiple
operating systems simultaneously. This has several possible benefits, including logging, documentation

26
     A virtual machine (VM) is software that allows a single host to run one or more guest operating systems. These operating
     systems do not interact and are not aware of each other. A virtual machine monitor is the piece of software that controls
     communication between the physical hardware and the individual VMs.


                                                              6-8
