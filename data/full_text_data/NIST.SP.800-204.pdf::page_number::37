                                                                                             NIST SP 800-204                                                             SECURITY STRATEGIES FOR
                                                                                                                                                         MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                             Appendix Aâ€”Differences between Monolithic Application and Microservices-based
                                                                                                        Application

                                                                                             A.1          Design and Deployment Differences

                                                                                             Conceptually, a monolithic architecture of an application involves generating one huge artifact
                                                                                             that must be deployed in its entirety, while a microservices-based application contains multiple
                                                                                             self-contained, loosely-coupled executables called services or microservices. The individual
                                                                                             services can be deployed independently. In monolithic applications, any change to a certain
                                                                                             functionality of the overall application will involve recompilation and, in some instances, re-
                                                                                             testing of the whole application before being deployed again. However, in the case of
                                                                                             microservices, only the relevant service is modified and redeployed since the independent nature
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                             of the services ensures that a change in one does not logically affect the functionality of another.
                                                                                             In monolithic applications, any increase in workload due to an increase in the number of users or
                                                                                             the frequency of application usage will involve allocating resources to the whole application,
                                                                                             whereas in microservices, the increase in resources can be selectively applied to those services
                                                                                             whose performance is less than desirable, thus providing flexibility in scalability efforts.

                                                                                             Some monolithic applications may be constructed modularly but may not have semantic or
                                                                                             logical modularity. Modular construction refers to how an application may be built from a large
                                                                                             number of components and libraries that may have been supplied by different vendors, and some
                                                                                             components (e.g., database) may be distributed across the network [13]. In such monolithic
                                                                                             applications, the design and specification of APIs may be similar to that in a microservices
                                                                                             architecture. However, the difference between such modularly designed monolithic applications
                                                                                             (sometimes called a classic modular design) and a microservices-based application is that in the
                                                                                             latter, the individual API is network-exposed and therefore independently callable and re-usable.

                                                                                             The differences between monolithic and microservices-based applications is summarized in
                                                                                             Table 3.
                                                                                                       Table 3: Logical Differences between Monolithic and Microservices-based Application

                                                                                                          Monolithic Application                        Microservices-based Application
                                                                                               Must be deployed as a whole.                         Independent or selective deployment of
                                                                                                                                                    services.
                                                                                               Change in a small part of the application            Only the modified services need to be re-
                                                                                               requires re-deployment of the entire                 deployed.
                                                                                               application.
                                                                                               Scalability involves allocating resources            Each of the individual services can be
                                                                                               to the application as a whole.                       selectively scaled up by allocating more
                                                                                                                                                    resources.
                                                                                               API calls are local.                                 Network-exposed APIs enable
                                                                                                                                                    independent invocation and re-usability.


                                                                                                                                               29
