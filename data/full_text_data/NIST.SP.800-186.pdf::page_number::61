NIST SP 800-186                                                  Discrete Logarithm-based Cryptography:
February 2023                                                          Elliptic Curve Domain Parameters

Appendix F. Data Conversion

F.1.   Conversion of a Field Element to an Integer
The following algorithm is used to convert a field element to an integer. The algorithm is given
for reference purposes. Other algorithms that produce an equivalent result may be used.
Input: An element a of the field GF(q)
Output: A non-negative integer x in the interval [0, q−1]
Process:
   1. If q is an odd prime, a is an integer in the interval [0, q−1]. In this case, set x = a.
   2. If q = 2m, a must be a binary polynomial of a degree smaller than m,
              a = a(z) = am−1 zm−1 + am−2 zm−2 + … + a1 z + a0, where each coefficient ai is 0 or 1.
      In this case, set x = a(2) = am−1 2m−1 + am−2 2m−2 + … + a1 21 + a0 20 computed over ℤ, not
      modulo 2.
   3. Output x.

F.2.   Conversion of an Integer to a Field Element
The following algorithm is used to convert an integer to a field element. The algorithm is given
for reference purposes. Other algorithms that produce an equivalent result may be used.
Inputs: Non-negative integer x and q, where q is an odd prime or q = 2m
Output: An element a of the field GF(q)
Process:
   1. Set x = x mod q.
   2. If q is an odd prime, x is an integer in the interval [0, q−1]. In this case, set a = x.
   3. If q = 2m, x can be uniquely written as x = am−1 2m−1 + am−2 2m−2 + … + a1 2 + x0, where
      each coefficient xi is 0 or 1. In this case, set x = a(z) = am−1 zm−1 + am−2 zm−2 + … + a1 z1 +
      a0 20;
   4. Output a.

F.3.   Conversion of an Integer to a Bit String
The following algorithm is used to convert an integer to a bit string. The algorithm is given for
reference purposes. Other algorithms that produce an equivalent result may be used.
Inputs: Non-negative integer x in the range 0 ≤ x < 2l
Output: Bit-string X of length l
Process:
   1. The integer x can be uniquely written as x = xl−1 2l−1 + xl−2 2l−2 + … + x1 2 + x0, where
      each coefficient xi is 0 or 1.
   2. Set X to the bit string (xl−1, xl-2, …, x1, x0).



                                                 50
