                                                                              GUIDE TO SECURE WEB SERVICES



5.    Secure Web Service-Enabling of Legacy Applications

Migrating applications to Web services can expose the legacy application and backend databases to new
threats that were not considered when the applications were initially developed. Securely enabling Web
services on legacy applications requires customized Web service adapters to be securely coded and
implemented. Like any Web service, these adapters must be resistant to attack. Authentication,
authorization and access control are among the first concerns to address when migrating a legacy
application to a Web service architecture.

5.1   Legacy Authentication to Web Services

Web applications are typically designed for client-server communication. SSL/TLS allows both the client
and server to authenticate their PKI certificates, yet in most situations, Web servers are not configured to
authenticate clients’ SSL/TLS certificates. Instead, they rely on less strong authentication, such as a
username and password. Authenticating both the client and server certificates can allow for strong
authentication between Web services. Authentication using Web service technologies can be achieved
using WS-Security as described in Section 3.1.2.

To Web service-enable a standalone legacy application using its own proprietary authentication
mechanism requires some mechanism for mapping Web service credentials to their associated legacy
credentials and an adapter for mapping incoming or outgoing Web service messages to the legacy
application’s protocols. Typically, these credentials are in the form of a username and password
combination; in some cases, these are stored or transmitted via an insecure encryption scheme. The
legacy adapter should encrypt and securely store the legacy credentials when they are not in use. In
addition, the adapter connection to the legacy application should be secured using technologies like
SSL/TLS or IPsec.

Whenever possible, legacy adapters should not be developed from scratch. A robust, well-tested third-
party product is likely to be more secure and reliable than a from-scratch adapter. There are a number of
COTS products (e.g., middleware solutions) capable of integrating with legacy applications.

Regardless of how the Web service-to-legacy adapter is implemented, it should include logging sufficient
to satisfy the audit and reporting requirements discussed in Section 5.5. Ideally, the Web service and
legacy application should support a single authentication method throughout the end-to-end solution.

5.2   Authorization and Access Control in Legacy Applications

If the legacy Web application performs its own user authorizations (rather than relying on a centralized
authorization service provided by a portal or SSO server), the application process that allocates
permissions and privileges to users and processes must be correct and unable to be subverted. The
authorization process will have to trust the authentication system’s assurance that the users and processes
to be authorized have already been properly authenticated.

If the authorization information used by the application will be stored and managed in a directory (for
example, the LDAP or X.500 directory used by the PKI), the transmission path over which authorization
information will be sent from the directory to the application’s authorization process should be secured.
When the authorization data is stored in the directory, it should be protected by the directory’s access
controls and, when feasible, by encryption.




                                                    5-1
