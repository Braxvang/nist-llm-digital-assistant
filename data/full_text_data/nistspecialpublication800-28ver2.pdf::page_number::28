                                                                    GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE




         Servers routinely log information that identifies users indirectly by recording client host names
         and even, when available, user names, and gives information about the request. Users may
         not be aware that such logs are being collected and most likely have no idea how that
         information is used, how long it is retained or whether it is shared with third parties. There are
         few legal rules or ethical guidelines in many countries governing the disposition of log
         information, such as the sale to other organizations where they may be combined with other
         databases (e.g., online address listings) to infer further information.


4.1     Client-Side Technologies

Two main factors should be considered when attempting to gauge the risk involved with active content
technologies on the client side: the capabilities of the programming language, and the breadth and
strength of controls in place within the execution environment to enforce policy. Different technologies
offer a distinctive range of functionality regarding the granularity and types of actions that can be
performed on computational resources, such as windows, files, or network ports. Similarly, security
policy controls may provide different levels of granularity, enforced at different points of time (e.g.,
vetting the code before it executes versus restricting its activities as it runs), resulting in varied degrees of
effectiveness. For instance, JavaScript implemented within a browser environment normally prevents a
downloaded script from reading or writing files by making file objects unavailable. In contrast, an
ActiveX control, once accepted, can have complete reign over the entire file system. Determining the
acceptable level of risk may involve other factors, such as the maturity of the technology, the scope of its
intended use, the experience of the organization with the technology, and other controls the organization
has in place.

4.1.1    PostScript

One of the earliest examples of active content is PostScript document representation [Ado99], still in use
today. PostScript is a page description language from Adobe that is a de facto standard in commercial
typesetting and printing houses. PostScript commands are language statements in ASCII text that are
translated into the printer's machine language by a PostScript interpreter built into the printer. PostScript
can also be interpreted by software on most computer platforms and drawn on to computer screens or an
attached drawing device. The interpreter uses scalable fonts, eliminating the need to store a variety of
font sizes.

A PostScript file contains a document description, which is specified in the PostScript page description
language. The language is a powerful interpreted language, comparable to many programming languages.
Thus, PostScript documents inherently entail active content. For example, the language defines
primitives for file manipulation, which can be used in a PostScript document to modify arbitrary files
when the document is displayed or printed. Unfortunately, the operations can be abused by intentionally
embedding malicious file commands within an otherwise harmless image, so that in displaying the image
the interpreter also causes damage.

An early exploit of PostScript technology involved the language's ability to set a password held by the
interpreter. In some hardware implementations of the language interpreter, if the password were set, it
remained in non-volatile memory and prevented subsequent documents from being printed unless they
contained the same password. An attacker sending a password-setting document could disable the printer
in this way, requiring hardware replacement to rectify the situation [Cle90, Spe90]. Some PostScript
interpreters can be set to disable potentially harmful primitives. For example, ghostscript, a well-known
PostScript interpreter, recognizes the command-line option “-dSAFER” that disables file operations,



                                                        4-2
