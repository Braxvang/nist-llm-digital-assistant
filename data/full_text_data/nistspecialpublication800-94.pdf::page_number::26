GUIDE TO INTRUSION DETECTION AND PREVENTION SYSTEMS (IDPS)



      Viewing the code can help analysts to determine why particular alerts were generated, helping to
      validate alerts and identify false positives. The ability to edit all detection-related code and write new
      code (e.g., new signatures) is necessary to fully customize certain types of detection capabilities. For
      example, a particular alert might be generated by a complex series of events involving several code
      modules; customizing the IDPS to understand organization-specific characteristics might not be
      possible without editing the code directly. Editing the code requires programming and intrusion
      detection skills; also, some IDPSs use proprietary programming languages, which would necessitate
      the programmer learning a new language. Bugs introduced into the code during the customization
      process could cause the IDPS to function incorrectly or fail altogether, so administrators should treat
      code customization as they would any other alteration of production systems’ code.
Administrators should review tuning and customizations periodically to ensure that they are still accurate.
For example, whitelists and blacklists should be checked regularly and all entries validated to ensure that
they are still accurate and necessary. Thresholds and alert settings might need to be adjusted periodically
to compensate for changes in the environment and in threats. Edits to detection code might need to be
replicated whenever the product is updated (e.g., patched, upgraded). Administrators should also ensure
that any products collecting baselines for anomaly-based detection have their baselines rebuilt
periodically as needed to support accurate detection.

3.2.4     Prevention Capabilities

Most IDPSs offer multiple prevention capabilities; the specific capabilities vary by IDPS technology type.
IDPSs usually allow administrators to specify the prevention capability configuration for each type of
alert. This usually includes enabling or disabling prevention, as well as specifying which type of
prevention capability should be used. Some IDPS sensors have a learning or simulation mode that
suppresses all prevention actions and instead indicates when a prevention action would have been
performed. This allows administrators to monitor and fine-tune the configuration of the prevention
capabilities before enabling prevention actions, which reduces the risk of inadvertently blocking benign
activity.

3.3     Management

Most IDPS products offer similar management capabilities. This section discusses major aspects of
management—implementation, operation, and maintenance—and provides recommendations for
performing them effectively and efficiently. It also briefly discusses the skills needed for IDPS
management and provides recommendations for gaining these skills.

3.3.1     Implementation

Once an IDPS product has been selected, the administrators need to design an architecture, perform IDPS
component testing, and deploy and secure the IDPS components. Sections 3.3.1.1 through 3.3.1.3
provide more information on these actions.

3.3.1.1 Architecture Design

The first step in IDPS implementation is designing an architecture. Architectural considerations include
the following:

 Where the sensors or agents should be placed




                                                       3-4
