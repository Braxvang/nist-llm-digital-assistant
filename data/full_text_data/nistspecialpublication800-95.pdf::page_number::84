                                                                                 GUIDE TO SECURE WEB SERVICES



If standard user/group/world authorizations are inadequately fine-grained, the application’s authorization
system may have to implement its own access control mechanism (Section 3.5.1 discusses access control
models).

Because of the additional requirements for access control for systems that contain or process sensitive
information, it may be necessary for such applications to augment the underlying file system’s access
controls by ensuring that the data that require additional protection are encrypted when they are written by
the application to a file system directory (or database). In practical terms, encryption of data at rest is a
form of access control: access to the encrypted data is controlled by limiting access to the cryptographic
keys required to decrypt that data.

The application’s design should implement separation of duties, roles and privileges for subjects as well
as minimize the resources needed by the application process. When designing the application, the actions
that any component will be allowed to perform should be explicitly specified. Custom processes and
scripts should not be granted or allowed to retain privileges that would enable them to perform actions not
expressly defined for them. Instead, each process in the application should be designed to do the
following:

 Perform only the actions explicitly defined
 Strictly enforce the processing order defined
 Call only those other processes and libraries absolutely needed to invoke
 Execute only one task at a time
 Initiate a new task only after the previous task has completed
 Access only data absolutely needed to successfully perform tasks.
5.3   Extending Non-Web Applications to Be Able to Participate in SOAs

Allowing non-Web applications such as database and directory server applications to securely interact
with Web services involves many of the same measures as enabling Web applications. The same
procedures are used for creating a Web service and extending an existing application’s functionality as a
discoverable Web service.

Web services can extend any application, as long as there are robust and easy-to-use business objects or
an API built into the application. It will be more difficult to Web service-enable applications that have
business logic built into the graphical user interface (GUI), because the business logic must usually be
rewritten to accommodate the new Web service extension of the business object.

5.4   Public Key Enabling Concerns Specific to Web Services and SOAs

Both SSL/TLS and WS-Security, the primary methods for securing SOAP messages, rely on PKI
certificates for authentication. Many legacy applications only support username and password
authentication over time. Organizations may benefit from transitioning these legacy applications to PKI
authentication. Initially, the legacy application should provide the capability for users to test their
certificates while maintaining username password access. Then, the application should allow users who
have certificates to authenticate using these certificates while still allowing users to authenticate with their
existing usernames and passwords. Once users have become familiar with certificate-based
authentication, the application should publish a date after which usernames and passwords will no longer



                                                      5-2
