                                                                                 GUIDE TO SECURE WEB SERVICES



can be improved, allowing the system to make informed decisions when faced with few resources. For
example, a Web service operating on a saturated network may use prioritization to allow only the highest
priority traffic to be processed while letting the other traffic wait until network traffic returns to normal.

Standards are beginning to be developed and released to support availability of Web services. In
particular, two competing standards are available that provide reliable messaging support: WS-Reliability
and WS-ReliableMessaging, discussed in Section 3.8.3. Standards and techniques for providing QoS,
detecting, resisting and recovering from DoS attacks are still under development. Sections 3.8.4 and 3.8.5
discuss two common design or implementation defects that can lead to a loss of availability without the
malicious intent: deadlock and recursion.

The standards state that other QoS parameters, such as rate of failure or average latency, are out of scope
because they are usually dealt with by lower layer protocols. For Web services to truly support QoS,
existing QoS support must be extended so that the packets corresponding to individual Web service
messages can be routed accordingly.

3.8.3   Reliable Messaging

The WS-Reliability and WS-ReliableMessaging standards provide guaranteed message delivery using one
of the following semantics:

 At-Least-Once semantics, which is a guarantee that a message will be delivered.
 At-Most-Once semantics, which is a guarantee that a duplicate message will not be delivered.
 Exactly-Once semantics, which is a guarantee that a message will be delivered without duplication.
In addition to the message guarantee semantics, both standards provide a mechanism for sending
messages in order. These features are crucial for critical applications that may rely on Web services.
Previously, implementers would have to develop their own reliability mechanisms, which could prove
costly or ineffective in practice. With the advent of these standards, robust implementations can be
developed and used in the development of reliable Web services. Nevertheless, the existence of two
competing standards makes it difficult for organizations to fully adopt either standard.

3.8.4   Handling Service Deadlock

Deadlock is a condition that occurs when two processes are each waiting for the other to complete before
proceeding. The result is that neither process can continue. Deadlocks can occur whenever the following
four conditions are present in a system:

 Mutual exclusion. A resource can only be accessed by one process at a time.
 Hold and wait. Processes already holding resources can request more resources.
 No preemption. Only the process holding a resource has the power to release it.
 Circular wait. Processes form a circular chain of waiting.
Ideally, either the programs that experience deadlock or the underlying operating system would be able to
automatically detect and recover from the deadlock, but it is difficult for individual systems in a SOA to
detect deadlocked SOAP requests. SOA environments are susceptible to both local and distributed
deadlocks. In a local deadlock, a provider is poorly designed and has an internal deadlock preventing it




                                                     3-37
