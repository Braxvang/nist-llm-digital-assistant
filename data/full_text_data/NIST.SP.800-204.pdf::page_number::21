                                                                                             NIST SP 800-204                                                          SECURITY STRATEGIES FOR
                                                                                                                                                      MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                                •   When components are linked together using an asynchronous event-handling mechanism,
                                                                                                    the impact of a component’s outage is temporary since the required functions will
                                                                                                    automatically execute when the component begins running again, thus maintaining the
                                                                                                    overall integrity of the business process.
                                                                                                •   By aligning the service definition to business capabilities (or by basing the decomposition
                                                                                                    logic for the overall application functionality based on business processes or capabilities),
                                                                                                    the overall architecture of the microservices-based system is aligned with the
                                                                                                    organizational structure. This promotes an agile response when business processes
                                                                                                    associated with an organizational unit change and consequently require that associated
                                                                                                    service to be modified and deployed.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                                •   The independent functional nature of a microservice promotes better reusability of the
                                                                                                    code across applications.
                                                                                             2.11 Disadvantages of Microservices

                                                                                                •   Multiple components (microservices) must be monitored instead of one single
                                                                                                    application. A central console is needed to obtain the status of each component and the
                                                                                                    overall state of the application. Therefore, an infrastructure must be created with
                                                                                                    distributed monitoring and centralized viewing capabilities.
                                                                                                •   The presence of multiple components creates an availability problem since any
                                                                                                    component may cease functioning at any time.
                                                                                                •   A component may have to call the latest version of another component for some clients
                                                                                                    and call the previous version of the same component for another set of clients (i.e.,
                                                                                                    version management).
                                                                                                •   Running an integration test is more difficult since a test environment is needed wherein
                                                                                                    all components must be working and communicating with each other.
                                                                                                •   When interactions within a microservices-based application are designed as API calls, all
                                                                                                    the necessary processes required for secure API management must be implemented.
                                                                                                •   The microservices architecture can break down the practice of defense in depth. Many
                                                                                                    architectures have a web server running in a DMZ that is expected to be compromised,
                                                                                                    then a backend service which the web server talks to, and then finally a database that the
                                                                                                    backend service talks to. The backend service can act as a more hardened layer between
                                                                                                    the exposed web server and the sensitive data in the database. The microservice
                                                                                                    architecture tends to collapse this and now the web server and back end service are
                                                                                                    broken down into microservices potentially more exposed than in the previous model.
                                                                                                    This can result in fewer layers of protection between the caller and sensitive data. Hence
                                                                                                    it is critical to securely design and implement the microservices themselves as well as the
                                                                                                    service mesh or API gateway deployment model.




                                                                                                                                             13
