GUIDE TO INTRUSION DETECTION AND PREVENTION SYSTEMS (IDPS)



 How accurately it can determine the success or failure of attacks.
 What response mechanisms it offers, excluding prevention responses (which are covered in Section
  9.2.4). Examples include logging events (both locally and to remote log servers), displaying console
  alerts, and sending Simple Network Management Protocol (SNMP) traps, e-mails, text messages, and
  pages. The criterion also includes effective prioritization of events, such as taking different actions
  when a certain type of event occurs or when an event involves a certain system or service.
 How administrators can customize detection capabilities by modifying signatures, policies, and other
  settings. Examples include altering whitelists, blacklists, and thresholds; customizing code to reduce
  false positives or false negatives; and writing new signatures or policies from scratch or based on
  samples or frameworks. Evaluators should consider how easily the customizations can be performed
  (e.g., through a GUI, through editing text files). If the customizations require knowledge of a
  programming language, additional considerations include the following:

      –    Is the language commonly used or is it a specialty/proprietary language that administrators would
           need to learn?

      –    How complex and powerful is the language?

      –    Does the product offer a development environment or other tools to assist in customization, such
           as syntax checking or virtual machines for testing customizations before implementing them?

      –    When the product is updated or upgraded, how are code customizations preserved?
 How effectively the product can use data from other sources, such as vulnerability scan results and
  logs from other IDPSs, to correlate events and improve the prioritization of alerts.
9.2.4      Prevention Capabilities

Organizations should determine whether or not the IDPS solution may need to perform prevention
actions, including future needs, and evaluate the prevention capabilities of each candidate product. Most
prevention capabilities are specific to a particular type of IDPS; information on common capabilities is
presented in Sections 4 through 7 for each IDPS product type. When available, it is generally preferred to
have a product that has multiple prevention capabilities instead of only one, because some methods are
more effective than others in certain situations and ineffective in others. All IDPS products should offer
considerable granularity in configuration options for prevention methods, such as enabling or disabling
them only for particular alerts, suppressing prevention methods for hosts on whitelists, and allowing
administrators to specify which prevention method should be used for each alert if multiple methods are
available. Some products offer additional granularity that may be beneficial, such as performing
prevention actions only if a certain system is being attacked.

9.3       Performance Requirements

Comparing the performance of IDPS products is challenging for the following reasons:

 Performance is highly dependent on the configuration and tuning of each product. Although testing
  can be performed using the default settings of each product, some products are designed with the
  assumption that they will need extensive customization and tuning.
 Performance and detection are often at odds; having more complex and robust detection capabilities
  often causes poorer performance because they require more processing capability and memory.




                                                      9-6
