SP 800-130                                                            August 2013



6.2 Key Metadata
This section lists and describes the metadata that may be associated with keys. Key
metadata is defined as information associated with a particular key that is explicitly
recorded and managed by the CKMS. In this Framework, the key associated with a
particular set of metadata elements is referred to as “the key”.

The metadata that may be appropriate for a trusted association with a key should be
selected by the CKMS designer, based upon a number of factors, including the key type,
the key lifecycle state, and the CKMS Security Policy. A CKMS need not associate all
applicable metadata with a given key, and a CKMS may not associate any metadata with
some or all of the keys. See item u) in Section 6.2.1.

6.2.1 Metadata Elements
The following are typical metadata elements and their descriptions:
    a) Key Label: A key label is a text string that provides a human-readable, and
       perhaps machine-readable, set of descriptors for the key. Examples of key labels
       include: “Root CA Private Key 2009-29” and “Maintenance Secret Key 2005.”

   b) Key Identifier: This element is used by the CKMS to select a specific key from a
      collection of keys. A key identifier is generally unique in a security domain. For
      public and private keys, a key identifier can be a hash value or portion of the hash
      value of the public key or can be assigned by the CKMS.

   c) Owner Identifier: This element specifies the identifier (or identifiers) of the
      entity (or entities) that owns (or own) the key.

   d) Key Lifecycle State: A key lifecycle state is one of a set of finite states that
      describe the current permitted conditions of a cryptographic key (see Section 6.3).

   e) Key Format Specifier: This element is used to specify the format for the key.
      This can be accomplished by reference to the structure using object identifiers.
      For example, an RSA public key consists of the modulus and a public exponent.
      The format specifier should specify the sequence in which these two values are
      stored and the format in which each value is encoded. The Internet Engineering
      Task Force (IETF) has defined an object identifier for storing different forms of
      public keys, such as DSA, DH, RSA, EC, RSAPSS, and RSAOAEP keys. The
      object identifiers and related public key structures are defined in the following
      Internet RFCs: [RFC 3279], [RFC 4055], and [RFC 5480].

   f) Product used to create the Key: This element specifies which cryptographic
      product was used to create or generate the key.

   g) Cryptographic Algorithm using the Key: This element specifies the
      cryptographic algorithm that is intended to use the key. Examples include DSA,
      ECDSA, RSA, AES, TDEA, and HMAC-SHA1.

                                           32
