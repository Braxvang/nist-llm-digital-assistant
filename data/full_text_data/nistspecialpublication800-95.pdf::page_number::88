                                                                                GUIDE TO SECURE WEB SERVICES



An improperly configured XML Parser is susceptible to several attacks:

 Large or recursive XML documents can overload the XML parser and lead to a DoS.
 XML documents can be configured to refer to and use local files. This can lead to an attacker gaining
  knowledge about the local system.
 External references to other XML documents or XML schemas can be used to bypass XML
  validators.
All of these XML parser security concerns can be overcome by properly configuring the system. In
particular, oversized XML documents can be prevented by configuring the Web server on which the Web
service is running to only accept messages up to a certain size. When the oversized XML document is
passed to the Web server, it will prevent the entire document from reaching the Web service. The other
XML attacks can be prevented by developing robust local XML schemas for the Web service and
configuring the XML parser to validate all incoming XML traffic against the local schemas rather than
against remote schemas provided by the incoming traffic. Additionally, one of the main functions of an
XML gateway is to provide a robust defense against XML attacks that target the XML parser; XML
gateways provide a robust system for detecting and validating XML traffic before it reaches the Web
service and can be configured to notify appropriate personnel when such an attack has been attempted.

6.3     Languages for Secure Web Service Development

Each of the languages discussed in this section has its own set of sound security-related practices, but all
benefit from a common set of secure coding practices that include the following:

 Do not include sensitive data in user-viewable source code (i.e., Web page code that can be displayed
  by the user using the view source function of his/her browser) or configuration files.
 Assemblies that support untrusted or partially trusted callers should never expose objects from
  assemblies that do not allow untrusted or partially trusted callers.
 Allow untrusted or partially trusted callers only after the developer has carefully reviewed the code,
  ascertained the security implications, and taken the necessary precautions to defend against attack.
 Disable tracing, debugging, and other diagnostic development or testing-related functions, tools, and
  hooks before application deployment.
 Do not issue verbose error information to the user.
6.3.1    Procedural Languages

The procedural languages summarized in the following sections are considered to be relevant to Web
service design and development. This does not preclude the importance or relevance of other languages
that are not explicitly described; rather, these are the languages most commonly used to implement Web
services.

6.3.1.1 C and C++

There are many cases where Java, .NET, or other forms of managed code are not practical, even when
implementing Web services. In particular, Web services based on C and C++ do not require the overhead
of a framework to implement Web services specifications. Java EE and .NET can take up hundreds of
megabytes of space, which may not be available on a particular system (usually a legacy or embedded



                                                     6-2
