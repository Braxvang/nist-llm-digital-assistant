                                                                               GUIDE TO SECURE WEB SERVICES



information to all existing services it could interact with. When the SOA becomes large and dynamic,
adding a new service can become time and resource intensive.

In the brokered trust model, an independent third party acts as a trusted third party (TTP) for the Web
service. The requester and provider interface with the third party for a variety of security services.
Unlike the pairwise trust model, Web services using the brokered trust model need to be designed with
the broker’s interface in mind, so that identity information can be properly retrieved by the Web service.
This approach eases the distribution of identity information between Web services; each Web service will
only need to verify the identity of the trust broker rather than the identity of all Web services in the SOA.

A federated trust model allows Web services from different organizations to seamlessly interact with one
another via various federation mechanisms. It builds upon both the brokered and pairwise trust models by
allowing organizations to use their own central trust brokers while relying on pairwise trust or brokered
trust between organizations. Each organization that wishes to federate must do so following complex
business procedures and protocols, but the end result allows the Web services of each organization to
interact with few or no changes to their original configuration.

Another commonly used Web service architecture is the perimeter defense strategy. Devices known as
XML gateways are placed between providers and requesters. An XML gateway acts as a proxy for the
Web service by performing the security-related functionality in its place. Although XML gateways are
useful tools in an organization’s security strategy, they are not a panacea. Should an attacker bypass the
XML gateway, all internal Web services will be vulnerable to attack. Internal Web services must be
designed, developed, and configured securely.

2.3.5    Requirements for Secure Software

All software, including Web services, needs to satisfy requirements for performance, cost, usability, and
security. Examples of possible requirements for secure software are predictability, correctness, and
availability.

2.4     Meeting the Requirements for Securing Web Services

Several organizations, including OASIS, W3C, the Liberty Alliance, and various members of industry
have put together numerous security standards and techniques for securing Web services. For the most
part, these standards and techniques all complement or extend one another, but there are some conflicting
or competing standards. This section provides an overview of the various standards and how they can be
used to meet security requirements and protect against threats to Web services. Section 3 discusses the
most widely accepted standards, technologies, and techniques in detail.

2.4.1    Secure Web Service Standards Stack

The open standards communities that created Web services developed a number of security standards for
Web services. Figure 2-9 illustrates a notional reference model for Web services security standards. This
reference model maps the different standards to the different functional layers of a typical Web service
implementation. These layers are modeled after the OSI Reference Model but are not intended to be
interpreted as strictly hierarchical.




                                                    2-11
