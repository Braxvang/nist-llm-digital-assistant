                                                                                GUIDE TO SECURE WEB SERVICES



vulnerabilities associated with the RDBMS itself, such as a buffer overflow. Patches for all known
RDBMS vulnerabilities should be downloaded and applied to production databases regularly.

INSERT, UPDATE, or DELETE statements can be used to modify data in the database. An attacker may
also route information from the database to a remote computer. Many SQL applications leverage
packages of stored procedures, which may be exploited by an attacker if they provide functionality to
change passwords or perform other sensitive transactions.

Dynamically generated SQL statements, which are commonly used in Web service-enabled database
applications, are particularly vulnerable to SQL injection attacks. For example, a dynamic SQL statement
used to request a page on a SOA portal could be manipulated to insert other SQL statements in the
URL/URI pointing to that portal page, such as statements to retrieve information from the database and
sends it to the portal via the database application’s Web service frontend that interfaces with the portal.
Because most database servers are deployed behind a firewall, this form of SQL injection can also be
used to attack other hosts and applications on the internal network. As noted earlier, custom stored
procedures can also be executed in this way.

A.6.2     XML Injection

XML injection can occur when user input is passed directly into an XML document or stream, similar to
cross-site scripting or SQL injection. XML injection is often used to manipulate XPath queries to gain
access to information in XML content that would otherwise be inaccessible to the attacker. XML
injection may also target XQuery queries and XACML messages. Because XQuery is a successor to
SQL, XML injections against XQuery can achieve objectives similar to those of SQL injection attacks.
XML injections targeting XACML may allow the attacker to gain unauthorized access to other portions
of the Web service (or its host) or modify the Web service’s security policies. XML injection may also
allow the attacker to perform the equivalent of a cross-site scripting attack, in which requesters of a valid
Web service have their requests transparently rerouted to an attacker-controlled Web service.

A.6.3     Cross-Site Scripting

As noted in a previous section, an attacker may use XML injection to perform the equivalent of a cross-
site scripting attack, in which requesters of a valid Web service have their requests transparently rerouted
to an attacker-controlled Web service, most often one that performs malicious operations. UDDI
references may be compromised through cross-site scripting, resulting in a reference to a malicious
program instead of a valid Web service. Potential damages resulting from cross-site scripting attacks
include:

 Exposure of SSL-encrypted connections
 Access to restricted Web services or resources via the attacked service
 Violation of domain security policies
 Rendering Web portal content returned by the attacked service unreadable or difficult to use,
  defacement of portal pages, addition to portal pages of annoying banners, popup windows,
  animations, offensive material
 Inserting spyware, malicious code, etc. into visiting browsers
 Violations of user privacy
 Causing DoS attacks (e.g., by continuously spawning new processes on the Web service host)


                                                    A-11
