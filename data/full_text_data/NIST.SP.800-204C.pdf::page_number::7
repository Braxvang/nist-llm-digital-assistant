                                                                                              NIST SP 800-204C                                             DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                  APPLICATION WITH SERVICE MESH

                                                                                              Executive Summary

                                                                                              Cloud-native applications have evolved into a standardized architecture consisting of the
                                                                                              following components:

                                                                                                 •   Multiple loosely coupled components called microservices (often or typically
                                                                                                     implemented as containers)
                                                                                                 •   An application services infrastructure that provides services such as secure
                                                                                                     communication, authentication, and authorization for users, services, and devices (e.g.,
                                                                                                     service mesh)
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                              Due to security, business competitiveness, and its inherent structure (loosely coupled application
                                                                                              components), this class of applications needs a different application, deployment, and runtime
                                                                                              monitoring paradigm – collectively called the software life cycle paradigm. DevSecOps
                                                                                              (consisting of acronyms for Development, Security, and Operations, respectively) is one of the
                                                                                              facilitating paradigms for the development, deployment, and operation of these applications with
                                                                                              primitives such as continuous integration, continuous delivery, and continuous deployment
                                                                                              (CI/CD) pipelines.

                                                                                              CI/CD pipelines are workflows for taking the developer’s source code through various stages,
                                                                                              such as building, functional testing, security scanning for vulnerabilities, packaging, and
                                                                                              deployment supported by automated tools with feedback mechanisms. For the purpose of this
                                                                                              document, the entire set of source code involved in the application environment is classified into
                                                                                              five code types:
                                                                                                 1. Application code, which embodies the application logic for carrying out one or more
                                                                                                    business functions.
                                                                                                 2. Application services code for services such as session establishment, network connection
                                                                                                    etc.
                                                                                                 3. Infrastructure as code, which are computing, networking, and storage resources in the
                                                                                                    form of a declarative code.
                                                                                                 4. Policy as code, which are runtime policies (e.g., zero trust) expressed as a declarative
                                                                                                    code .
                                                                                                 5. Observability as code for the continuous monitoring of the health of the application
                                                                                                    where monitoring functions are expressed as a declarative code.

                                                                                              Thus, separate CI/CD pipelines can be created for all five code types. The functions performed
                                                                                              by each of these code types is also described to highlight the roles that they play in the overall
                                                                                              execution of the application.

                                                                                              Though cloud-native applications have a common architectural stack, the platform on which the
                                                                                              components of the stack run may vary. The platform is an abstraction layer over a physical (bare
                                                                                              metal) or virtualized (e.g., virtual machines, containers) infrastructure. In this document, the
                                                                                              chosen platform is a container orchestration and resource management platform (e.g.,
                                                                                                                                               v
