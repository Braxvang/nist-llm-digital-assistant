the decrypted and re-encrypted file would be placed in the sharing user’s file space. This
would require significant processing overhead and a key management protocol for
exchanges between the owner and the sharing user, or between the file system
management process and the sharing user. This process requires proper protection for
these new keys at the same security strength as the original key protecting that file.

Another option is for the sharing user to be provided with the encrypted file and the
owner’s decryption key that could be used to decrypt all of the owner’s files, including
the one provided to the sharing user. System overhead is reduced, and it may be possible
to protect the key from third-party administrators, but it is unlikely that the owner would
agree that the requester should be granted access to all files protected under the common
key.

Having provided more extreme examples in the previous two cases, the following is a
more common approach that is used. In this case, each user on the system has an
asymmetric key pair. Each owner’s file is encrypted under a different randomly generated
symmetric File Encrypting Key (FEK). The FEK is then encrypted using the public key
of the owner and stored with the encrypted file. When the owner of a file wants to share it
with another user, the owner decrypts the encrypted FEK (using her private key) and then
encrypts the FEK using the sharing user’s public key. The encrypted file and re-encrypted
FEK can then be provided to the requester. This system has several advantages. First, the
owner needs to manage only a single asymmetric key pair. Second, it permits easier file
sharing between users. Third, it is very efficient because files do not have to be re-
encrypted in order to be shared. Finally, the system need not manage any keys separately,
since the asymmetric keys are managed by the owners, and the FEKs are stored in
encrypted form with the files.

The owner can, of course, use different keys to encrypt different files or sets of files. The
fewer files that the owner chooses to encrypt with a given key results in more keys and
associations (e.g., associations of keys with file identities, file groups, individual
identities, or access groups) that would need to be maintained.

Another important concept within an encrypted file system that must be considered is
how data recovery is implemented. If a user loses his keys, without a data recovery
capability within the system, the user’s data is permanently lost. As such, it is vital that
some form of data recovery, such as master administrator passwords, be included.41 This
requires a file encryption system that allows multiple passwords to decrypt the file, one
of which is provided to the user, and the second is provided to the administrator, in the
form of a master administrator password. Another possibility is that the administrator has
a method of storing the user’s passwords for use only when the user has lost or forgotten
their password.

When the scope of the system expands from a pair of individuals to a large network or
internet-work, the factors associated with the management of keys can become unwieldy.
Key management challenges associated with large systems include the following:

41
     The specifics of how data recovery is accomplished are beyond the scope of this document.

                                                      57
