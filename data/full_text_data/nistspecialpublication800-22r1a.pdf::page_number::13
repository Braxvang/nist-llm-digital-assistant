A STATISTICAL TEST SUITE FOR RANDOM AND PSEUDORANDOM NUMBER GENERATORS FOR CRYPTOGRAPHIC APPLICATIONS



1.      Introduction to Random Number Testing

The need for random and pseudorandom numbers arises in many cryptographic applications. For
example, common cryptosystems employ keys that must be generated in a random fashion. Many
cryptographic protocols also require random or pseudorandom inputs at various points, e.g., for auxiliary
quantities used in generating digital signatures, or for generating challenges in authentication protocols.

This document discusses the randomness testing of random number and pseudorandom number
generators that may be used for many purposes including cryptographic, modeling and simulation
applications. The focus of this document is on those applications where randomness is required for
cryptographic purposes. A set of statistical tests for randomness is described in this document. The
National Institute of Standards and Technology (NIST) believes that these procedures are useful in
detecting deviations of a binary sequence from randomness. However, a tester should note that apparent
deviations from randomness may be due to either a poorly designed generator or to anomalies that appear
in the binary sequence that is tested (i.e., a certain number of failures is expected in random sequences
produced by a particular generator). It is up to the tester to determine the correct interpretation of the test
results. Refer to Section 4 for a discussion of testing strategy and the interpretation of test results.

1.1     General Discussion

There are two basic types of generators used to produce random sequences: random number generators
(RNGs - see Section 1.1.3) and pseudorandom number generators (PRNGs - see Section 1.1.4). For
cryptographic applications, both of these generator types produce a stream of zeros and ones that may be
divided into substreams or blocks of random numbers.

1.1.1    Randomness

A random bit sequence could be interpreted as the result of the flips of an unbiased “fair” coin with sides
that are labeled “0” and “1,” with each flip having a probability of exactly ½ of producing a “0” or “1.”
Furthermore, the flips are independent of each other: the result of any previous coin flip does not affect
future coin flips. The unbiased “fair” coin is thus the perfect random bit stream generator, since the “0”
and “1” values will be randomly distributed (and [0,1] uniformly distributed). All elements of the
sequence are generated independently of each other, and the value of the next element in the sequence
cannot be predicted, regardless of how many elements have already been produced.

Obviously, the use of unbiased coins for cryptographic purposes is impractical. Nonetheless, the
hypothetical output of such an idealized generator of a true random sequence serves as a benchmark for
the evaluation of random and pseudorandom number generators.

1.1.2    Unpredictability

Random and pseudorandom numbers generated for cryptographic applications should be unpredictable.
In the case of PRNGs, if the seed is unknown, the next output number in the sequence should be
unpredictable in spite of any knowledge of previous random numbers in the sequence. This property is
known as forward unpredictability. It should also not be feasible to determine the seed from knowledge
of any generated values (i.e., backward unpredictability is also required). No correlation between a seed
and any value generated from that seed should be evident; each element of the sequence should appear to
be the outcome of an independent random event whose probability is 1/2.

To ensure forward unpredictability, care must be exercised in obtaining seeds. The values produced by a
PRNG are completely predictable if the seed and generation algorithm are known. Since in many cases


                                                      1-1
