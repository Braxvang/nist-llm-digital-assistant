                                                                                             NIST SP 800-204                                                          SECURITY STRATEGIES FOR
                                                                                                                                                      MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                                    and out of microservices with analytics capabilities in addition to routine logging
                                                                                                    features.

                                                                                             An API gateway or micro-gateway is generally used for implementing the following core
                                                                                             features:

                                                                                                •   Optimized endpoint: This involves several capabilities.
                                                                                                    a) Request and response collapsing: Most business transactions will involve calls to
                                                                                                        multiple microservices, often in a pre-determined sequence. An API gateway can
                                                                                                        simplify the situation for clients by exposing an endpoint that will automatically make
                                                                                                        all the needed multiple requests (calls) and return a single, aggregated response to the
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                                        client.
                                                                                                    b) API Transformation: The API gateway can provide a public interface to the client
                                                                                                        which is different from the individual APIs it has to call to cater to a given request.
                                                                                                        This feature is called API transformation and enables:
                                                                                                        i) Changing the implementation and even the API interface for individual
                                                                                                             microservices; and
                                                                                                        ii) Transitioning from an initial, monolithic application to a microservices-based
                                                                                                             application by enabling continued access to clients through the API gateway
                                                                                                             while progressively splitting the monolithic application, creating microservice
                                                                                                             APIs in the background, and changing the API transformation configuration
                                                                                                             accordingly.
                                                                                                    c) Protocol Translation: Calls from clients to microservices entry points may be in web
                                                                                                        protocols, such as Hypertext Transfer Protocol Secure (HTTPS), while microservices
                                                                                                        communicate among themselves using synchronous protocols, such as Remote
                                                                                                        Procedure Call (RPC)/Thrift, or asynchronous protocols, such as AMQP. The
                                                                                                        necessary protocol translation in client requests is typically carried out by the API
                                                                                                        gateway.
                                                                                                •   Circuit breaker: This is a feature to set a threshold for the failed responses to an instance
                                                                                                    of a microservice and cut off proxying requests to that instance when the failure is above
                                                                                                    the threshold. This avoids the possibility of a cascaded failure, allows time to analyze
                                                                                                    logs, implement the necessary fix, and push an update for the failing instance.
                                                                                                •   Load balancing: There is a need to have multiple instances of the same service, and the
                                                                                                    load on these instances must be evenly distributed to avoid delayed responses or service
                                                                                                    crashes due to overload.
                                                                                                •   Rate limiting (throttling): The rate of requests coming into a microservice must be limited
                                                                                                    to ensured continued availability of service for all clients.
                                                                                                •   Blue/green deployments: When a new version of a microservice is deployed, requests
                                                                                                    from customers using the old version can be redirected to the new version since the API
                                                                                                    gateway can be programmed to be aware of the locations of both versions.
                                                                                                •   Canary releases: Only a limited amount of traffic is initially sent to a new version of a
                                                                                                    microservice since the correctness of its response or performance metric under all

                                                                                                                                             8
