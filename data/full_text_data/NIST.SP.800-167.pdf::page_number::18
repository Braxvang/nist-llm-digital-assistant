NIST SP 800-167                                                                          GUIDE TO APPLICATION W HITELISTING


An ICS is a challenging platform for whitelisting in part because, unlike most other computing devices,
ICSs strongly favor availability over confidentiality. It is critical that ICSs continue to function properly
no matter what is happening to them, including cyber attacks. Because application whitelisting can
inadvertently prevent benign applications from being executed, its use for ICSs must be carefully
analyzed and tested for feasibility. Another problem with ICSs is that they often use atypical platforms,
which may not be supported by any acceptable application whitelisting solutions. However, since ICSs
are used for specific functionality and run only certain ICS software, in some cases they are actually
easier to whitelist than more dynamic, heterogeneous environments.

3.2     Design

Once the needs have been identified and the appropriate application whitelisting technologies have been
chosen, the next phase is to design a solution that meets those needs. If these design decisions are
incorrect, then the application whitelisting implementation will be more susceptible to compromise and
failure. Major aspects of solution design that are particularly important for application whitelisting are as
follows:

     Cryptography. Cryptography is used in at least three ways for application whitelisting technologies:
      1) to generate and verify cryptographic hashes for files and other application components; 2) to
      validate digital signatures for files; and 3) to protect the confidentiality and integrity of
      communications between individual hosts and centralized management (for example, encrypting lists
      of installed applications and application versions). For all of these functions, Federal agencies must
      use Federal Information Processing Standard (FIPS) approved or NIST-recommended algorithms
      contained in validated cryptographic modules.13 Organizations should consider how easily the
      solution can be updated when stronger algorithms and key sizes become available in the future.
     Solution architecture. The architecture of the application whitelisting technology refers to the
      selection of devices and software to provide application whitelisting services and the placement of
      centralized elements within the existing network infrastructure, such as management servers. Most
      application whitelisting technologies can only operate as a centrally managed solution; there may be
      copies of whitelists on individual hosts, but enterprise management is centralized. Each end user
      device must have software that provides application whitelisting enforcement or auditing. Designing
      the architecture includes component placement, redundancy, reliability, and interoperability.
     Whitelist management. As discussed in Section 2.2.3, whitelist management can involve the
      establishment of trusted publishers, users, updaters, etc. Organizations should choose these trusted
      entities carefully because a compromise in a trusted entity could lead to the compromise of the
      application whitelisting technology, and consequently to the hosts it protects. However, failure to
      identify necessary entities as trusted will likely lead to operational problems, such as when files
      updated by patch installation are not automatically trusted by the application whitelisting technology.
3.3     Prototype Testing

After the solution has been designed, the next step is to implement and test a prototype of the design.
Ideally, implementation and testing should first be performed on lab or test devices. Only solutions in the
final phase of testing should be implemented on production devices. Aspects of the prototype solution
that require evaluation include the following:



13    For more information on validated implementations of cryptographic algorithms and modules, see
      http://csrc.nist.gov/groups/STM/cavp/ and http://csrc.nist.gov/groups/STM/cmvp/, respectively.



                                                              11
