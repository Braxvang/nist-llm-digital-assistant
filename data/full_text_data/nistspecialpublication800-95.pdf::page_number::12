                                                                                         GUIDE TO SECURE WEB SERVICES



Security Actions to Consider

The items below are possible actions that organizations should consider; some of the items may not apply
to all organizations. In particular, it is necessary to balance these actions against budget requirements and
the potential risks an organization’s Web services may face. 5

 Replicate Data and Services to Improve Availability. Since Web services are susceptible to DoS
  attacks, it is important to replicate data and applications in a robust manner. Replication and
  redundancy can ensure access to critical data in the event of a fault. It will also enable the system to
  react in a coordinated way to deal with disruptions.

 Use Logging of Transactions to Improve Non-repudiation and Accountability. Non-repudiation
  and accountability require logging mechanisms involved in the entire Web service transaction. As of
  early 2007, there are few implemented logging standards that can be used across an entire SOA. In
  particular, the level of logging provided by various UDDI registries, identity providers, and
  individual Web services varies greatly. Where the provided information is not sufficient to maintain
  accountability and non-repudiation, it may be necessary to introduce additional software or services
  into the SOA to support these security requirements.

 Use Threat Modeling and Secure Software Design Techniques to Protect from Attacks. The
  objective of secure software design techniques is to ensure that the design and implementation of
  Web services software does not contain defects that can be exploited. Threat modeling and risk
  analysis techniques should be used to protect the Web services application from attacks. Used
  effectively, threat modeling can find security strengths and weaknesses, discover vulnerabilities and
  provide feedback into the security life cycle of the application. Software security testing should
  include security-oriented code reviews and penetration testing. By using threat modeling and secure
  software design techniques, Web services can be implemented to withstand a variety of attacks.

 Use Performance Analysis and Simulation Techniques for End to End Quality of Service and
  Quality of Protection. Queuing networks and simulation techniques have long played critical roles
  in designing, developing and managing complex information systems. Similar techniques can be
  used for quality assured and highly available Web services. In addition to QoS of a single service,
  end-to-end QoS is critical for most composite services. For example, enterprise systems with several
  business partners must complete business processes in a timely manner to meet real time market
  conditions. The dynamic and compositional nature of Web services makes end-to-end QoS
  management a major challenge for service-oriented distributed systems.

 Digitally Sign UDDI Entries to Verify the Author of Registered Entries. UDDI registries openly
  provide details about the purpose of a Web service as well as how to access it. Web services use
  UDDI registries to discover and dynamically bind to Web services at run time. Should an attacker
  compromise a UDDI entry, it would be possible for requesters to bind to a malicious provider.
  Therefore, it is important to digitally sign UDDI entries so as to verify the publisher of these entries.

 Enhance Existing Security Mechanisms and Infrastructure. Web services rely on many existing
  Internet protocols and often coexist with other network applications on an organization’s network.
  As such, many Web service security standards, tools, and techniques require that traditional security
  mechanisms, such as firewalls, intrusion detection systems (IDS), and secured operating systems, are
  in effect before implementation or deployment of Web services applications.

5
    For more information on risk assessment, see NIST Special Publication 800-30, Risk Management Guide for Information
    Technology Systems (http://csrc.nist.gov/publications/nistpubs/).


                                                         ES-4
