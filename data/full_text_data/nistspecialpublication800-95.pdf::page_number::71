                                                                                             GUIDE TO SECURE WEB SERVICES



         –    Always fail into a secure state
         –    Gracefully degrade performance or perform partial shutdown of functions (but not security-
              or protection-related functions) according to a predefined plan
         –    Are configurable by the administrator at runtime
         –    Perform transaction rollback and checkpoint restart (for Web services that update data stores)
         –    Perform informative event logging
         –    Generate only safe error messages to users (i.e., error messages that do not contain
              information that can be exploited by an attacker to craft a more effective attack).
 Use defensive programming techniques and information hiding to make the Web service software
  more robust.
 Through QoS and reliable messaging, Web services can ensure that messages are not lost even if the
  network is saturated.
Web services, due to either their implementation or that of the frameworks on which they depend, may
begin to degrade through residual cache data, temporary files, or even a fragmented hard drive. To
prevent availability risks due to this degradation, it is useful to perform periodic software rejuvenations
and reconfigurations to return the service software to a known reliable state. 51 The techniques used vary
among OSs and applications. Rejuvenation is common in organizations taking advantage of
virtualization, because it can be performed by taking virtual machine snapshots and reverting back to
them after a period of time.

Organizations deploying and implementing Web services should also be aware of two of the most
common accidental threats against availability: service recursion and service deadlock. Through Web
services’ support for dynamic discovery and binding, it is possible that a single Web service may attempt
to bind to itself, possibly resulting in a DoS. Deadlocks are an equally important threat that arises when
multiple entities are requesting access to the same resource.

3.8.1    Failover

One of the primary goals of a distributed system is the ability to recover when a node in the system fails.
Through dynamic discovery and binding, Web services can be designed to recover if a single service fails,
whether the failure is accidental or intentional. UDDI supports listing multiple URIs for each Web
service. When one instance of a Web service has failed, requesters can use an alternate URI.

Using UDDI to support failover causes the UDDI registry to become a single point of failure. To remedy
this, UDDI supports replication. Through replication, UDDI registries can support multiple nodes, where
each node is an instance of the UDDI registry. This way, backup nodes can be used when an individual
node is faced with a DoS attack.

3.8.2    Quality of Service

Most Web services deployed do not provide guarantees for QoS. QoS defines what the expected level of
performance a particular Web service will have. By prioritizing traffic, overall performance of the system

51
     Software rejuvenation was first proposed by Y. Huang, C. Kintala, N. Kolettis, and N. D. Fulton in Software Rejuvenation:
     Analysis, Module and Applications, in Proc. of 25th Symposium on Fault Tolerant Computing, FTCS-25, pages 381–390,
     Pasadena, California, June 1995.


                                                             3-36
