                                                                                            GUIDE TO SECURE WEB SERVICES



be accepted. In the transition to Web services, an API should be developed that can be used to
communicate with the discovery service as well as authenticate users.

For applications with a large number of current users, an applet can be written to establish a mapping
between an existing username—and associated privileges—and a subscriber certificate. The first time
each user is authenticated based on the certificate, the user will be asked to provide the old username and
password. The applet will then establish the mapping of the privileges associated with that username to
the new certificate, so that the next time the user logs in, those privileges will be granted based on the
certificate presented, without the user being required to enter the old username and password. 55

5.5     Accountability for Legacy Application Transactions

In accordance with the security functions provided by authorization and access control measures, sound
Web services security practices also include the maintenance of auditing records. Auditing should be
done to maintain appropriate accountability for legacy application transactions in the Web services
environment.

The legacy application’s auditing mechanisms should be developed to provide sufficient information and
secure storage for audit data. Verbose logging is beneficial to later analysis of the system. Appropriate
review procedures can identify anomalous access control situations, which may indicate an attacker’s
presence. To support analysis, logs should be stored securely for an appropriate length of time, which is
usually determined by the organizational policies. NIST SP 800-92 provides guidance for managing logs
within an organization.

5.6     Database Security Challenges in SOA Environments

When a database application is exposed as a service or is simply accessed by a Web service, the security
of the database relies entirely on the security of the applications directly accessing it. The exposing
application should account for confirming the requester’s authorization to access the database.
Additionally, the application must filter requests before forwarding them on to the database. Incoming
requests may include SQL injection attacks or other attempts to subvert the database or retrieve sensitive
information. The application must also filter the data before providing it to the requester to prevent
unintentional leakage.

5.7     Maintaining Security of Legacy Systems Exposed via Web Services

When integrating legacy systems as backend servers in a SOA, developers must make sure that security
does not stop at the connection between the SOA and the Web service interface to the legacy system.
Instead, the developer should incorporate the following measures to ensure the integrity of the data being
processed:

 Establish end-to-end user authentication. Set up an end-to-end user authentication mechanism that
  reaches from requesters to the mainframe or other backend legacy server.
 Establish an end-to-end encrypted data channel. Use encryption from the individual requesters to the
  Web service interface and from the Web service interface to the legacy backend system. This is done
  to ensure that sensitive data are not exposed in transit over external and internal networks. If the


55
      For further guidance on public key implementation, see NIST SP 800-32, Introduction to Public Key Technology and the
      Federal PKI Infrastructure and NIST SP 800-44, Guidelines on Securing Public Web Servers, available at
      http://csrc.nist.gov/publications/nistpubs/.


                                                             5-3
