                                                                                              NIST SP 800-204C                                            DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                 APPLICATION WITH SERVICE MESH

                                                                                                 •   Using the cost-benefit ratio in hours saved per year to prioritize which processes to
                                                                                                     automate [23].
                                                                                                 •   Using key performance indicators (KPI) (e.g., mean time to identify faults or problems,
                                                                                                     rectify, or recover) as markers to refine the DevSecOps processes [23].
                                                                                                 •   Based on the application, applying different weights to infrastructure services (e.g.,
                                                                                                     authorization and other policies enforcement, monitoring of system states to ensure secure
                                                                                                     runtime states, network resilience in terms of system availability, latency, mean time to
                                                                                                     recover from an outage etc.) to determine the allocation of resources to DevSecOps
                                                                                                     processes.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                              3.3.5 Requirements for Security Automation Tools in CI/CD Pipelines

                                                                                              The security automation tools for various functions (e.g., static vulnerability analysis, dynamic
                                                                                              vulnerability analysis, software composition analysis) used in CI/CD pipelines need to have
                                                                                              different interface and alerting/reporting requirements since they have to operate seamlessly
                                                                                              depending on the pipeline stage (e.g., build, package, release) during which they are used. These
                                                                                              requirements are:
                                                                                                 •   Security automation tools should work with integrated development environment (IDE)
                                                                                                     tools and help developers prioritize and remediate static vulnerabilities. These capabilities
                                                                                                     are needed to facilitate developer adoption and improve productivity.
                                                                                                 •   Security automation tools should be flexible to support specific workflows and provide
                                                                                                     scaling capabilities for security services.
                                                                                                 •   Tools that perform static vulnerability checks at the build phase ensure safe data flows,
                                                                                                     and those that perform dynamic vulnerability checks ensure safe application states during
                                                                                                     runtime.

                                                                                              It must be mentioned that security automation tools come with costs, and hence, the extent of the
                                                                                              usage of these tools is based on risk factor analysis.




                                                                                                                                              18
