                                                                               GUIDE TO SECURE WEB SERVICES



      backend system does not natively support encrypted data channels, IPsec or SSL tunneling software
      can provide an encrypted data channel.
 Implement public key security end-to-end. Deploy public key components all the way from the
  requester to the backend system and integrate them with existing security systems.
In addition to certificate-based identification and authentication (I&A), the Web service will also need to
perform application-level monitoring and auditing of Web connections, access events, and security
violations.

In certain high-risk environments, a second factor of authentication, in addition to PKI certificate-based
I&A, may be desired. This second factor may include a static password, a dynamic password, or a
biometric. In some applications, the user’s initial authentication may be via a second-factor mechanism
during the authenticated session.

Security for the mainframe was not designed with the SOA processing model in mind. Rather, mainframe
security was designed for a closed, well-defined, and tightly controlled environment. Key characteristics
of such environments include a known and relatively trusted user population, a well-defined set of
applications, and firm connectivity boundaries. Application developers need to leverage existing backend
mainframe security systems.

5.8     Summary

Secure Web service-enabling of legacy applications allows new SOA applications to leverage the
functionality and services provided by an organization’s legacy systems. This can prove to be cost-
effective when developing Web services that require legacy functionality. Web service-enabling legacy
applications can introduce Web service threats to the legacy application and provide a new avenue of
attack into the legacy application. Legacy applications built without understanding of SOA or networking
may lead to the discovery of new vulnerabilities in the application. When Web service-enabling a legacy
application, it is important to be aware of these threats and use appropriate technologies to mitigate them.
Similarly, the mechanisms used to Web service-enable legacy software must also be secure, to prevent
introducing new vulnerabilities into the system.

Ideally, legacy applications should be modified to support Web service standards, but this may not always
be possible. If the application was originally designed as a Web application, it can be configured to use
SSL/TLS for authentication, confidentiality and integrity between the Web service front-end and the
application itself. In addition, many legacy applications have built-in authentication and authorization
mechanisms. If possible, these should be upgraded to support SOA technologies; otherwise the Web
service front-end will have to map SOA identities and permissions to those used by the legacy
application. While it is important to provide an updated authentication and authorization mechanism, it is
equally important to take advantage of logging facilities provided by the application. In addition, these
logs should be integrated into the system-wide log management infrastructure. By exposing legacy
functionality as a Web service, there are a number of potential attacks that may surface, requiring the
Web service front-end to be carefully designed, implemented, and deployed to take full advantage of the
legacy application's security functionality while providing the security needed to protect against threats
introduced by the SOA.




                                                    5-4
