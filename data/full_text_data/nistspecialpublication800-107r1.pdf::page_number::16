               generation process – even if it is practical to find collisions for the
               unrandomized hash function.
       2)      Randomized hashing does not offer the message preparer or the signature
               verifiers any additional protection from a misbehaving signer (who may,
               for example, generate one signature that can be associated with either of
               two chosen messages after finding randomized versions of those messages
               that hash to the same value).
       3)      Randomized hashing does not improve the assurance of origin
               authenticity, data integrity, and/or signatory non-repudiation provided by
               the digital signature to signature verifiers (i.e., relying parties).

5.3    Keyed-Hash Message Authentication Codes (HMAC)

5.3.1 Description
Message authentication codes (MACs) provide data authentication and integrity
protection. Two types of algorithms for computing a MAC have been approved: 1) MAC
algorithms that are based on approved block cipher algorithms (more information can be
found in [SPs 800-38B, C and D]) and 2) MAC algorithms that are based on hash
functions, called HMAC algorithms, that are specified in FIPS 198-1. This section
discusses the use of HMAC.
An output from an HMAC algorithm is called an HMAC output. The HMAC output is
either used in its entirety, or is truncated (see Section 5.3.3) when it is transmitted for
subsequent verification. The transmitted value is called a MacTag. The HMAC
algorithm requires the use of a secret key that is shared between the entity that generates
the HMAC output (e.g., a message sender), and the entity (or entities) that need to verify
the transmitted MacTag (message receiver(s)).
The HMAC output is generated from a secret key and the string of “text” to be MACed
(e.g., a message to be sent) using the HMAC algorithm. The MacTag is provided to the
MacTag verifier, along with the “text” that was MACed (e.g., the sender transmits both
the MacTag and the message to the intended receiver).
The verifier computes an HMAC output on the received “text” using the same key and
HMAC algorithm that were (purportedly) used to generate the received MacTag,
generates a (new) MacTag (either a full or truncated HMAC output), and then compares
the verifier-generated MacTag with the received MacTag. If the two values match, the
“text” has been correctly received and the verifier is assured that the entity that generated
the MacTag is a member of the community of users that share the key.
The security strength provided by the HMAC algorithm depends on the security strength
of the HMAC key, the underlying hash algorithm and the length of the MacTag.

5.3.2 The HMAC Key
The security strength of the HMAC algorithm depends, in part, on the security strength of
the HMAC key, K. An HMAC key shall have a security strength that meets or exceeds
the security strength required to protect the data over which the HMAC is computed.

                                             13
