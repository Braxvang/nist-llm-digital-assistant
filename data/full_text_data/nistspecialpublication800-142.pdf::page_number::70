Practical Combinatorial Testing
________________________________________________________________
           v↓ t→         2          3        4          5       6
           2             4          8       16         32      64
           4            16         64      256       1024    4096
           6            36        216     1296       7776   46656
                             Table 1. Growth of vt

Despite the possibly discouraging numbers in the table above, there is some good news.
Note that formula (2) grows only logarithmically with the number of variables, n. This is
fortunate for software testing. Early applications of combinatorial methods were typically
involved with small numbers of variables, such as a few different types of crops or
fertilizers, but for software testing, we must deal with tens, or in some cases hundreds of
variables.

Regular Expressions
Regular expressions are formal descriptions of strings of symbols, which may represent
text, events, characters, or other objects. They are developed within automata theory and
formal languages, where it is shown that there are direct mappings between expressions
and automata to process them, and are encountered in many areas within computer science.
In combinatorial testing they may be encountered in sequence covering or in processing
test input or output. Implementations vary, but standard syntax is explained below.

Expression Operators

Basic elements of regular expressions include:

       |       “or” alternation. Ex: ab|ac matches “ab” or “ac”
       ?       0 or 1 of the preceding element. Ex: ab?c matches “ac” or “abc”
       *       0 or more of the preceding element. Ex: ab* matches “a”, “ab”,
               “abb”, “abbb” etc. + 1 or more of the preceding element. Ex: ab+
               matches “ab”, “abb”, “abbb” etc.
       ()      grouping. Ex: (abc|abcd) matches “abc” or “abcd”
       .       matches any single character. Ex: a.c matches “abc”, “axc”, “a@c” etc.
       []      matches any single character within brackets. Ex: [abc] matches “a”
               or “b” or “c”.
               A range may also be specified. Ex: [a-z] matches any single lower
               case character.
               (This option depends on the character set supported.)
       [^ ]    matches any single character that is not contained in the brackets.
               Ex: [^ab] matches any character except “a” or “b”
       ^       matches start position, i.e., before the first character
       $       matches end position, i.e., after the last character




64
