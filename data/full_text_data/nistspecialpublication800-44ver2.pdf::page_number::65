                                                                GUIDELINES ON SECURING PUBLIC WEB SERVERS



The areas of vulnerability mentioned potentially affect all Web servers. Although these vulnerabilities
have frequently occurred with CGI applications, other related interfaces and techniques for developing
server applications have not been immune. CGI, being an early and well-supported standard, has simply
gained more attention over the years, and the same areas of vulnerability exist when applying similar Web
development technologies.

CGI scripts were the initial mechanism used to make Web sites interact with databases and other
applications. However, as the Web evolved, server-side processing methods have been developed that are
more efficient and easier to program; for example, Microsoft provides ASP.NET for its IIS servers,
Sun/Netscape supports Java servlets, and the freeware PHP is supported by most major Web platforms,
including Apache and IIS [NIST01]. Some important points to consider when contemplating the
deployment of CGI [Ziri02]:

 The host file system (see Section 4.1) provides security for CGI.

 Most servers allow per-directory CGI restrictions.

 CGI itself provides little security enforcement.

 Perl facilitates secure programming that most other languages (e.g., C, C++, sh) do not.

 CGI wrappers available from third parties offer additional protection for CGI.

Server Side Includes (SSI) is a limited server-side scripting language supported by most Web servers.
SSI provides a set of dynamic features, including the current time or the last modification date of the
HTML file, as an alternative to using a CGI program to perform the function. When the browser requests
a document with a special file type, such as “.shtml”, it triggers the server to treat the document as a
template, reading and parsing the entire document before sending the results back to the client (Web
browser). SSI commands are embedded within HTML comments (e.g., <!--#include file=“standard.html”
-->). As the server reads the template file, it searches for HTML comments containing embedded SSI
commands. When it finds one, the server replaces that part of the original HTML text with the output of
the command. For example, the SSI command given above (i.e., #include file) replaces the entire SSI
comment with the contents of another HTML file. This allows the display of a corporate logo or other
static information prepared in another file to occur in a uniform way across all corporate Web pages. A
subset of the directives available allows the server to execute arbitrary system commands and CGI scripts,
which may produce unwanted side effects [NIST01]. Some important points to consider when
contemplating the deployment of SSIs:

 The security of SSIs is extremely weak if the exec command is enabled on the Web server.

 The impact of SSIs can hurt the performance of heavily loaded Web servers.

 The security of SSIs relies heavily on the host OS and Web server application for security.

Microsoft ASP.NET is a server-side scripting technology from Microsoft that can be used to create
dynamic and interactive Web applications. An ASP page contains server-side scripts that run when a
browser requests an “.asp” resource from the Web server. The Web server processes the requested page
and executes any script commands encountered before sending a generated HTML page to the user’s
browser. Both C# and VBScript are natively supported as ASP.NET scripting languages, but other
languages can be accommodated, if an ASP.NET-compliant interpreter for the language is installed. For
example, ASP.NET engines are available for the Perl, REXX, and Python languages from various



                                                     6-13
