Practical Combinatorial Testing
________________________________________________________________


                           12000

                           10000

                            8000

                 T es ts    6000

                            4000

                            2000

                              0
                                   2-way   3-way    4-way   5-way      6-way



                Figure 13.            Number of tests for avionics example.
        When applying combinatorial methods to input parameters, the key cost factors are
the number of values per parameter, the interaction strength, and the number of parameters.
As shown above, the number of tests increases rapidly as the value of t is increased, but the
rate of increase depends on the number of values per parameter. Binary variables, with
only two values each, result in far fewer tests than parameters with many values each. As
a practical matter, when partitioning the input space (section 4.1), it is best to keep the
number of values per parameter below 8 or 10 if possible.

        Because the number of tests increases only logarithmically with the number of
parameters, test set size for a large problem may be only somewhat larger than for a much
smaller problem. For example, if a project uses combinatorial testing for a system that has
20 parameters and generates several hundred tests, a much larger system with 40 to 50
parameters may only require a few dozen more tests. Combinatorial methods may generate
the best cost benefit ratio for large systems.

4.4   Chapter Summary

1. The key advantage of combinatorial testing derives from the fact that all, or nearly all,
   software failures appear to involve interactions of only a few parameters. Generating a
   covering array of input parameter values allows us to test all of these interactions, up to
   a level of 5-way or 6-way combinations, depending on resources.

2. Practical testing often requires abstracting the possible values of a variable into a small
   set of equivalence classes. For example, if a variable is a 32-bit integer, it is clearly not
   possible to test the full range of values in +/- 231. This problem is not unique to
   combinatorial testing, but occurs in most test methodologies. Simple heuristics and
   engineering judgment are required to determine the appropriate portioning of values
   into equivalence classes, but once this is accomplished it is possible to generate
   covering arrays of a few hundred to a few thousand tests for many applications. The
   thoroughness of coverage will depend on resources and criticality of the application.




22
