                                                                                             NIST SP 800-192                                                     VERIFICATION & TEST METHODS FOR
                                                                                                                                                                 ACCESS CONTROL POLICIES/MODELS

                                                                                             G. [condition]/n/[combining] (n-ary Decision Rules) When possible decisions are more
                                                                                             than grant or deny, rule structures are defined as above with the modification that grant
                                                                                             decisions

                                                                                             Vulnerability Classes

                                                                                             This section defines classes of vulnerabilities and determines vulnerability hierarchies for the
                                                                                             access control policy structures defined previously. A large number of vulnerabilities can be
                                                                                             defined for access control rules, but a reasonable set may include the following. Note that the exact
                                                                                             form will vary with the type of access rule structure as defined in the taxonomy above.

                                                                                                1. Add Condition: A condition ca that was not specified has been added to the implementation:
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-192




                                                                                                2. Delete Condition: A specified condition is missing from the implementation:
                                                                                                3. Replace Condition: A condition is replaced with a different one, not equivalent:
                                                                                                4. Stuck at True Condition: A condition is always true:
                                                                                                5. Stuck at False Condition: A condition is always false:
                                                                                                6. Negate Condition: A condition is negated:
                                                                                                7. Negate Decision: The specified result for a condition is the opposite of intended. This mutation
                                                                                                   can apply only when there are two possible decisions, generally Grant or Deny:
                                                                                                8. Delete Rule: A specified rule has been omitted from the implementation.

                                                                                             In practical implementations, some of these vulnerabilities could arise from administrator error,
                                                                                             such as accidentally deleting or leaving out a condition or rule, and others may result from software
                                                                                             failures, such as a module that is intended to verify an attribute and return true or false, but always
                                                                                             returns true.

                                                                                             Vulnerability Hierarchies

                                                                                             For the eight vulnerability classes introduced above, hierarchical relationships exist for the access
                                                                                             control rule structures in the taxonomy. (For proofs and additional discussion see [Kuhn11].) In
                                                                                             the structures below, vulnerabilities are abbreviated as follows:

                                                                                                1.   ac: add condition
                                                                                                2.   dc: delete condition
                                                                                                3.   rc: replace condition
                                                                                                4.   tc: true condition
                                                                                                5.   fc: false condition
                                                                                                6.   nc: negate condition
                                                                                                7.   nd: negate decision
                                                                                                8.   dr: delete rule

                                                                                             Note that this set of vulnerabilities is not claimed to be complete. It could be extended, for example,
                                                                                             with vulnerabilities such as “add rule” or “replace rule”. Hierarchical relationships among
                                                                                             detection conditions for different vulnerability classes can be determined by checking for
                                                                                             implications between the pairs of detection conditions. That is, for all pairs of vulnerabilities Pi ,
                                                                                             Pj , i ≠ j , compute P ⨁ Pi ⇒ P ⨁ Pj, where Pi and Pj are access rules for particular faults that
                                                                                             lead to vulnerabilities, where ⨁ designates XOR.

                                                                                                                                               12
