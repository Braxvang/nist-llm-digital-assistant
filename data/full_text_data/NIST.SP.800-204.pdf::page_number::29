                                                                                             NIST SP 800-204                                                              SECURITY STRATEGIES FOR
                                                                                                                                                          MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                             Security strategies for service registry configuration (MS-SS-3)

                                                                                                   •    Service registry capabilities should be provided through servers that are either dedicated
                                                                                                        or part of a service mesh architecture.
                                                                                                   •    Service registry services should be in a network that has been configured with certain
                                                                                                        Quality of Service (QoS) parameters to ensure its availability and resilience.
                                                                                                   •    Communication between an application service and a service registry should occur
                                                                                                        through a secure communication protocol such as HTTPS or Transport Layer Security
                                                                                                        (TLS).
                                                                                                   •    Service registry should have validation checks to ensure that only legitimate services are
                                                                                                        performing the registration, refresh operations, and database queries to discover services.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                                   •    The bounded context and loose coupling principle for microservices should be observed
                                                                                                        for the service registration/deregistration functions. In other words, the application
                                                                                                        service should not have tight coupling with an infrastructure service, such as a service
                                                                                                        registry service, and service self-registration/deregistration patterns should be avoided.
                                                                                                        When an application service crashes or is running but unable to handle requests, its
                                                                                                        inability to perform deregistration affects the integrity of the whole process. Therefore,
                                                                                                        registration/deregistration of an application service should be enabled using a third-party
                                                                                                        registration pattern, and the application service should be restricted to querying the
                                                                                                        service registry for service location information as described under the client-side
                                                                                                        discovery pattern.
                                                                                                   •    If a third-party registration pattern is implemented, registration/deregistration should only
                                                                                                        take place after a health check on the application service is performed.
                                                                                                   •    Distributed service registry should be deployed for large microservices applications, and
                                                                                                        care should be taken to maintain data consistency among multiple service registry
                                                                                                        instances.
                                                                                             4.3       Strategies for Secure Communication Protocols

                                                                                             Secure communication between clients and services (north-south traffic) and between services
                                                                                             (east-west traffic) is critical for the operation of a microservices-based application.

                                                                                             However, certain strategies for security services—such as authentication or the establishment of
                                                                                             secure connections—can be handled at the individual microservices nodes. For example, in the
                                                                                             fabric model, each microservice instance has the capability to function as an Secure Sockets
                                                                                             Layer (SSL) client and SSL server (i.e., each microservice is an SSL/TLS endpoint). Thus, a
                                                                                             secure SSL/TLS connection is possible for interservice or inter-process communication from an
                                                                                             overall application perspective. These connections can be created dynamically (i.e., before each
                                                                                             interservice request) or be created as a keep-alive connection. In the keep-alive connection
                                                                                             scheme, a “service A” creates a connection after a full SSL/TLS handshake—the first time an
                                                                                             instance of that service makes a request to an instance of a “service B.” However, neither service
                                                                                             instances terminate the connection after a response returns for that request from service B.
                                                                                             Rather, the same connection is reused in future requests. The advantage of this scheme is that the
                                                                                             costly overhead involved in performing the initial SSL/TLS handshake can be avoided during
                                                                                                                                              21
