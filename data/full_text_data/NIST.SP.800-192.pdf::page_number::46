                                                                                             NIST SP 800-192                                                     VERIFICATION & TEST METHODS FOR
                                                                                                                                                                 ACCESS CONTROL POLICIES/MODELS

                                                                                             Method: Let R = rule antecedents (left hand side of an implication rule such as p in p → q) of one
                                                                                             or more policy rules being tested in k-DNF, and Ti are terms (conjuncts of one or more attributes)
                                                                                             in R. For the example included in the introduction, terms Ti of R would be acd̅, ae, and a̅bc̅. R is
                                                                                             not necessarily the complete policy; it may be the set of rules associated with a particular resource
                                                                                             that we wish to test, for example.

                                                                                             Positive testing: Generate a test set GTEST for which every test should produce a response of grant.
                                                                                             It must be shown that for all possible inputs, where some combination of k input values matches a
                                                                                             grant condition, a decision of grant is returned. Construct test set GTEST with one test for each
                                                                                             term of R as follows:

                                                                                                    GTESTi = 𝑇𝑇𝑖𝑖 �           ~𝑇𝑇𝑗𝑗
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-192




                                                                                                                      𝑗𝑗≠𝑖𝑖


                                                                                             The construction ensures that each term in P is verified to independently produce a response of
                                                                                             grant. Negating each term Tj, i ≠ j, prevents masking of a fault in the presence of other
                                                                                             combinations that would return the same result. For example, if a rule condition is ab + cd →grant,
                                                                                             inputs of 1100, 1101, 1110 could be used for testing ab →grant. However, input 1111 would not
                                                                                             detect the fault if the system ignores variable a or b, because the condition cd would cause a grant
                                                                                             decision, and no other grant predicates would be evaluated. One such test is required for each term
                                                                                             in a grant rule, so for m rules with an average of p terms each, the number of tests required is
                                                                                             proportional to mp.

                                                                                             Negative testing: Generate a test set DTEST for which every test should produce a response of deny.
                                                                                             It must be shown that for all possible inputs, where no combination of k input values matches a
                                                                                             grant condition, a decision of deny is returned.

                                                                                                    DTEST = covering array of strength k, for the set of attributes included in R, with constraints
                                                                                                    specified by ~R.

                                                                                             Note that the structure of the access control rule evaluation makes it possible to use a covering
                                                                                             array for DTEST, compressing a large number of test conditions into a few tests. Because a deny is
                                                                                             issued only after all grant conditions have been evaluated, masking of one combination by another
                                                                                             can only occur for DTEST when a test produces a response of grant. In such a case, an error has
                                                                                             been discovered, which can be repaired before running the test set again. Since DTEST is a covering
                                                                                             array, the number of tests will be proportional to vk log n, for v values per attribute (normally v=2
                                                                                             since most will be boolean conditions), and n attributes. For m rules, the number of tests is
                                                                                             multiplied by the constant m.

                                                                                             Example: Table 1 gives a set of boolean attributes a through e, where each row defines values for
                                                                                             the attributes that determine a decision, either grant or deny. Thus a covering array for the
                                                                                             antecedent R of a rule in 3-DNF such as (acd̅ + a̅bc̅ → grant) is given in Table 1. The total number
                                                                                             of 3-way combinations covered is the number of settings of three binary variables multiplied by
                                                                                                                                                                   5
                                                                                             the number of ways of choosing three variables from five, i.e., 23 � � = 80.
                                                                                                                                                                   3
                                                                                                 Table 2 shows a covering array for this set of variables generated using ~ R as a constraint. That
                                                                                             is, the two terms of the rule, acd̅ and a̅bc̅, have been excluded from the array, but all other 1-, 2-,

                                                                                                                                               39
