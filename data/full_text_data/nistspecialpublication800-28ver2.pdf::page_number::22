                                                                GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE

3.1.8    Limits of Safeguards

Completely defending against all attacks in an open network such as the Internet is not possible. At
minimum, the possibility exists for the occurrence of remotely launched denial of service attacks, which
consume resources and deny the processing of legitimate requests by flooding the target with bogus
requests. Distributed denial of service attacks, launched from a botnet under the control of a single
attacker, demonstrate both the ease in which the capacity of any Web site can be overwhelmed and the
value of having complete site redundancy for critical services.

3.2     Basic Threat Model

Active content operates at the application layer. Active content technologies allow code, often in the
form of a script, macro, or other mobile code representation, to execute when the document is rendered.
HTML and other related markup language documents, whether delivered via HTTP or another means,
provide rich mechanisms for conveying executable content. Nevertheless, it is important to note that
many other types of document formats, although not as rich in mechanisms or not conveyed through the
same means, have similar potential.

A more general view of the production and handling of active content is the producer-consumer model
illustrated in Figure 3-1, where a producer composes an electronic document containing some form of
executable code in addition to text, graphic images, audio, and video content. A producer could range
from a user creating macros for a word processing document to a Web server dynamically generating
Web pages. By some means, the document is transferred to a consumer who renders it with an
application, such as a word processor or Web browser. The execution environments provided for nearly
all active content technologies can impose a level of policy restrictions, from limiting the code’s access to
computational resources during a rendition of the document to only executing code from trusted
producers.




                                   Figure 3-1. Producer-Consumer Model

While any means used to compose, deliver, and render active content automatically is a concern, this
guide focuses on the Web, because the associated technologies are designed and implemented to work
together seamlessly under this framework, with a user often unaware of the security implications. Figure
3-2 illustrates a simplified Web-based transaction supported by HTTP’s client-server architecture. HTTP
enables any content to be conveyed from one platform (i.e., a Web server) to another (i.e., a client
browser) where it is rendered automatically, executing active content as required. As depicted in the

                                                     3-4
