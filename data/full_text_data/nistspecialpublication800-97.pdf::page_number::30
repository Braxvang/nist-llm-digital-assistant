ESTABLISHING WIRELESS ROBUST SECURITY NETWORKS: A GUIDE TO IEEE 802.11I




Shared key authentication is still weak because the AP is not authenticated to the STA, so there is no
assurance that the STA is communicating with a legitimate AP. Also, simple unilateral challenge-
response schemes have long been known to be weak unless they are carefully designed, with sufficient
entropy in the challenge, keys of the appropriate length, a strong hash function, and secure protocol
design. Although the challenge-response messages used for shared key authentication can prevent
successful replay of authentication traffic, the challenge-response process can be compromised by
methods such as man-in-the-middle attacks and off-line brute force or dictionary attacks. 17

Additional vulnerabilities in IEEE 802.11’s shared key authentication are known and documented. For
example, an attacker can eavesdrop, capturing and viewing the cleartext challenge value and the
encrypted response. The attacker can then analyze the two pieces of information to determine the WEP
key stream. Some organizations prefer using open system authentication because shared key
authentication provides so much information to eavesdroppers about the WEP key that it jeopardizes the
confidentiality and integrity that should be provided to the communications by the WEP key. Another
significant limitation of shared key authentication is that it authenticates the identity of devices but not
users. If an attacker gains access to a STA containing a WEP key, the attacker can use that key on any
other WEP-capable device to be authenticated and gain access to the WLAN.

Another major problem with shared key authentication is that pre-RSN IEEE 802.11 requires all devices
on a WLAN to use the same WEP key or the same small set of keys. This reduces accountability and
complicates troubleshooting and incident response efforts. If the WEP key is compromised, it needs to be
replaced as quickly as possible to prevent further malicious acts, because WEP keys are used not only for
access control, but also to protect confidentiality and integrity (as described in Sections 3.2.2 and 3.2.3).
Unfortunately, IEEE 802.11 does not specify any support for key management. When a WEP key needs
to be changed, the WLAN administrators have to implement their own methods for generating and
distributing a new key. The key needs to be replaced on all STAs and APs, which is a manual process for
many WLAN products. WLAN administrators also need to implement methods for archiving, auditing,
and destroying keys. Key management problems often limit the scalability of IEEE 802.11 WLANs.

In some cases, shared key authentication is weakened by implementations that use poor WEP keys. For
example, some implementations use the WLAN product’s default WEP key or set a trivial key, such as all
zeroes or all ones. The key should be randomly generated 18 so that it is not easily guessable. This will
delay attackers that capture network traffic and perform dictionary attacks against it, hoping to find the
key that decrypts the traffic successfully. WEP keys should be changed frequently to reduce the
likelihood and impact of any key compromises.

3.2.2    Encryption

The WEP protocol, part of the IEEE 802.11 standard, uses the RC4 stream cipher algorithm to encrypt
wireless communications, which protects their contents from disclosure to eavesdroppers. The standard
for WEP specifies support for a 40-bit WEP key only; however, many vendors offer non-standard
extensions to WEP that support key lengths of up to 128 or even 256 bits. WEP also uses a 24-bit value
known as an initialization vector (IV) as a seed value for initializing the cryptographic key stream. For

17
     Moreover, the IEEE 802.11 challenge-response scheme does not work properly. WEP encrypts the response by XORing the
     challenge with a pseudo-random key stream generated using a WEP key. The attacker can XOR the challenge and the
     response to expose the key stream, which can subsequently be used to authenticate.
18
     For more information about the significance and requirements of random number generation, see RFC 4086, Randomness
     Requirements for Security, found at http://www.ietf.org/rfc/rfc4086.txt. A more technical approach can be found in NIST
     SP 800-90, Recommendation for Random Number Generation Using Deterministic Random Bit Generators, available at
     http://csrc.nist.gov/publications/nistpubs/800-90/SP800-90_DRBG-June2006-final.pdf.


                                                            3-4
