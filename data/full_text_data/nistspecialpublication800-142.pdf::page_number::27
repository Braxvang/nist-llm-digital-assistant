                                                           Practical Combinatorial Testing
 _______________________________________________________
= 1.7 x 1010 possible settings. We clearly cannot test 17 billion possible settings, but all 3­
way interactions can be tested with only 33 tests, and all 4-way interactions with only 85.
This may seem surprising at first, but it results from the fact that every test of 34
parameters contains ⎜⎜⎛
                       34 ⎞                     ⎛ 34 ⎞
                          ⎟⎟ = 5,984 3-way and ⎜⎜ ⎟⎟ = 46,376 4-way combinations.
                      ⎝3⎠                       ⎝4⎠




                          Figure 12.    Panel with 34 switches.


4.3   Cost and Practical Considerations

        Combinatorial methods can be highly effective and reduce the cost of testing
substantially. For example, Justin Hunter has applied these methods to a wide variety of
test problems and consistently found both lower cost and more rapid error detection [30].
But as with most aspects of engineering, tradeoffs must be considered. Among the most
important is the question of when to stop testing, balancing the cost of testing against the
risk of failing to discover additional failures. An extensive body of research has been
devoted to this topic, and sophisticated models are available for determining when the cost
of further testing will exceed the expected benefits [10, 45]. Existing models for when to
stop testing can be applied to the combinatorial test approach also, but there is an additional
consideration: What is the appropriate interaction strength to use in this type of testing?

        To address these questions consider the number of tests at different interaction
strengths for an avionics software example [34] shown in Figure 13. While the number of
tests will be different (probably much smaller than in Figure 13) depending on the system
under test, the magnitude of difference between levels of t will be similar to Figure 13,
because the number of tests grows with vt, for parameters with v values. That is, the
number of tests grows with the exponent t, so we want to use the smallest interaction
strength that is appropriate for the problem. Intuitively, it seems that if no failures are
detected by t-way tests, then it may be reasonable to conduct additional testing only for t+1
interactions, but no greater if no additional failures are found at t+1. In the empirical
studies of software failures, the number of failures detected at t > 2 decreased
monotonically with t, so this heuristic seems to make sense: start testing using 2-way
(pairwise) combinations, continue increasing the interaction strength t until no errors are
detected by the t-way tests, then (optionally) try t+1 and ensure that no additional errors
are detected. As with other aspects of software development, this guideline is also
dependent on resources, time constraints, and cost-benefit considerations.



                                                                                                  21
