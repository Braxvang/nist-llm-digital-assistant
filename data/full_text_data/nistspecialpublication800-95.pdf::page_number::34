                                                                                           GUIDE TO SECURE WEB SERVICES



2.8     Web Services’ Interfaces with Network/Infrastructure Security Architectures

Because much of Web services security relies on XML Encryption and XML Signature or SSL/TLS, all
of which use X.509 digital certificates to store cryptographic keys, most Web services frameworks
seamlessly support and interface with a PKI. In particular, WS-Security supports the X.509 Certificate
Token Profile. While the Web service itself does not need to implement XKMS or non-XML PKI
protocols, PKI protocols should be supported by the host system to properly interact with the PKI.

In general, .NET and Java Web services rely on Windows and Java mechanisms, respectively, to store the
various certificates that will be used by the Web service. By default, these key storage mechanisms
require administrative interaction to fully interact with a PKI. Commercial off the shelf (COTS) products
are available to integrate with a PKI. Additional Web services can also be developed to interact with the
key management infrastructure. 22

Web services frameworks provide support beyond simply abstracting the technical SOAP
implementation. They often provide authentication and authorization services. Java Enterprise Edition
(Java EE) and .NET both provide client authentication via SSL/TLS as well as sophisticated authorization
services that can interface with any authentication mechanism. In particular, frameworks use widely used
and robust libraries for authentication and authorization, which make these implementations less likely
than others to have bugs. An additional security feature provided by Java and .NET frameworks is
sandboxing, which is designed to separate all actions of the Web service from the operating system.
Sandboxing affords added benefits to developers and administrators: stricter permissions and capabilities
than those provided by the operating system can be applied to a Web service, and the sandbox helps to
prevent the Web service from inadvertently or maliciously harming the underlying operating system,
providing the sandbox itself is robust against attack.

Web services frameworks provide a number of benefits to developers in addition to well-tested tools and
libraries: automatic creation of WSDL descriptors, client and server stubs, and potentially some
implementation code. While this support can greatly improve the productivity of the development team,
some developers may begin to rely on these tools when developing Web services and may not fully
understand the code that is automatically generated. Should such developers be required to use a different
development environment for Web services, they may not be adaptable and may inadvertently introduce
security vulnerabilities. Additionally, the use of non-vetted, automatically generated code can itself lead
to security vulnerabilities; most automatically generated code is intended merely to guide and aid
developers, not for production use.

Developers need to be fully versed in the libraries supported by the framework when dealing with
libraries that perform authentication, authorization, and other security functions that are not supported by
the base framework. For example, XACML and SAML provide a flexible and platform-independent
framework for distributed authorization. To properly implement XACML and SAML support may
require overriding the framework’s authentication mechanism at various points, which could lead to
potential vulnerabilities in the Web service application. Supporting SAML or WS-Security in place of
native authentication mechanisms may require the Web service to bypass authentication services provided
by the framework, leading to potentially vulnerable code. Until frameworks provide native support for
platform-independent authentication and authorization mechanisms, there will always be the potential for
custom-developed code to be inadequately robust and lead to potential security breaches.




22
      More information on PKI is available in NIST SP 800-32, Introduction to Public Key Technology and the Federal PKI
      Infrastructure, available at http://csrc.nist.gov/publications/nistpubs/.


                                                            2-19
