NIST SP 800-125A REV. 1                                                     SECURITY RECOMMENDATIONS FOR
                                                                        SERVER-BASED HYPERVISOR PLATFORMS

In general, functions HY-BF1 and HY-BF3 are offered by modules running in a kernel collectively called
“Hypervisor” while HY-BF2 is enabled by a software module that runs either in a dedicated VM (called
Device-driver VM) or in the hypervisor kernel itself. The functions HY-BF4 and HY-BF5 are performed by
a module called management or service console or through a kernel module. Just like the module that performs
the HY-BF2 function, the console is a software layer that is generally not built into the hypervisor kernel
but runs on top of it as a privileged VM and could be built either with a full-fledged OS installed inside it or
with an ultra-light OS used to present an Application Programming Interface (API) (shell and network
access) with utility functions that facilitate performing only the hypervisor-specific configuration and
administrative tasks.


1.2 Scope of this document

The architecture of a hypervisor deployed for server virtualization can be classified in different
ways:
   (a) Based on the entity over which the hypervisor installs – Type 1 Hypervisor or Type 2
       Hypervisor (already described)
   (b) Based on the type of virtualization
       - Full Virtualization – The hypervisor will expose the interface of a hardware device that
            is available in the real world to the VM and for which drivers are available for guest OS,
            and it will completely emulate the behavior of that device. Emulation allows the
            programs running in VMs to use the VM OS drivers that were designed to interact with
            the emulated device without installing any special driver or tool specified by the
            hypervisor vendor.
       - Para Virtualization - The hypervisor exposes a device that does not exists in the real
            world, which is just software only, and presents a lightweight interface. However, this
            scenario calls for having special drivers in the VM, sometimes requiring modification to
            the guest OS. This approach is intended to increase the performance level of the
            applications running in the VM, compared to the emulation approach adopted in full
            virtualization.

The trust model assumed for the hypervisor platform described in this document is as follows:
• All components in a VM are untrusted including the guest OS and its associated utilities (e.g.,
   guest device drivers) that run in the kernel space and all applications that run in the user space
• The device drivers that are implemented within the hypervisor platform are untrusted unless they
   carry a security certification
• The hypervisor kernel component that provides isolation between VMs is trusted
• The host OS is trusted for Type 2 hypervisors
• The hardware of the hypervisor host is trusted

With the background information on hypervisor architecture and the assumed trust model, the
scope of security recommendations for the five baseline functions (HY-BF1 through HY-BF5)
covers the following:
 • All tasks that relate to functions HY-BF1, HY-BF2, and HY-BF4
 • HY-BF3, which relates to the handling of hypercalls in para-virtualized hypervisors, is a
     trusted function of the hypervisor and not included in the security recommendations
 • All tasks under HY-BF5 are included, except for those related to the definition and
     configuration of virtual network (secure configuration of virtual networks is covered under a
     separate NIST document, SP 800-125B)

Recommendations to ensure overall platform integrity are also provided.

The security recommendations do not cover the following:

                                                       3
