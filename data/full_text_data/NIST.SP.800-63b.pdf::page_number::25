                                                                                             NIST SP 800-63B                                                        DIGITAL IDENTITY GUIDELINES:
                                                                                                                                                        AUTHENTICATION & LIFECYCLE MANAGEMENT

                                                                                             The verifier SHALL use approved encryption and an authenticated protected channel when
                                                                                             requesting memorized secrets in order to provide resistance to eavesdropping and MitM attacks.

                                                                                             Verifiers SHALL store memorized secrets in a form that is resistant to offline attacks.
                                                                                             Memorized secrets SHALL be salted and hashed using a suitable one-way key derivation
                                                                                             function. Key derivation functions take a password, a salt, and a cost factor as inputs then
                                                                                             generate a password hash. Their purpose is to make each password guessing trial by an attacker
                                                                                             who has obtained a password hash file expensive and therefore the cost of a guessing attack high
                                                                                             or prohibitive. Examples of suitable key derivation functions include Password-based Key
                                                                                             Derivation Function 2 (PBKDF2) [SP 800-132] and Balloon [BALLOON]. A memory-hard
                                                                                             function SHOULD be used because it increases the cost of an attack. The key derivation function
                                                                                             SHALL use an approved one-way function such as Keyed Hash Message Authentication Code
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-63b




                                                                                             (HMAC) [FIPS 198-1], any approved hash function in SP 800-107, Secure Hash Algorithm 3
                                                                                             (SHA-3) [FIPS 202], CMAC [SP 800-38B] or Keccak Message Authentication Code (KMAC),
                                                                                             Customizable SHAKE (cSHAKE), or ParallelHash [SP 800-185]. The chosen output length of
                                                                                             the key derivation function SHOULD be the same as the length of the underlying one-way
                                                                                             function output.

                                                                                             The salt SHALL be at least 32 bits in length and be chosen arbitrarily so as to minimize salt
                                                                                             value collisions among stored hashes. Both the salt value and the resulting hash SHALL be
                                                                                             stored for each subscriber using a memorized secret authenticator.

                                                                                             For PBKDF2, the cost factor is an iteration count: the more times the PBKDF2 function is
                                                                                             iterated, the longer it takes to compute the password hash. Therefore, the iteration count
                                                                                             SHOULD be as large as verification server performance will allow, typically at least 10,000
                                                                                             iterations.

                                                                                             In addition, verifiers SHOULD perform an additional iteration of a key derivation function using
                                                                                             a salt value that is secret and known only to the verifier. This salt value, if used, SHALL be
                                                                                             generated by an approved random bit generator [SP 800-90Ar1] and provide at least the
                                                                                             minimum security strength specified in the latest revision of SP 800-131A (112 bits as of the
                                                                                             date of this publication). The secret salt value SHALL be stored separately from the hashed
                                                                                             memorized secrets (e.g., in a specialized device like a hardware security module). With this
                                                                                             additional iteration, brute-force attacks on the hashed memorized secrets are impractical as long
                                                                                             as the secret salt value remains secret.

                                                                                             5.1.2   Look-Up Secrets

                                                                                                              A look-up secret authenticator is a physical or electronic record that stores a set
                                                                                                              of secrets shared between the claimant and the CSP. The claimant uses the
                                                                                                              authenticator to look up the appropriate secret(s) needed to respond to a prompt
                                                                                                              from the verifier. For example, the verifier may ask a claimant to provide a
                                                                                                              specific subset of the numeric or character strings printed on a card in table
                                                                                                              format. A common application of look-up secrets is the use of "recovery keys"
                                                                                             stored by the subscriber for use in the event another authenticator is lost or malfunctions. A look-
                                                                                             up secret is something you have.



                                                                                                                                             15
