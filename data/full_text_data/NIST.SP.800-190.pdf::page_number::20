                                                                                             NIST SP 800-190                                                APPLICATION CONTAINER SECURITY GUIDE


                                                                                                1. Developer systems (generate images and send them to testing and accreditation)
                                                                                                2. Testing and accreditation systems (validate and verify the contents of images, sign
                                                                                                   images, and send images to the registry)
                                                                                                3. Registries (store images and distribute images to the orchestrator upon request)
                                                                                                4. Orchestrators (convert images into containers and deploy containers to hosts)
                                                                                                5. Hosts (run and stop containers as directed by the orchestrator)
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-190




                                                                                                       Figure 3: Container Technology Architecture Tiers, Components, and Lifecycle Phases

                                                                                             Although there are many administrator system personas involved in the overall process, the
                                                                                             figure depicts only the administrator systems for the internal registry and the orchestrator.

                                                                                             The systems in gray (developer systems, testing and accreditation system, and administrator
                                                                                             systems) are outside the scope of the container technology architecture, but they do have
                                                                                             important interactions with it. In most organizations that use containers, the development and test
                                                                                             environments also leverage containers, and this consistency is one of the key benefits of using
                                                                                             containers. This document does not focus on systems in these environments because the
                                                                                             recommendations for securing them are largely the same as those for the production
                                                                                             environment. The systems in green (internal registry, external registry, and orchestrator) are core
                                                                                             components of a container technology architecture. Finally, the systems in orange (hosts with
                                                                                             containers) are where the containers are used.

                                                                                             Another way to understand the container technology architecture is to consider the container
                                                                                             lifecycle phases, which are depicted at the bottom of Figure 3. The three phases are discussed in
                                                                                             more detail below.

                                                                                             Because organizations are typically building and deploying many different apps at once, these
                                                                                             lifecycle phases often occur concurrently within the same organization and should not be seen as
                                                                                             progressive stages of maturity. Instead, think of them as cycles in an engine that is continuously
                                                                                             running. In this metaphor, each app is a cylinder within the engine, and different apps may be at
                                                                                             different phases of this lifecycle at the same time.

                                                                                                                                               8
