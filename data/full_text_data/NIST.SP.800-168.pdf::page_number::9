2. Definition and terminology

       Approximate matching is a generic term describing any technique designed to identify
       similarities between two digital artifacts. In this context, an artifact (or an object) is defined as
       an arbitrary byte sequence, such as a file, which has some meaningful interpretation.

       Different approximate matching methods may operate at different levels of abstraction. At the
       lowest level, generic techniques may detect the presence of common byte sequences
       (substrings) without any attempt to interpret the artifacts. At higher levels, approximate
       matching can incorporate more abstract analysis. In general lower level methods are expected
       to be faster and more generic in their applicability, whereas higher level methods are typically
       more targeted and require more processing.

       One common approach in security and forensic analysis is to find identical objects using
       cryptographic hashing. Approximate matching can be viewed as a generalization of that idea in
       that, instead of providing a yes/no {0, 1} answer to a comparison, it provides a range of
       outcomes, [0, 1], with the result interpreted as a measure of similarity.

 2.1   Use cases

       Broadly, there are two types of similarity queries that are of interest â€“ resemblance and
       containment [1]. In the case of resemblance, we compare two similarly sized objects and
       interpret the result as a measure of the commonality between them; for example, two
       successive versions of a piece of code are likely to resemble each other substantially. When the
       compared objects differ in size significantly, such as a file and a whole-disk image, the test for
       commonality is interpreted as a containment query because it addresses the question of
       whether the large object contains the smaller one.

       An approximate matching algorithm should address at least one of the following problems
       (divided according to whether the query type is (R)esemblance or (C)ontainment) [2, 3]:
            Object similarity detection (R): identify related artifacts, e.g., different versions of
            a document.
            Cross correlation (R): identify artifacts that share a common object, e.g., a
            Microsoft Word document and a PDF document containing the same image, or
            other embedded object.
            Embedded object detection (C): identify a given object inside an artifact, e.g., an
            image within a compound document or an executable inside a memory capture.
            Fragment detection (C): identify the presence of traces/fragments of a known
            artifact, e.g., identify the presence of a file in a network stream based on individual
            packets.
       In most analytical scenarios, approximate matching is used to filter data in, or out, based on a
       known reference set. In security monitoring applications, approximate matching could
       potentially be used to blacklist known bad artifacts, and (by extension) anything closely
       resembling them. However, approximate matching is not nearly as useful when it comes to
       whitelisting artifacts as malicious content can often be quite similar to benign content; e.g., a
       backdoored ssh server would approximately match regular one.


                                                    2
