      I. V. Bojanova, P. E. Black, Y. Yesha, Y. Wu, A Structured                              Developing good test cases is an intellectually
      Framework to Express Software Bugs. IEEE International                             demanding and critical task, and it has a strong impact
      Conference on Software Quality, Reliability & Security (QRS                        on the effectiveness and efficiency of the whole testing
      2016), Vienna, Austria, 08/01/2016 to 08/03/2016, (Aug                             process. This paper presents an automated generator
      2016).                                                                             of test cases, which are designed to evaluate source
                                                                                         code security analyzers. The generator produces
      https://doi.org/10.1109/QRS.2016.29                                                PHP: Hypertext Preprocessor (PHP) programs with
                                                                                         most common vulnerabilities embedded in various
                  To achieve higher levels of assurance for digital
                                                                                         code complexities. It also produces programs without
             systems, we need to answer questions such as, does
                                                                                         vulnerabilities to test for false positives. The generator is
             this software have bugs of these critical classes? Do
                                                                                         modular and extensible. We describe its internal design
             these two tools generally find the same set of bugs, or
                                                                                         and how it works. The generated PHP test cases were
             different, complimentary sets? Can we guarantee that
                                                                                         added to the Software Assurance Reference Dataset
             a new technique discovers all problems of this type? To
                                                                                         (SARD) and will be used to assess the effectiveness of
             answer such questions, we need a vastly improved way to
                                                                                         static analyzers. We conclude with the current state of
             describe classes of vulnerabilities and chains of failures.
                                                                                         the tool, its benefits and future work.
             This paper presents a descriptive framework that will lift
             the current realm of best efforts and useful heuristics.                F. E. Boland and C. D. De Oliveira, A Real World Software
             Our framework includes rigorous definitions and (static)                Assurance Test Suite, The 27th Annual IEEE Software
             characteristics of bug classes, along with their related                Technology Conference, Long Beach, CA, October 2015.
             dynamic properties, such as proximate, secondary, and
             tertiary causes and consequences (CCC), and sites. The                           The design of a test suite to test and measure
             paper discusses the buffer overflow class, the injection                    software assurance using automated tools must have
             class, and the interaction frequency control class, and                     the following characteristics: relevance, statistical
             provides examples of applying our taxonomy to describe                      significance, and inclusion ground truth. The IARPA
             particular vulnerabilities.                                                 (Intelligence Advanced Research Projects Activity)
                                                                                         STONESOUP (Securely Taking on Software of Uncertain
      A. M. Delaitre, C. D. De Oliveira, A. Hoole, I. Traore, Improving                  Provenance) Program [1] has produced such a test suite.
      Vulnerability Detection Measurement, 20th International                            Our presentation will characterize this test suite called
      Conference on Evaluation and Assessment in Software                                the STONESOUP Phase 3 Test Suite. This test suite
      Engineering, Limerick, Ireland, June 2016.                                         consists of 7769 individual test cases, of which 4581 are
                                                                                         in C and 3188 are in Java. All of these test cases may be
                  The Software Assurance Metrics and Tool Evaluation
                                                                                         accessed independently. Each test case is derived from
             (SAMATE) project at the National Institute of Standards
                                                                                         real-world open source applications. This test suite is
             and Technology (NIST) has created the Software
                                                                                         significant in that it is the first test suite of its kind (to our
             Assurance Reference Dataset (SARD) to provide
             researchers and software security assurance tool                            knowledge) to be based on large real-world code sets.
                                                                                         Our presentation will describe the test suite format and
             developers with a set of known security. Following an
                                                                                         contents, as well as the structure of the test cases in the
             empirical evaluation of a runtime monitoring framework,
                                                                                         test suite. Additional relevant information pertaining to
             deficiencies were discovered in two existing test suites
                                                                                         the test suite including the test case naming convention
             which led to a collaboration with NIST to provide
                                                                                         and how to specify the metadata xml file will also be
             replacements. Test Suites 45 and 46 are analyzed,
                                                                                         provided, containing all the instructions needed to build,
             discussed, and updated to improve accuracy, con-
                                                                                         execute and score a given test case.
             sistency, reciseness, and automation. Empirical results
             show metrics such as recall, precision, and F-Measure                   R. Chandramouli, Analysis of Virtual Networking Options
             are all impacted by invalid base assumptions regarding                  for Securing Virtual Machines, Seventh International
             the test suites.                                                        Conference on Cloud Computing, GRIDs, and Virtualization
      B. Stivalet and E. N. Fong, Large Scale Generation                             (CLOUD COMPUTING 2016), Rome, Italy, March 20-24, 2016,
                                                                                     pp. 95-102.
      of Complex and Faulty PHP Test Cases, 2016 IEEE
      International Conference on Software Testing, Verification                     http://www.thinkmind.org/download.php?articleid=cloud_
      and Validation (ICST), Chicago, IL, April 2016,                                computing_2016_5_20_20037
      https://doi.org/10.1109/ICST.2016.43                                                                                                                       133



T H I S P U B L I C AT I O N I S AVA I L A B L E F R E E O F C H A R G E F R O M :        I T L C Y B E R S E C U R I T Y P U B L I C AT I O N S   |   FY 2016
h t t p : // d x . d o i . o r g / 1 0 . 6 0 2 8 / N I S T . S P. 8 0 0 - 1 9 5
