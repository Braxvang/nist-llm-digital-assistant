                                                           Practical Combinatorial Testing
 _______________________________________________________
parameters are boolean, and we will use 0 and 1 for false and true values respectively. For
day of the week, there are only seven values, so these can all be used. However, hour of
the day presents a problem. Recall that the number of tests generated for n parameters is
proportional to vt, where v is the number of values and t is the interaction level (2-way to 6Â­
way). For all boolean values and 4-way testing, therefore, the number of tests will be some
multiple of 24. But consider what happens with a large number of possible values, such as
24 hours. The number of tests will be proportional to 244 = 331,736. For this example,
time is given in minutes, which would obviously be completely intractable. Therefore, we
must select representative values for the hour parameter. This problem occurs in all types
of testing, not just with combinatorial methods, and good methods have been developed to
deal with it. Most testers are already familiar with two of these: equivalence partitioning
and boundary value analysis. Additional background on these methods can be found in
software testing texts such as Ammann and Offutt [2], Beizer [4], Copeland [21], Mathur
[45], and Myers [52].

                            Parameter     Values
                            emp           0,1
                            time          ??
                            day           m,tu,w,th,f,sa,su
                            auth          0, 1
                            aud           0, 1
        Figure 10.      Parameters and values for access control example.


      Both of these intuitively obvious methods will produce a smaller set of values that
should be adequate for testing purposes, by dividing the possible values into partitions that
are meaningful for the program being tested. One value is selected for each partition. The
objective is to partition the input space such that any value selected from the partition will
affect the program under test in the same way as any other value in the partition. Thus,
ideally if a test case contains a parameter x which has value y, replacing y with any other
value from the partition will not affect the test case result. This ideal may not always be
achieved in practice.

     How should the partitions be determined? One obvious, but not necessarily good,
approach is to simply select values from various points on the range of a variable. For
example, if capacity can range from 0 to 20,000, it might seem sensible to select 0, 10,000,
and 20,000 as possible values. But this approach is likely to miss important cases that
depend on the specific requirements of the system under test. Some judgment is involved,
but partitions are usually best determined from the specification. In this example, 9 am and
5 pm are significant, so 0540 (9 hours past midnight) and 1020 (17 hours past midnight)
determine the appropriate partitions:




      0000                         0540                    1020                   1440




                                                                                                  19
