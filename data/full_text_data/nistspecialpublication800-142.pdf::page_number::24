Practical Combinatorial Testing
________________________________________________________________


4 INPUT PARAMETER TESTING

        As noted in the introduction, the key advantage of combinatorial testing derives
from the fact that all, or nearly all, software failures appear to involve interactions of only a
few parameters. Using combinatorial testing to select configurations can make testing
more efficient, but it can be even more effective when used to select input parameter
values. Testers traditionally develop scenarios of how an application will be used, then
select inputs that will exercise each of the application features using representative values,
normally supplemented with extreme values to test performance and reliability. The
problem with this often ad hoc approach is that unusual combinations will usually be
missed, so a system may pass all tests and work well under normal circumstances, but
eventually encounter a combination of inputs that it fails to process correctly.

        By testing all t-way combinations, for some specified level of t, combinatorial
testing can help to avoid this type of situation. In this chapter we work through a small
example to illustrate the use of these methods.

4.1     Example Access Control Module

          The system under test is an access control module that implements the following
policy:

          Access is allowed if and only if:
             • the subject is an employee
                AND current time is between 9 am and 5 pm
                AND it is not a weekend
             • OR subject is an employee with a special authorization code
             • OR subject is an auditor
                AND the time is between 9 am and 5 pm
                (not constrained to weekdays).

     The input parameters for this module are shown in Figure 9:
                    emp: boolean;
                    time: 0..1440; // time in minutes
                    day:   {m,tu,w,th,f,sa,su};
                    auth: boolean;
                    aud: boolean;

                Figure 9.      Access control module input parameters.


        Our task is to develop a covering array of tests for these inputs. The first step will
be to develop a table of parameters and possible values, similar to that in Section 3.1 in the
previous chapter. The only difference is that in this case we are dealing with input
parameters rather than configuration options. For the most part, the task is simple: we just
take the values directly from the specifications or code, as shown in Figure 10. Several


18
