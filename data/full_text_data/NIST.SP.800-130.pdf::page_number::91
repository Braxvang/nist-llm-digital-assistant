SP 800-130                                                              August 2013



capable of immediately taking over the responsibilities of the primary system. Some
systems synchronize periodically and have a catch-up procedure to bring the backup
system up to the state that the primary system had just before the failure occurred.

It is essential that backup systems have as much independence from the primary system
as possible so that a failure to the primary system does not also result in the same failure
to the backup. For example, a power surge on a common power line could cause both the
primary and its backup to fail. In order to maximize independence, it is best not to co-
locate a backup system with the primary system. Multiple backup systems can be used to
provide error detection capabilities. For example, if three systems are all performing the
same functions, then the failure of any one system can be detected and corrected by
taking the majority vote of the three systems as the valid result. Since redundancies
increase the cost of providing services, system vendors and CKMS owners strive to find
an optimum trade-off between redundancy and cost.

FR:10.4 The CKMS design shall specify the strategy for backup and recovery from
failures of hardware components and devices.

10.5 System Software Failure
Software failures are typically of two types:
    a. Software that was incorrectly written so that it does not perform as desired when a
       particular condition occurs, and
    b. Software that was written correctly, but has been garbled when it resides in
       memory before it is executed.

Many software failures can be avoided by writing code using good, well-established
programming practices. Several books have been written on this topic that involve the use
of good programming procedures, addressing boundary conditions, protecting against
memory overflows, code analysis, and proper software testing.

Failures that garble code should be detected as soon as possible. This may be
accomplished by validating an error detection code or known-answer test on the software
before it is run. If an error is detected, the program can be implemented to enter an error
state and output an error indicator. This permits the error to be detected and repaired
before the code is used operationally. These tests can also be executed periodically as
desired. Redundant systems, as previously discussed in Section 10.4, can also be used to
recover from this type of failure.

When the CKMS in a primary facility is recovered to a known secure state, some of the
data created since the last secure state may be lost. A CKMS should be implemented and
operated under the assumption that a catastrophe will eventually occur. Therefore, it is
recommended that full secure-state system backups be made on a regular basis, and that
the latest CKMS secure state be reloaded into a repaired and ready CKMS.



                                            83
