ability to measure an enterprise’s software flaws and misconfiguration is vital, yet that vulnerability
state cannot be measured if those flaws are undiscovered or undisclosed. CRA contributed to
the draft of the Recommendations for Federal Vulnerability Disclosure Guidelines (SP 800-216).
The guidance gives recommendations on the disclosure process for security vulnerabilities of
information systems in response to the Internet of Things Cybersecurity Improvement Act of 2020.
CRA also collected and adjudicated public comments and initiated the research to update the
Performance Measurement Guide for Information Security (SP 800-55, Revision 1).

Software Assurance Metrics and Tool Evaluation (SAMATE)
The SAMATE project conducted by the Software and Systems Division (SSD) is dedicated to
improving software assurance by developing methods to enable software tool evaluations,
measuring the effectiveness of tools and techniques, and identifying gaps in the available tools and
methods. Major efforts include defining software error classes (software bugs), compiling a list of
programs with known bugs, and enabling a better understanding of tool effectiveness.1 In FY 2021,
NIST Information Technology Laboratory (ITL) published Guidelines on Minimum Standards for
Developer Verification of Software (NISTIR 8397). Developed in consultation with others at NIST,
National Security Agency (NSA), and numerous outside organizations, this report responded to a
portion of Executive Order (EO) 14028, Improving the Nation’s Cybersecurity.

•   The Bugs Framework (BF) is a language-independent classification of software bugs and
    weaknesses that allows precise descriptions of vulnerabilities that exploit them. In FY 2021,
    NIST published the Input/Output Check Bugs Model, the Data Validation Bugs class (which
    also defines five types of Injection Errors), and the Data Verification Bugs class.
•   The Software Assurance Reference Dataset (SARD) is an extensive collection of programs
    with precise software bug types and locations. The programs are in C, C++, Java, PHP, and
    C#, covering over 150 classes of weaknesses. In FY 2021, NIST produced a beta version of
    redesigned SARD, which has enhanced capabilities.
•   Static Analysis Tool Exposition (SATE) advances research in static analysis tools that find
    security-relevant weaknesses in source code. NIST provides a set of programs to toolmakers,
    and they run their tools and return tool outputs for analysis. In FY 2021, NIST continued the
    analysis of tool outputs for SATE VI.

Automated Combinatorial Testing (ACT)
ACT research is focused on the application of combinatorial methods for the measurement and
assurance of artificial intelligence (AI) and machine learning (ML) systems. The NIST ACT research
team developed a new method and tool for analyzing and explaining the decisions of AI/ML
algorithms and presented this research to U.S. Air Force and U.S. Army researchers. The project
team has also collaborated with Virginia Tech on transfer learning problems and applications of
combinatorial methods to assured autonomy. Under an interagency agreement with NASA (National
Aeronautics and Space Administration), this research will be applied to advanced air mobility.

1       Classes and description of the Bugs Framework are described at https://csrc.nist.gov/CSRC/media/Pre-
sentations/Foundations-of-Software-Assurance/images-media/3_software-assurance_pblack.pdf

NIST/ITL FY 2021 ANNUAL CYBERSECURITY AND PRIVACY REPORT
2 | Cybersecurity Measurement                                                                                  7
