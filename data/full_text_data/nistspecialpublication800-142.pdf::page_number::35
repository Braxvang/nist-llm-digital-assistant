                                                           Practical Combinatorial Testing
 _______________________________________________________
•      Condition coverage: The percentage of conditions within decision expressions
that have been evaluated to both true and false. Note that 100% condition coverage does
not guarantee 100% decision coverage. For example, “if (A || B) {do something}
else {do something else}” is tested with [0 1], [1 0], then A and B will both have
been evaluated to 0 and 1, but the else branch will not be taken because neither test leaves
both A and B false.

•       Modified condition decision coverage (MCDC): This is a strong coverage
criterion that is required by the US Federal Aviation Administration for Level A
(catastrophic failure consequence) software; i.e., software whose failure could lead to
complete loss of life. It requires that every condition in a decision in the program has
taken on all possible outcomes at least once, and each condition has been shown to
independently affect the decision outcome, and that each entry and exit point have been
invoked at least once.

6.2     Combinatorial Coverage

     Note that the coverage measures above depend on access to program source code.
Combinatorial testing, in contrast, is a black box technique. Inputs are specified and
expected results determined from some form of specification. The program is then treated
as simply a processor that accepts inputs and produces outputs, with no knowledge
expected of its inner workings.

       Even in the absence of knowledge about a program’s inner structure, we can apply
combinatorial methods to produce precise and useful measures. In this case, we measure
the state space of inputs. Suppose we have a program that accepts two inputs, x and y, with
10 values each. Then the input state space consists of the 102 = 100 pairs of x and y values,
which can be pictured as a checkerboard square of 10 rows by 10 columns. With three
inputs, x, y, and z, we would have a cube with 103 = 1,000 points in its input state space.
Extending the example to n inputs we would have a (hard to visualize) hypercube of n
dimensions with 10n points. Exhaustive testing would require inputs of all 10n
combinations, but combinatorial testing could be used to reduce the size of the test set.

     How should state space coverage be measured? Looking closely at the nature of
combinatorial testing leads to several measures that are useful. We begin by introducing
what will be called a variable-value configuration.

Definition. For a set of t variables, a variable-value configuration is a set of t valid values,
one for each of the variables.

Example. Given four binary variables, a, b, c, and d, a=0, c=1, d=0 is a variable-value
configuration, and a=1, c=1, d=0 is a different variable-value configuration for the same
three variables a, c, and d.

6.2.1   Simple t -way combination coverage
      Of the total number of t-way combinations for a given collection of variables, what
percentage will be covered by the test set? If the test set is a covering array, then coverage


                                                                                                   29
