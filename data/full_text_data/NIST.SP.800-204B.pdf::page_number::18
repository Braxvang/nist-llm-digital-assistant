                                                                                              NIST SP 800-204B                                                    ABAC FOR MICROSERVICES-BASED
                                                                                                                                                                APPLICATIONS USING A SERVICE MESH

                                                                                                 decisions and performing policy reviews (i.e., determining the set of resources that a user can
                                                                                                 access, determining the set of users who can access a resource) [12,13].

                                                                                              The functional architectures for these two representational structures are given in Figures 3.1 and
                                                                                              3.2, respectively. It must be mentioned that there are certain open-source access control engines,
                                                                                              such as Open Policy Agent (OPA) and Casbin, that have the capability to define ABAC policies
                                                                                              and enforce them just like XACML implementations. A brief description of the modules in these
                                                                                              two functional architectures is as follows:

                                                                                              1. Policy Decision Point (PDP) – This is the core module of the ABAC functional architecture
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204B




                                                                                              that computes decisions to permit or deny user access requests for performing actions on
                                                                                              resources (application objects). Requests are received from and responses are sent to a module
                                                                                              called Policy Enforcement Point (PEP) in both representations.
                                                                                              2. Policy Enforcement Point (PEP) – This module is part of the application’s platform and is
                                                                                              tightly integrated with the application. It is designed to intercept all access requests and either
                                                                                              perform deny/permit actions on its own or consult an external PDP module.
                                                                                              3. Policy Information Point (PIP)
                                                                                              In the XACML representation, this is a module that contains the database of attributes and their
                                                                                              associated values for all application-relevant objects or resources. The information here is used
                                                                                              to extract the attributes and associated values for users and resources found in the access request.
                                                                                              The extracted attribute values are then matched to the target clause, which in turn is used to find
                                                                                              the applicable target policies in the Policy Retrieval Point (PRP) (described below).
                                                                                              The NGAC representation is a repository of association relations of the form (u-ai, op-i, o-ai) for
                                                                                              a given pc-i, where u-ai and o-ai are attribute values associated with a user and object (resource),
                                                                                              respectively[11]. op-i denotes a set of allowed operations, and pc-i is an instance of the
                                                                                              governing policy class. An association relation can be generically defined as a configured
                                                                                              relation that defines an allocation of access rights (e.g., read, write) among policy elements
                                                                                              (attribute values of user and object) that enables certain modes of access.
                                                                                              To minimize the set of association relations in the authorization database (e.g., having triples to
                                                                                              represent every user and object in the application), containment relations of the form (U < u-ai)
                                                                                              are used to show the members of the user group and object group represented in the association
                                                                                              relations. Instead of using the individual policy elements (e.g., u-ai, o-ai), the containment
                                                                                              relation will use the powerset (2PE) of the set of all policy elements PE, which contain all
                                                                                              possible subsets of the set PE, in formulating association relations. In addition, the same set of
                                                                                              containment relations is used to denote the applicable policies for each object as well (O < pc-i).
                                                                                              Once the applicable policies for an object O are known, the association relations for that pc-i and
                                                                                              all o-ai (attribute values of that object) will provide the allowable set of users and operations for
                                                                                              the Object O.
                                                                                              4. Policy Retrieval Point (PRP) – In the XACML representation, this module is the repository
                                                                                              for authorization policies expressed as logical formulas involving predicates on attribute values.
                                                                                              The policy representation also contains the target resources that are covered by the policy. The
                                                                                              resources requested in the access request are matched to these targets to retrieve the applicable

                                                                                                                                               10
