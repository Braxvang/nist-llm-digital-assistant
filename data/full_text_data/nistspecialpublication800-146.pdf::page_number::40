                                                            CLOUD COMPUTING SYNOPSIS AND RECOMMENDATIONS



running applications in separate virtual machines or on separate physical computers, but those approaches
are more expensive. Figure 11 allows a single physical machine to serve some number of clients
simultaneously, but this approach is still expensive in that all the overhead costs of a separate copy of an
application and a separate database must be incurred for each active client.




                        Figure 12: SaaS Isolation vs. Efficiency Favoring Efficiency

Figure 12 depicts a more efficient approach. In this approach, the provider reengineers the SaaS
application to concurrently serve multiple clients and to save the data in a combined database. The
separation between client processing and data in the approach shown in Figure 12 depends on careful
engineering of the application since the application may be processing data belonging to multiple clients
at a single time. Additionally, the application must manage scheduling issues to prevent the innocent or
malevolent actions of one client from degrading the performance experienced by another. By sharing a
single program and database in this manner, the approach of Figure 12 lowers costs for the provider (but
at an increased security risk to consumers). It should be observed that there are a number of other
potential engineering tradeoffs in how processing and data storage is implemented by a SaaS provider.
For instance, many different SaaS applications could be concurrently implemented in a single unified
application process and data storage system. Additionally, the actual computing resources (processes
running on a physical computer) may be obtained in a variety of ways ranging from direct provision via
the SaaS provider's data center to hardware rentals via an IaaS cloud provider. These different types of
service configurations also affect the security of consumer workloads since they affect the mechanisms
protecting consumer data and the locations where client programs and data reside. Additionally,
portability of workloads requires a level of compatibility and interoperability between SaaS applications.
A general discussion of engineering tradeoffs for a SaaS application is presented in [Cho08].

5.5   Candidate Application Classes

SaaS applications can work well when there is reliable, low-latency networking with adequate bandwidth
to import and export expected quantities of consumer data (and assuming no malicious attacks, e.g.,
denial of service). The performance with respect to latency and data transfer speed varies depending on
the type of application. For example, numerous SaaS service offerings exist in the following broad areas:

ÔÅÆ Business logic. Applications in this area connect businesses with their suppliers, employees,
  investors, and customers. Examples include invoicing, funds transfer, inventory management, and
  customer relationship management.




                                                    5-7
