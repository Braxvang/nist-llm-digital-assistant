                                                                     GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



Server-side processing methods also have been developed that take advantage of these more efficient
interfaces and are easier to program; for example, Microsoft ASP.NET for use with Internet Information
Services (IIS) servers, Java Server Pages supported by Sun and Netscape, and the freeware PHP
Hypertext Preprocessor (PHP) supported by most major Web platforms, including Apache and IIS. In
general, the techniques for dynamically generating content and improving Web server capabilities tend to
be proprietary and used by software manufacturers to differentiate their product from others in the
marketplace. Further details of common content generating technologies, including Server Side Includes
(SSI), Active Server Pages (ASP), Java Server Pages (JSP), and PHP, are discussed in Section 4.


        Web Scripting â€“ Client vs. Server: It is important to distinguish scripts run by the browser
        (i.e., client-side scripting) from those run by the Web server (i.e., server-side scripting). Client-
        side scripting and server-side scripting are distinct concepts that serve different purposes. For
        example, since a server does not interact directly with a user, server-side scripting requires no
        human-to-computer interface capability. Furthermore, the Web browser and server each
        supply their own unique environment for executing scripts.

        Client-side scripting is used to make Web pages more interactive and functional after they
        have been sent to the browser. For example, client-side scripts might involve validating data
        entry fields on an HTML form so the user gets immediate feedback when a mistake occurs, or
        integrating an ActiveX control or Java applet with another component on the page so that they
        interact.

        A Web browser environment for client-side scripting includes the objects that represent the
        user interface (e.g., windows, menus, dialog boxes, text areas, anchors, frames, cookies, and
        input/output) and a means to associate scripting code with events at that interface (e.g.,
        change of focus, selection, loading and unloading of text and images, form submission, error
        and abort, and mouse actions). Scripting code appears within the HTML, and the displayed
        page is a combination of fixed and computed text, images, and user interface elements. Since
        the scripts react to user interaction, there is no need for a main program.

        A Web server provides a different environment for scripting, which includes objects
        representing requests, clients, and files, and mechanisms to lock and share data. All server-
        side scripting takes place before the resource (e.g., a Web page) is sent to the browser. The
        server-side scripts, for example, may involve creating a Web page dynamically by querying a
        database and formatting the results into HTML for delivery to the browser.

        By using both client-side and server-side scripting in a Web-based application, it is possible to
        distribute processing effectively between the browser and Web server, while providing a
        customized user interface.

        Client-side scripting depends on the browser that processes a script, which requires
        awareness of the capabilities of browsers that might be encountered. While server-side
        scripting, such as with ASP pages, can create pure HTML pages acceptable by any browser,
        they are not necessarily portable to or compatible with the Web server software running
        elsewhere in an organization.




                                                        2-8
