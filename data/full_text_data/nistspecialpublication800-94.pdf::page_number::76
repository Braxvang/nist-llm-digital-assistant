GUIDE TO INTRUSION DETECTION AND PREVENTION SYSTEMS (IDPS)



7.2.1   Logging Capabilities

Host-based IDPSs typically perform extensive logging of data related to detected events. This data can be
used to confirm the validity of alerts, to investigate incidents, and to correlate events between the host-
based IDPS and other logging sources. Data fields commonly logged by host-based IDPSs include the
following:

 Timestamp (usually date and time)
 Event or alert type
 Rating (e.g., priority, severity, impact, confidence)
 Event details specific to the type of event, such as IP address and port information, application
  information, filenames and paths, and user IDs
 Prevention action performed (if any).
7.2.2   Detection Capabilities

Most host-based IDPSs have the capability to detect several types of malicious activity. They often use a
combination of signature-based detection techniques to identify known attacks, and anomaly-based
detection techniques with policies or rulesets to identify previously unknown attacks. This section
discusses the following aspects of host-based IDPS detection capabilities:

 Types of events detected
 Detection accuracy
 Tuning and customization
 Technology limitations.
7.2.2.1 Types of Events Detected

The types of events detected by host-based IDPSs vary considerably based primarily on the detection
techniques that they use. Some host-based IDPS products offer several of these detection techniques,
while others focus on a few or one. For example, several products only analyze network traffic, and other
products only check the integrity of a host’s critical files. Specific techniques commonly used in host-
based IDPSs include the following:

 Code Analysis. Agents might use one or more of the techniques listed below to identify malicious
  activity by analyzing attempts to execute code. All of these techniques are helpful at stopping
  malware and can also prevent other attacks, such as some that would permit unauthorized access,
  code execution, or escalation of privileges.

    –   Code behavior analysis. Before code is run normally on a host, it can first be executed in a
        virtual environment or a sandbox to analyze its behavior and compare it to profiles or rules of
        known good and bad behavior. For example, when a particular piece of code is executed, it might
        attempt to gain administrator-level privileges or to overwrite a system executable.

    –   Buffer overflow detection. Attempts to perform stack and heap buffer overflows can be
        detected by looking for their typical characteristics, such as certain sequences of instructions and
        attempts to access portions of memory other than those allocated to the process.


                                                    7-4
