                                                  GUIDE TO INTRUSION DETECTION AND PREVENTION SYSTEMS (IDPS)



    clients can access to generate wireless network communications. Attacks can be issued from one or
    more wireless clients, and rogue access points can be deployed in the test environment. If the sensors
    will be integrated with an IDPS infrastructure, any testing of this should also be performed in the test
    environment to evaluate performance, operation and maintenance, and design and implementation
    characteristics without jeopardizing the production infrastructure (e.g., an IDPS sensor could have
    vulnerabilities that could be exploited by attackers within range of the sensor).
 Sensors bundled with wireless switches. Generally, this testing should be performed by setting up a
  test switch with sensor software in a test environment like the one described above for other types of
  wireless sensors. The same type of testing described above should be performed.
9.6.2.3 NBA

If the NBA products will be directly monitoring network traffic, then real-world and lab testing of that
capability should be performed based on the guidance given for testing network-based IDPSs. If the
NBA products will be monitoring network flow logs from other devices, the preferred method for real-
world testing of that capability is to set up a separate network and forward the logs from the devices over
that network to the NBA sensors. This protects the NBA solution and allows the bandwidth used by the
solution to be measured easily. If the production networks will be used instead of a separate network,
testers need to be very careful not to overwhelm the production networks with the volume of logs,
particularly if multiple NBA products are being tested simultaneously. Testing can also be performed in a
lab environment by providing copies of production logs to the NBA products. NBA product lab testing is
also beneficial for the same reasons cited for network-based IDPS lab testing: evaluating prevention
capabilities, inline sensor performance, and product design and implementation-related characteristics.

9.6.2.4 Host-Based

Host-based IDPSs are typically more challenging to perform real-world testing for than any other type of
IDPS. Agents alter the hosts that they monitor and can adversely affect their performance and
functionality (e.g., IDPS shims interfering with other applications); appliance-based IDPSs are deployed
inline in front of production systems. The methods to be used for testing host-based IDPSs should be
selected primarily by the roles of the hosts to be protected:

 A server (including a single application service on a server). Testing should be performed in a test
  environment only. For example, a test server could be created that mimics a production server or
  even uses one of its backups. Typical activity directed at the server, both benign and malicious,
  should be generated by test systems (e.g., scripts or tools to create HTTP requests) and monitored by
  the host-based IDPS. Testers can perform attacks against the server and monitor the prevention
  actions performed without endangering any production systems. Testers can also measure the impact
  of the host-based IDPS on the performance of the server and evaluate the reliability and security of
  the host-based IDPS by attempting to disrupt it.
 A client host (desktop or laptop). Initial testing should be performed in a test environment to
  identify major performance and functionality problems that host-based IDPSs might introduce. The
  reliability and security of the IDPS can also be evaluated in a test environment. Testing of agents’
  security capabilities, prevention actions, and other characteristics can be conducted in both a test
  environment and a production environment because the risk posed by IDPS failure to the production
  environment is very low. Attacks should only be issued against the hosts in a test environment, while
  the agents’ behavior against benign activity can be tested most easily in a real-world environment.
  For example, a few of the testers might volunteer to have IDPS agents installed on their production
  desktops and document the agents’ behavior and any problems they cause for a week or two. This
  provides true real-world testing of the agents. For agents that necessitate user interaction, such as


                                                   9-17
