                                                                                              NIST SP 800-204B                                                                     ABAC FOR MICROSERVICES-BASED
                                                                                                                                                                                 APPLICATIONS USING A SERVICE MESH

                                                                                              subsets of nodes saw spikes in traffic at key times, with the right usage analysis, one could
                                                                                              potentially reschedule those jobs across machines in order to save costs and optimize
                                                                                              performance [7].

                                                                                              Similarly, Kubernetes offers features to monitor the health of the microservices (e.g., check the
                                                                                              status and readiness). The data to perform these functions is configured in declarative
                                                                                              deployment documents, known as Yet Another Markup Language (YAML), that describe the
                                                                                              ports that a pod’s containers are listening on. One can specify what to do when services do not
                                                                                              start, do not perform as normal, or exit unexpectedly.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204B




                                                                                              2.1.1    Limitations of Reference Orchestration and Resource Management Platform for
                                                                                                       Security

                                                                                              Microservices-based applications require several application infrastructure and security services,
                                                                                              such as authentication, authorization, monitoring, logging, auditing, traffic control, caching,
                                                                                              secure ingress, service-to-service, and egress communication. The reference hosting platform
                                                                                              with interfaces for efficiently scheduling and running the multiple services of an application
                                                                                              lacks the interfaces to run a set of application infrastructure services in a coordinated and
                                                                                              consistent manner. Moreover, the following advantages of API architecture are not fully
                                                                                              leveraged in the reference platform [8]:
                                                                                              ● A unified way to apply cross-cutting concernsOut-of-the-box plugins to quickly address
                                                                                                  cross-cutting concerns
                                                                                              ● A framework for building custom plugins
                                                                                              ● Managing security in a single plane
                                                                                              ● Reduced operation complexity
                                                                                              ● Easy governance of third-party developers and integrators
                                                                                              ● Saving the cost of development and operations

                                                                                              By default, communication between Kubernetes containers is insecure, and there is no easy way
                                                                                              to enforce TLS between pods since this would result in individually maintaining hundreds of
                                                                                              TLS certificates. Pods that communicate do not apply identity and access management between
                                                                                              themselves. Though there are tools to define a Kubernetes network policy that implements a
                                                                                              firewall between pods, they provide a layer 3 solution rather than a layer 7 solution, which is
                                                                                              what most modern firewalls do (a few tools for defining more sophisticated network policies are
                                                                                              available). This means that while one can know the source of traffic, one cannot peek into the
                                                                                              data packets to understand what they contain. It does not allow for making vital metadata-driven
                                                                                              decisions, such as routing on a new version of a pod based on an Hypertext Transfer Protocol
                                                                                              (HTTP) header.

                                                                                              There are Kubernetes ingress objects that provide a reverse proxy based on layer 7, but they do
                                                                                              not offer anything more than simple traffic routing. 1 Kubernetes offers different ways of

                                                                                              1 Custom development can extend Kubernetes ingress controllers and objects to provide more advanced capabilities. In fact,

                                                                                               some service mesh implementations in some kubernetes environments leverage this as a way to route traffic. Further, the
                                                                                               network configuration for the orchestration platform (Kubernetes) is not an integral part of the service mesh. Since
                                                                                               microservices are implemented as containers, the network configuration is dependent on the associated Container Network
                                                                                               Interface (CNI) implementation. Hence, the ability to have advanced networking has to do with the software that the operator
                                                                                                                                                             6
