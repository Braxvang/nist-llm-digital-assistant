Practical Combinatorial Testing
________________________________________________________________


2 COMBINATORIAL METHODS IN TESTING

     Developers of large data-intensive software often notice an interesting—though not
surprising—phenomenon: When usage of an application jumps dramatically, components
that have operated for months without trouble suddenly develop previously undetected
errors. For example, the application may have been installed on a different OS-hardware­
DBMS-networking platform, or newly added customers may have account records with an
oddball combination of values that have not occurred before. Some of these rare
combinations trigger failures that have escaped previous testing and extensive use. Such
failures are known as interaction failures, because they are only exposed when two or more
input values interact to cause the program to reach an incorrect result.

     Combinatorial testing can help detect problems like this early in the testing life cycle.
The key insight underlying t-way combinatorial testing is that not every parameter
contributes to every failure and most failures are triggered by a single parameter value or
interactions between a relatively small number of parameters (for more on the number of
parameters interacting in failures, see Appendix B). To detect interaction failures, software
developers often use “pairwise testing”, in which all possible pairs of parameter values are
covered by at least one test. Its effectiveness is based on the observation that software
failures often involve interactions between parameters. For example, a router may be
observed to fail only for a particular protocol when packet volume exceeds a certain rate, a
2-way interaction between protocol type and packet rate. Figure 1 illustrates how such a 2­
way interaction may happen in code. Note that the failure will only be triggered when both
pressure < 10 and volume > 300 are true.
                 if (pressure < 10) {
                      // do something
                      if (volume > 300) {
                            faulty code! BOOM!
                      }
                      else {
                            good code, no problem
                      }
                 }
                 else {
                      // do something else
                 }

Figure 1.      2­way interaction failure triggered only when two conditions are
                                       true.


    Pairwise testing can be highly effective and good tools are available to generate arrays
with all pairs of parameter value combinations. But until recently only a handful of tools
could generate combinations beyond 2-way, and most that did could require impractically
long times to generate 3-way, 4-way, or 5-way arrays because the generation process is
mathematically complex. Pairwise testing, i.e. 2-way combinations, has come to be



4
