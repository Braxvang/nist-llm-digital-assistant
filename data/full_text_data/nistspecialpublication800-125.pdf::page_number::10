                                                        GUIDE TO SECURITY FOR FULL VIRTUALIZATION TECHNOLOGIES



2.    Introduction to Full Virtualization

Virtualization is the simulation of the software and/or hardware upon which other software runs. This
simulated environment is called a virtual machine (VM). There are many forms of virtualization,
distinguished primarily by computing architecture layer. For example, application virtualization provides
a virtual implementation of the application programming interface (API) that a running application
expects to use, allowing applications developed for one platform to run on another without modifying the
application itself. The Java Virtual Machine (JVM) is an example of application virtualization; it acts as
an intermediary between the Java application code and the operating system (OS). Another form of
virtualization, known as operating system virtualization, provides a virtual implementation of the OS
interface that can be used to run applications written for the same OS as the host, with each application in
a separate VM container.

Application virtualization and operating system virtualization are outside the scope of this publication.
This publication focuses on the form of virtualization known as full virtualization. In full virtualization,
one or more OSs and the applications they contain are run on top of virtual hardware. Each instance of an
OS and its applications runs in a separate VM called a guest operating system. The guest OSs on a host
are managed by the hypervisor, also called the virtual machine monitor (VMM), which controls the flow
of instructions between the guest OSs and the physical hardware, such as CPU, disk storage, memory, and
network interface cards. The hypervisor can partition the system’s resources and isolate the guest OSs so
that each has access to only its own resources, as well as possible access to shared resources such as files
on the host OS. Also, each guest OS can be completely encapsulated, making it portable. Some
hypervisors run on top of another OS, which is known as the host operating system.

In full virtualization the hypervisor provides most of the same hardware interfaces as those provided by
the hardware’s physical platform. This means that the OSs and applications running within full
virtualization do not need to be modified for virtualization to work if the OSs and applications are
compatible with the underlying hardware. An interesting twist on full virtualization is paravirtualization,
which is a method for the hypervisor to offer interfaces to the guest OS that the guest OS can use instead
of the normal hardware interfaces. If a guest OS can use paravirtualized interfaces, they offer significantly
faster access for resources such as hard drives and networks. Different types of paravirtualization are
offered by different hypervisor systems.

This section provides an overview of full virtualization as a foundation for the rest of the publication. It
also explains the two common use cases for full virtualization: server virtualization and desktop
virtualization.

2.1   Motivations for Full Virtualization

The recent increase in the use of full virtualization products and services has been driven by many
benefits. One of the most common reasons for adopting full virtualization is operational efficiency:
organizations can use their existing hardware (and new hardware purchases) more efficiently by putting
more load on each computer. In general, servers using full virtualization can use more of the computer’s
processing and memory resources than servers running a single OS instance and a single set of services.
Recent advances in CPU architectures have made full virtualization faster than it was just a few years ago,
and similar advances are expected to continue to be made both by CPU vendors and virtualization
software vendors. Also, CPU architecture changes have made full virtualization more secure by
strengthening hypervisor restrictions on resources.

A second common use of full virtualization is for desktop virtualization, where a single PC is running
more than one OS instance. There are several reasons for deploying desktop virtualization. It can provide


                                                     2-1
