                                                                               GUIDE TO SECURE WEB SERVICES



system). When adding Web service support to legacy systems, Java and .NET may not be available, as
.NET does not run on versions of Windows older than Windows 2000, and there may not be a Java
Virtual Machine for the legacy system’s platform or operating system.

To this end, there are a number of Web service frameworks available for C and C++. Web services
developed using these frameworks do not have the security benefits provided by managed code such as
.NET and Java, so they must rely on operating system-level security support such as restricting user
permissions and running the Web service within restricted environments. It is important to ensure that all
code is properly written to avoid the potential pitfalls of the language, such as buffer overflows. C and
C++ Web services can be implemented without much of the complexity of a Java or .NET Web service
and would not be susceptible to vulnerabilities associated with the framework itself. An additional step
that can be taken to protect Web services developed in C or C++ would be to place the Web service
behind an XML gateway, which would filter XML attacks and protect the C or C++ system from external
entities.

6.3.1.2 Java

Java runs in a secure virtual environment through the Java Security Manager (JSM), which provides a
sandbox in which Java applications can run. Java also provides more stringent memory protections than
C or C++, relying on garbage collection and references memory management in place of the more manual
approach used by C and C++. Java allows the user to have almost full control of the virtual environment
in which the Java bytecode is run. Java code intended for use on the client runs in a different
environment, under a different trust model, than code on the server. There are common requirements,
whether the Java code runs on the client or server. Input from untrusted sources should always be
checked and filtered. Java code that inherits methods from parents, interfaces, or parents’ interfaces also
inherits vulnerabilities in those methods. For this reason, it is critical that the developer use inheritance
with caution.

Because the Java language is compiled into a platform-independent bytecode format, much of the
information contained in the original Java source code remains in the compiled bytecode. This makes
decompilation by attackers easier for Java than natively compiled languages like C and C++. Bytecode
obfuscation is a technique designed to help protect Java bytecodes from decompilation. Preventing
bytecode decompilation is a countermeasure both against disclosure and tampering (i.e., confidentiality
and integrity concerns).

Java bytecode must be able to undergo bytecode verification, which gives it a measure of protection
against malicious code, and it is not possible to distribute the bytecode in a more secure form.
Application of digital signatures to the native Java code (code signing) is intended to increase the security
of the distribution process by providing a means of verification by the execution environment that the
received Java code came from a trusted source and has not been tampered with en route.

The technique most often proposed for reducing this vulnerability is code obfuscation. Code obfuscation
transforms the Java program to make it more difficult to understand, yet functionally identical to the
original. The program produces the same results, though it may execute more slowly or have other side
effects because of the code added to it by the obfuscation technique. Thus, there are trade-offs that must
be considered between the security provided by code obfuscation and the execution time and space
penalties imposed on the transformed program.

There are a number of COTS and public domain programs and utilities for performing code obfuscation.
Some of these apply optimizations to the Java compiler, such as array and loop reordering and procedure




                                                     6-3
