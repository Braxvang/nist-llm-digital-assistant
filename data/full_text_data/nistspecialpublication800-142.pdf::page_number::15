                                                         Practical Combinatorial Testing
 _______________________________________________________

                          Figure 3.      3­way covering array
Similar arrays can be generated to cover up to all 6-way combinations. In general, the
number of t-way combinatorial tests that will be required is proportional to vt log n, for n
parameters with v possible values each.

        Figure 4 contrasts these two approaches. With the first approach, we may run the
same test set against all 3-way combinations of configuration options, while for the second
approach, we would construct a test suite that covers all 3-way combinations of input
transaction fields. Of course these approaches could be combined, with the combinatorial
tests (approach 2) run against all the configuration combinations (approach 1).



            Use combinations of configuration              Configuration:
            values with existing test suite                   Browser
                                                              OS
                                                              DBMS
                                                              Server
 Use combinations of input                                    ...
 values in generating tests


  Inputs:
     Product
     Amount                                                  System
     Quantity                                                Under Test
     Pmt method
     Shipping method
              Figure 4.       Two ways of using combinatorial testing


2.2   The Test Oracle Problem

       Even with efficient algorithms to produce covering arrays, the oracle problem
remains – testing requires both test data and results that should be expected for each data
input. High interaction strength combinatorial testing may require a large number of tests
in some cases, although not always. Approaches to solving the oracle problem for
combinatorial testing include:

        Crash testing: the easiest and least expensive approach is to simply run tests
against the system under test (SUT) to check whether any unusual combination of input
values causes a crash or other easily detectable failure. This is essentially the same
procedure used in “fuzz testing”, which sends random values against the SUT. This form
of combinatorial testing could be regarded as a disciplined form of fuzz testing [59]. It
should be noted that although pure random testing will generally cover a high percentage of
t-way combinations, 100% coverage of combinations requires a random test set much
larger than a covering array. For example, all 3-way combinations of 10 parameters with 4


                                                                                               9
