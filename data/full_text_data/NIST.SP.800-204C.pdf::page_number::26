                                                                                              NIST SP 800-204C                                                DEVSECOPS FOR A MICROSERVICES-BASED
                                                                                                                                                                     APPLICATION WITH SERVICE MESH

                                                                                              •   Test the code and execute the pipeline: After proper testing, execute the CI tool whenever a
                                                                                                  new code appears in the repository. When the build process is successful, execute the CD tool
                                                                                                  to deploy the application into staging/production environment.
                                                                                              •   Activate the run time tool and the dashboard to initiate run time monitoring

                                                                                              To reiterate, the three primary stages of the CI/CD process are build/test, ship/package, and
                                                                                              deploy. The following features transform this into a pipeline:

                                                                                              •   When an update is made to the source code for a service, the code changes pushed to the
                                                                                                  source code repository trigger the code building tool.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204C




                                                                                              •   The code development environment or a code building tool (such as an IDE), is often
                                                                                                  integrated with security testing tools (e.g., static vulnerability analysis tool) to facilitate the
                                                                                                  generation of secure compiled code artifacts, thus integrating security into the CI pipeline.
                                                                                              •   The generation of compiled code artifacts in code building tools triggers the shipping/package
                                                                                                  tool, which may be integrated with its own set of tools (e.g., dynamic vulnerability analysis,
                                                                                                  dynamic penetration testing tools, software composition analysis tools for identifying
                                                                                                  vulnerabilities in the attached libraries) and also creates the configuration parameters relevant
                                                                                                  to the deployment environment.
                                                                                              •   The output of the shipping/packaging tool is then automatically fed to the CD tool, which
                                                                                                  deploys the package into the desired environment (e.g., staging, production) [20].

                                                                                              The workflow of the CI/CD pipeline should not create the impression that there is no human
                                                                                              element involved. The following teams/role players contribute to CI/CD pipeline [21]:
                                                                                              •   Development team – Members of this team declare third-party off-the-shelf software (OSS)
                                                                                                  dependencies for their application, review recommendations from DevSecOps system around
                                                                                                  vulnerable dependencies, update them as suggested, and write adequate test-cases to ensure
                                                                                                  all functional verifications (to eliminate runtime bugs).
                                                                                              •   The Chief Information Security Officer (CISO) – In consultation with the security team, the
                                                                                                  CISO defines the overall scope (depth and breadth) of the DevSecOps system so that it can be
                                                                                                  configured appropriately to meet the mission-critical needs of the applications.
                                                                                              •   Security team – Members of this team create pipelines following best-practices, including
                                                                                                  tasks to perform all required security functions (e.g., SBOM generation, vulnerability
                                                                                                  scanning, code building, code signing, introduction of new testing tools, conducting audit etc.).
                                                                                                  Specifically, in some instances, members of the security team may be responsible for
                                                                                                  designing, building, and maintaining Policy as Code and the associated pipeline.
                                                                                              •   Infrastructure team – Members of this team create, maintain, and upgrade the infrastructure.
                                                                                              •   QA team – Members of this team develop integration test cases.
                                                                                              •   Deployment team/release team – Members of this team create pipelines and packages for
                                                                                                  various environments (UAT/PreProd/Prod) and perform the configuration and provisioning
                                                                                                  appropriate for these environments.

                                                                                                                                                 16
