                                                                                            GUIDE TO SECURE WEB SERVICES



support filtering SOAP, filtering all XML messages with traditional firewalls can prove to be expensive
and reduce the throughput of the firewall. Due to the SOA paradigm, which allows for messages to be
passed via intermediaries rather than simply by point-to-point communication, SSL/TLS is inadequate for
a number of possible SOAP transactions because SSL/TLS is designed to secure transactions between
individual Web services—and will not protect against an intermediary performing a man-in-the-middle
attack. The SOAP specification explains that SOAP was designed with the intent of leaving security for
an extension:

         “Two major design goals for SOAP are simplicity and extensibility. SOAP attempts to meet
         these goals by omitting, from the messaging framework, features that are often found in
         distributed systems. Such features include but are not limited to ‘reliability’, ‘security’,
         ‘correlation’, ‘routing’, and ‘Message Exchange Patterns’ (MEPs). While it is expected that
         many features will be defined, this specification provides specifics only for two MEPs. Other
         features are left to be defined as extensions by other specifications.” 19

WS-I has produced a document describing SOAP’s security challenges, which include the following:

 SOAP does not perform any authentication between SOAP endpoints or intermediaries, so there is no
  way to verify the origin of a SOAP message.
 SOAP does not provide a mechanism for ensuring data integrity or confidentiality either at rest or
  during transit.
 SOAP does not provide a mechanism for detecting resubmitted SOAP messages.
The WSDL description of a Web service is usually automatically provided by the Web service framework
used (e.g., appending ?wsdl to the Web service URI will return its WSDL) and may openly reveal the
entire API of the Web service—even parts of the Web service that may have been disabled or that are
used solely for debugging purposes. 20 Exposing too much information about a Web service through its
WSDL descriptor may provide information about the design and security requirements of the Web
service.

UDDI registries openly provide details about the purpose of a Web service as well as how to access it. In
particular, UDDI provides tModels (described in Section 3.9.1) as “a way to mark a description with
information that designates how it behaves, what conventions it follows, and what specifications or
standards the service complies with.” 21 Attackers may use this information to find potential flaws in the
Web service. For example, the UDDI entry may show that the Web service uses a vulnerable
specification. Any information in excess of that required to bind to the Web service may benefit an
attacker.

Additionally, Web services use UDDI registries to discover and dynamically bind to Web services at run
time. Because the UDDI specifications did not address digitally signing entries until version 3.0.2
(released as an OASIS standard in 2005), many UDDI registries do not provide a robust mechanism for
verifying the authenticity of registry entries. This may allow malicious Web services to be added to the
registry and used by other Web services.




19
     SOAP v1.2 Part 1 Messaging Framework is available at http://www.w3.org/TR/soap/.
20
     Any functionality intended for debugging purposes may be exploited by an attacker and should be disabled or removed.
21
     UDDI v3.0.2 is available at http://www.oasis-open.org/committees/uddi-spec/doc/spec/v3/uddi-v3.0.2-20041019.htm.


                                                            2-18
