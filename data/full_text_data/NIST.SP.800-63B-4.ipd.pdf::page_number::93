       NIST SP 800-63B-4 ipd                                              Digital Identity Guidelines
       December 2022                                       Authentication and Lifecycle Management


2657   Offline attacks are sometimes possible when one or more hashed passwords is obtained
2658   by the attacker through a database breach. The ability of the attacker to determine one or
2659   more users’ passwords depends on the way in which the password is stored. Commonly,
2660   passwords are salted with a random value and hashed, preferably using a computationally
2661   expensive algorithm. Even with such measures, the current ability of attackers to compute
2662   many billions of hashes per second with no rate limiting requires passwords intended to
2663   resist such attacks to be orders of magnitude more complex than those that are expected to
2664   resist only online attacks.
2665   Users should be encouraged to make their passwords as lengthy as they want, within
2666   reason. Since the size of a hashed password is independent of its length, there is no reason
2667   not to permit the use of lengthy passwords (or pass phrases) if the user wishes. Extremely
2668   long passwords (perhaps megabytes in length) could conceivably require excessive
2669   processing time to hash, so it is reasonable to have some limit.

2670   A.3. Complexity
2671   As noted above, composition rules are commonly used in an attempt to increase the
2672   difficulty of guessing user-chosen passwords. Research has shown, however, that users
2673   respond in very predictable ways to the requirements imposed by composition rules
2674   [Policies]. For example, a user that might have chosen “password” as their password
2675   would be relatively likely to choose “Password1” if required to include an uppercase letter
2676   and a number, or “Password1!” if a symbol is also required.
2677   Users also express frustration when attempts to create complex passwords are rejected
2678   by online services. Many services reject passwords with spaces and various special
2679   characters. In some cases, the special characters that are not accepted might be an effort
2680   to avoid attacks like SQL injection that depend on those characters. But a properly hashed
2681   password would not be sent intact to a database in any case, so such precautions are
2682   unnecessary. Users should also be able to include space characters to allow the use of
2683   phrases. Spaces themselves, however, add little to the complexity of passwords and may
2684   introduce usability issues (e.g., the undetected use of two spaces rather than one), so it
2685   may be beneficial to remove repeated spaces in typed passwords prior to verification.
2686   Users’ password choices are very predictable, so attackers are likely to guess passwords
2687   that have been successful in the past. These include dictionary words and passwords
2688   from previous breaches, such as the “Password1!” example above. For this reason,
2689   it is recommended that passwords chosen by users be compared against a blocklist
2690   of unacceptable passwords. This list should include passwords from previous breach
2691   corpuses, dictionary words, and specific words (such as the name of the service itself)
2692   that users are likely to choose. Since user choice of passwords will also be governed
2693   by a minimum length requirement, this dictionary need only include entries meeting
2694   that requirement. As noted in Sec. 5.1.1.2, it is not beneficial for the blocklist to be
2695   excessively large or comprehensive, since its primary purpose is to prevent the use of very

                                                   81
