                                                                                             NIST SP 800-190                                                                  APPLICATION CONTAINER SECURITY GUIDE


                                                                                                        accomplished primarily with control groups (cgroups) 4, whereas on Windows job objects
                                                                                                        serve a similar purpose.
                                                                                                   •    Filesystem virtualization allows multiple containers to share the same physical storage
                                                                                                        without the ability to access or alter the storage of other containers. While arguably
                                                                                                        similar to namespace isolation, filesystem virtualization is called out separately because it
                                                                                                        also often involves optimizations to ensure that containers are efficiently using the host’s
                                                                                                        storage through techniques like copy-on-write. For example, if multiple containers using
                                                                                                        the same image are running Apache on a single host, filesystem virtualization ensures
                                                                                                        that there is only one copy of the httpd binary stored on disk. If one of the containers
                                                                                                        modifies files within itself, only the specifically changed bits will be written to disk, and
                                                                                                        those changes will only be visible to the container that executed them. On Linux, these
                                                                                                        capabilities are provided by technologies like the Advanced Multi-Layered Unification
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-190




                                                                                                        Filesystem (AUFS), whereas on Windows they are an extension of the NT File System
                                                                                                        (NTFS).

                                                                                             The technical capabilities of containers vary by host OS family. Containers are fundamentally a
                                                                                             mechanism to give each app a unique view of a single OS, so the tools for achieving this
                                                                                             separation are largely OS family-dependent. For example, the methods used to isolate processes
                                                                                             from each other differ between Linux and Windows. However, while the underlying
                                                                                             implementation may be different, commonly used container runtimes provide a common
                                                                                             interface format that largely abstracts these differences from users.

                                                                                             While containers provide a strong degree of isolation, they do not offer as clear and concrete of a
                                                                                             security boundary as a VM. Because containers share the same kernel and can be run with
                                                                                             varying capabilities and privileges on a host, the degree of segmentation between them is far less
                                                                                             than that provided to VMs by a hypervisor. Thus, carelessly configured environments can result
                                                                                             in containers having the ability to interact with each other and the host far more easily and
                                                                                             directly than multiple VMs on the same host.

                                                                                             Although containers are sometimes thought of as the next phase of virtualization, surpassing
                                                                                             hardware virtualization, the reality for most organizations is less about revolution than evolution.
                                                                                             Containers and hardware virtualization not only can, but very frequently do, coexist well and
                                                                                             actually enhance each other’s capabilities. VMs provide many benefits, such as strong isolation,
                                                                                             OS automation, and a wide and deep ecosystem of solutions. Organizations do not need to make
                                                                                             a choice between containers and VMs. Instead, organizations can continue to use VMs to deploy,
                                                                                             partition, and manage their hardware, while using containers to package their apps and utilize
                                                                                             each VM more efficiently.

                                                                                             2.3       Container Technology Architecture

                                                                                             Figure 3 shows the five tiers of the container technology architecture:




                                                                                             4     cgroups are collections of processes that can be managed independently, giving the kernel the software-based ability to
                                                                                                   meter subsystems such as memory, processor usage, and disk I/O. Administrators can control these subsystems either
                                                                                                   manually or programmatically.

                                                                                                                                                              7
