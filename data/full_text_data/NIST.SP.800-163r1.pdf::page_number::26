                                                                                               NIST SP 800-163 REV. 1                                         VETTING THE SECURITY OF MOBILE APPS


                                                                                               In contrast to static analysis, the most important dynamic analysis requirement is to see the
                                                                                               workings of the code as it is being executed. There are two primary ways to obtain this
                                                                                               information. First, an executing app can be connected to a remote debugger. Second, the code
                                                                                               can be run on an emulator that has built-in debugging capabilities. Running the code on the
                                                                                               intended mobile device allows the test tool to select the exact characteristics of the device and
                                                                                               can provide a more accurate view about how the app will be behave. On the other hand, an
                                                                                               emulator provides more control, especially when the emulator is open-source and can be
                                                                                               modified by the evaluator to capture whatever information is needed. Although emulators can
                                                                                               simulate different devices, they do not simulate all of them and therefore the simulation may not
                                                                                               be completely accurate. Note that malware increasingly detects the use of emulators as a testing
                                                                                               platform and changes its behavior accordingly to avoid detection. Therefore, it is recommended
                                                                                               that test tools use a combination of emulated and physical mobile devices to avoid false-
                                                                                               negatives from malware that employs anti-detection techniques.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-163r1




                                                                                               Useful information can be gleaned by observing an app’s behavior even without knowing the
                                                                                               purposes of individual functions. For example, a test tool can observe how the app interacts with
                                                                                               its external resources, recording the services it requests from the operating system and the
                                                                                               permissions it exercises. Although many of the device capabilities used by an app may be
                                                                                               inferred by a test tool (e.g., access to a device’s camera will be required of a camera app), an app
                                                                                               may be permitted access to additional device capabilities that are beyond the scope of its
                                                                                               described functionality (e.g., a camera app accessing the device’s network). Moreover, if the
                                                                                               behavior of the app is observed for specific inputs, the evaluator can ask whether the capabilities
                                                                                               being exercised make sense in the context of those particular inputs. For example, a calendar app
                                                                                               may legitimately have permission to send calendar data across the network to sync across
                                                                                               multiple devices, but if the user merely has asked for a list of the day’s appointments and the app
                                                                                               sends data that is not part of the handshaking process needed to retrieve data, the test tool might
                                                                                               investigate what data is being sent and for what purpose.

                                                                                               4.2     Vulnerability Classifiers and Quantifiers

                                                                                               It is advantageous to use a common language to describe vulnerabilities in mobile apps. The
                                                                                               following sections describe some of the more commonly used classifiers and quantifiers used to
                                                                                               identify, describe, and measure the severity of vulnerabilities.

                                                                                               4.2.1    Common Weakness Enumeration (CWE)

                                                                                               CWE is a software weakness classification system maintained by the MITRE Corporation [28].
                                                                                               CWE serves as a common language of sorts for software weakness categories. Different
                                                                                               programming languages can create language-specific versions of the same software error. CWE
                                                                                               ensures terminology exists to refer to the same error across disparate languages and offers
                                                                                               mitigation strategies for each. The CWE is used worldwide in industry, government and
                                                                                               academia.

                                                                                               4.2.2    Common Vulnerabilities and Exposures (CVE)

                                                                                               The CVE dictionary is a naming scheme for software vulnerabilities [12] that also is hosted by
                                                                                               MITRE. When a vulnerability is identified, it can be reported to a CVE Numbering Authority,
                                                                                               which provides a unique, industrywide identifier for the vulnerability. CVEs are reported to the

                                                                                                                                                19
