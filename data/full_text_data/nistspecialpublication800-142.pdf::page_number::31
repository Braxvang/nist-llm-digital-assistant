                                                              Practical Combinatorial Testing
 _______________________________________________________
computer. The test procedure has 8 steps: boot system, open application, run scan, connect
peripherals P-1 through P-5. It is expected that for some sequences, the system will not
function properly, thus the order of connecting peripherals is a critical aspect of testing. In
addition, there are constraints on the sequence of events: can't scan until the app is open;
can't open app until system is booted. There are 40,320 permutations of 8 steps, but some
are redundant (e.g., changing the order of peripherals connected before boot), and some are
invalid (violates a constraint). Around 7,000 are valid, and non-redundant, but this is far
too many to test for a system that requires manual, physical connections of devices.

        The system was tested using a seven-step sequence covering array, incorporating
the assumption that there is no need to examine strength-3 sequences that involve boot-up.
The initial test configuration (Figure 14) was drawn from the library of pre-computed
sequence tests. Some changes were made to the pre-computed sequences based on unique
requirements of the system test. If 6='Open App' and 5='Run Scan', then cases 1, 4, 6, 8,
10, and 12 are invalid, because the scan cannot be run before the application is started.
This was handled by 'swapping 0 and 1' when they are adjacent (1 and 4), out of order. For
the other cases, several cases were generated from each that were valid mutations of the
invalid case. A test was also embedded to see whether it mattered where each of three
USB connections were placed. The last test case ensures at least strength 2 (sequence of
length 2) for all peripheral connections and 'Boot', i.e., that each peripheral connection
occurs prior to boot. The final test array is shown in Table 9.

                             Test 1    0   1    2    3    4   5    6
                             Test 2    6   5    4    3    2   1    0
                             Test 3    2   1    0    6    5   4    3
                             Test 4    3   4    5    6    0   1    2
                             Test 5    4   1    6    0    3   2    5
                             Test 6    5   2    3    0    6   1    4
                             Test 7    0   6    4    5    2   1    3
                             Test 8    3   1    2    5    4   6    0
                             Test 9    6   2    5    0    3   4    1
                             Test 10   1   4    3    0    5   2    6
                             Test 11   2   0    3    4    6   1    5
                             Test 12   5   1    6    4    3   0    2

          Figure 14.      Seven­event test from pre­computed test library.


5.3   Cost and Practical Considerations

     As with other forms of combinatorial testing, some combinations may be either impossible or
not exist on the system under test. For example, ‘receive message’ must occur before ‘process
message’. The algorithm we have developed makes it possible to specify pairs x,y, where the
sequence x..y is to be excluded from the generated covering array. Typically this will lead to extra
tests, but does not increase the test array significantly.




                                                                                                       25
