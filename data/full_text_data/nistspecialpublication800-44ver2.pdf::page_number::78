                                                                   GUIDELINES ON SECURING PUBLIC WEB SERVERS



    3. “The client uses some of the information sent by the server to authenticate the server. If the
       server cannot be authenticated, the user is warned of the problem and informed that an encrypted
       and authenticated connection cannot be established. If the server can be successfully
       authenticated, the client goes on to Step 4.”

    4. “Using all data generated in the handshake to this point, the client (with the cooperation of the
       server, depending on the cipher being used) creates the premaster secret for the session, encrypts
       it with the server’s public key (obtained from the server’s certificate, sent in Step 2), and sends
       the encrypted premaster secret to the server.”

    5. “If the server has requested client authentication (an optional step in the handshake), the client
       also signs another piece of data that is unique to this handshake and known by both the client and
       server. In this case, the client sends both the signed data and the client's own certificate to the
       server, along with the encrypted premaster secret.”

    6. “If the server has requested client authentication, the server attempts to authenticate the client. If
       the client cannot be authenticated, the session is terminated. If the client can be successfully
       authenticated, the server uses its private key to decrypt the premaster secret, then performs a
       series of steps (which the client also performs, starting from the same premaster secret) to
       generate the master secret.”

    7. “Both the client and the server use the master secret to generate the session keys, which are
       symmetric keys used to encrypt and decrypt information exchanged during the SSL/TLS session
       and to verify its integrity—that is, to detect any changes in the data between the time it was sent
       and the time it is received over the SSL/TLS connection.”

    8. “The client sends a message to the server informing it that future messages from the client will be
       encrypted with the session key. It then sends a separate (encrypted) message indicating that the
       client portion of the handshake is finished.”

    9. “The server sends a message to the client informing it that future messages from the server will
       be encrypted with the session key. It then sends a separate (encrypted) message indicating that
       the server portion of the handshake is finished.”

    10. “The SSL/TLS handshake is now complete, and the SSL/TLS session has begun. The client and
        the server use the session keys to encrypt and decrypt the data they send to each other and to
        validate its integrity.”

7.5.4   SSL/TLS Encryption Schemes

The SSL/TLS protocols support the use of a variety of different cryptographic algorithms for operations
such as authenticating the Web server and Web client to each other, transmitting certificates, and
establishing session keys. Web clients and Web servers may support different cipher suites, or sets of
ciphers, depending on factors such as the versions of SSL/TLS they support; organizational policies
regarding acceptable encryption strength; and government restrictions on export, import, and use of
SSL/TLS-enabled software. Among other functions, the SSL/TLS handshake protocols determine how
the Web server and Web client negotiate which cipher suites they will use to authenticate each other,
transmit certificates, and establish session keys. Table 7-1 provides a list of Federal cipher suites, their
recommended usage, and their relative strength [SSL98 and Chow02].




                                                     7-6
