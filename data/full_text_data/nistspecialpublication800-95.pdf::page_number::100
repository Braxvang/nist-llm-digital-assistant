                                                                                GUIDE TO SECURE WEB SERVICES



A.4.6     Routing Detours

The WS-Addressing specification provides a way to direct XML traffic through a complex environment.
It operates by allowing an interim way station in an XML path to assign routing instructions to an XML
document. If one of these Web services way stations is compromised, it may participate in a man-in-the-
middle attack by inserting bogus routing instructions to point a confidential document to a malicious
location. From that location, it may be possible to forward on the document to its original destination
after stripping out the malicious instructions.

A.4.7     External Entity Attack

XML enables a requester to construct an XML document into which data is dynamically inserted at the
time of document creation by pointing to the URI of the data store where the needed data resides. If that
data store is not established to be trustworthy (i.e., if the requester service fails to authenticate the data
store or validate the source of the data), an attacker may be able to reroute the requests for data to an
entity he controls to return malicious content instead of valid data. Additionally, the attacker could
intercept the XML data returned by the valid but untrusted data store and replace or augment that data
with malicious content, which will then be included by the requester in the dynamically constructed XML
document.

A.4.8     Canonicalization

Different forms of input that resolve to the same standard name (the canonical name) is referred to as
canonicalization. Web service code is particularly susceptible to a canonicalization attack if it makes
security decisions based on the name of a resource that is passed to it as input. Files, pathnames,
URLs/URIs, and user names are the most frequently targeted resources vulnerable to canonicalization; in
each case there are many different ways to represent the same name. The Web service should require all
input names to be converted to their canonical forms prior to being used by the service to make security
decisions, such as whether access should be granted or denied to the specified file indicated by the
canonical name.

A.4.9     Intelligent Tampering and Impersonation

This category of attack refers to attacks in which the attacker attempts to spoof a trusted server or service
by impersonating or tampering with a legitimate program.

Intelligent tampering refers to topologies in which the intruder modifies the Web service program or its
data in some specific way that allows the service to continue to operate in a way that seems normal, but
which actually reflects a subverted state or uses corrupted data. For example, overwriting the service
programâ€™s data buffers with data that is in the correct format but has different-than-expected values is an
example of intelligent tampering. Tampering with the Web service software in a random way (e.g.,
overwriting random bits in the memory) does not constitute an intelligent tampering attack, although it
may result in a denial of service as the tampered program or data can cause execution to fail.

An impersonation attack is similar to intelligent tampering in that the attacker seeks to establish a rogue
version of the legitimate Web service program. Whereas intelligent tampering usually involves direct
modifications to the internal specifics (e.g., code, data) of the program, impersonation attempts to emulate
the observable behavior of the program while subverting its internal state.




                                                     A-7
