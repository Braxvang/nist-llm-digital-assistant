                                                                                              NIST SP 800-204A                                BUILDING SECURE MICROSERVICES-BASED APPLICATIONS
                                                                                                                                                              USING SERVICE-MESH ARCHITECTURE


                                                                                              data. Monitoring data is classified into three categories: logging, metrics, and traces in software
                                                                                              systems, as identified by Peter Bourgon [10]. This capability is realized by enabling integration
                                                                                              support in the Service Mesh for specialized tools that can generate one or more of the categories
                                                                                              of data mentioned above. Examples include AppSensor and Fluentd for event logging,
                                                                                              Prometheus for aggregatable metrics, and Jaeger [11] and Zipkin [12] for distributed tracing.
                                                                                              This allows Service Mesh deployment teams to minimize the effort of building the pipelines for
                                                                                              data collection and focus on data analytics. Depending on the use case context, example could
                                                                                              include event mining, anomaly detection, or service dependency extraction.

                                                                                              The logging data should, at a minimum, record the following events to detect some common
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204A




                                                                                              attacks:

                                                                                              Recommendation for Logging Events (SM-DR21): The proxy should log input validation errors
                                                                                              and extra (unexpected) parameters errors, crashes, and core dumps. Common attack detection
                                                                                              capabilities should include bearer token reuse attack and injection attacks.

                                                                                              Recommendation for Logging Requests (SM-DR22): The proxy should log at least the Common
                                                                                              Log Format fields for irregular requests (e.g., non-200 responses when using HTTP). Logging
                                                                                              for successful requests (e.g., 200 responses) tends to be of little value when metrics are
                                                                                              available.

                                                                                              Recommendation for Log Message Content (SM-DR22): Log messages should contain, at a
                                                                                              minimum, the event date/time, microservice name or identity, request trace id, message, and
                                                                                              other contextual information (e.g., requesting user identity and URL). However, logging should
                                                                                              take care to mask sensitive information, for example Bearer tokens.

                                                                                              On the metrics side, a baseline for normal, uncompromised behavior in terms of the outcome of
                                                                                              business logic decisions, contact attempts, and other behavior should be created. To enable this:

                                                                                              Recommendations for Mandatory Metrics (SM-DR23): The configuration for gathering metrics
                                                                                              using Service Mesh for external client and microservice calls should involve, at a minimum, the
                                                                                              following: (a) the number of client/service requests in a given duration, (b) the number of failed
                                                                                              client/service requests by failure code, and (c) the average latency per service as well as the
                                                                                              average total latency per complete request lifecycle (ideally as a histogram; also by failure
                                                                                              code).

                                                                                              A trace is a representation of a series of causally related distributed events that encode the end-
                                                                                              to-end request flow through a distributed system [13]. A trace can provide visibility into both the
                                                                                              path traversed by a request (various microservices involved) and the structure of a request
                                                                                              (forking logic and the nature of the requestâ€”synchronous or asynchronous). In the context of a
                                                                                              microservices-based application and Service Mesh, it is called distributed tracing since the
                                                                                              tracing function is enabled by a combination of various application services and their associated
                                                                                              service proxies. Because of its use for debugging steady-state problems and in providing data for
                                                                                              capacity planning, the distributed tracing feature has a direct impact on the application system
                                                                                              availability.

                                                                                                                                              15
