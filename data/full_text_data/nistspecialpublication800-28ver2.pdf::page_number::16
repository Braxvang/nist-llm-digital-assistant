                                                                 GUIDELINES ON ACTIVE CONTENT AND MOBILE CODE



 Components installed to extend the browser functionality. A significant innovation in the design
  of Web browsers is the ability to extend them beyond their built-in functionality through a defined
  interface. For a browser to hand off content rendering to such program components, the component
  must register its handling capabilities (i.e., the file extensions and Multipurpose Internet Mail
  Extensions [MIME] content types it supports) with the browser when it installs. Often, these
  extensions require full access to the browser internals and the underlying operating system (OS) to
  accomplish their goals. Programs that extend browsers typically enjoy full function interfaces to the
  internals of the browsers and to the OS.
      The two most common means of extending browsers, Netscape plug-ins and ActiveX controls, have
      somewhat different security models. Microsoft ActiveX controls can require authenticated digital
      signatures as a prerequisite for installation, while Netscape plug-ins have no mechanism for enforcing
      authenticated signatures. Once an ActiveX control is installed, however, it has free range over the
      entire machine, whereas the plug-in is confined to the capabilities of the browser.

 Programs launched as independently executing processes. As an alternative to using a
  programming interface, a browser’s capabilities can be extended using a so-called helper application
  or content viewer. Like a plug-in, the browser starts a helper application and hands off content
  rendering when it encounters a content type (MIME content type or file extension) for which the
  helper application is registered to handle. Unlike a plug-in, a helper application runs separately from
  the browser in its own process space, and does not interact with or rely on the browser once initiated.
  Because a helper application runs independently, executed with the content file as input, it is
  completely outside of the control of the browser, including the browser’s security controls.
 Components directly encapsulating the browser. An interesting and somewhat unconventional
  approach is to embody the browser itself within another application as a means of extending
  functionality. A good example is Internet Explorer, or any other browser that complies with ActiveX
  container or Object Linking and Embedding (OLE) container technology, which can be run as an
  ActiveX control inside an application. Visual Basic applications inherently have this capability,
  which allows one to not only control the URL requested, but also interact with some of the content on
  the screen, or even allow HTML pages to pass information to and from the container application
  [Hug99]. Originally, Microsoft MSN, America Online, and a number of free Internet service access
  providers configured their branded browsers this way. A number of browsers developed using
  different technology schemes are available today specifically for being embedded within an
  application as a means of adding new functionality. An email application, for example, could use
  such a component to enhance its capabilities and render HTML-formatted messages directly,
  including any embedded scripts.
2.2     Server Anatomy

A Web server is a computing platform that supplies information and services to other host computers.
The delivered content contains text, image, audio, and video information, formatted in HTML or another
markup language. A Web server performs this function by responding to HTTP requests sent to it from a
Web browser.

The transaction begins when a browser requests a resource from the Web server. In the simplest case, the
Web server retrieves the requested content from a file system and transmits it to the browser. While this
approach works well for static non-volatile information, it can be unsuitable in situations where the
information is volatile, already resides in a database or other repository under a different format, or varies
according to the input provided. In such cases, the Web server responds to the request by creating the
content dynamically, typically by spawning a process or lightweight thread to generate the information.



                                                     2-6
