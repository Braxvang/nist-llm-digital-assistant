                                                                                     GUIDE TO SECURE WEB SERVICES



      unit testing, it is considerably easier to test all of the possible paths that attackers could take to reach
      unexposed methods or perform illegal operations.
 Whole-Application Vulnerability Assessment. The objective of this testing is to seek residual
  vulnerabilities that appear in the Web service as a whole, as a result of the interactions between the
  service and other Web services, instead of tracking down vulnerabilities within and among individual
  unit components of a single Web service.
 Web Service Software Security Assessment. This type of testing usually includes threat modeling,
  requirements risk analysis, and security modeling. Software security test techniques include security-
  oriented code reviews, security fault injection tests, fuzz testing, and penetration testing.
From a security standpoint, Web services adoption today is focused on the corporate intranet, with Web
services used to simplify and reduce the cost of integration of existing applications and databases behind
the firewall. Web services that communicate outside the firewall are showing up in pilot projects, but are
typically limited to service interactions with trusted business partners and known IT organizations.

Given this current state of the art, three capabilities are important in the tools used for testing the security
of Web services:

 Generation and testing of SOAP and XML messages, with examination of both messaging interfaces
  and individual message format
 Automatic generation of test plans from WSDL files containing metadata about the interfaces of the
  Web services to be tested
 Simulation of the actions of both requesters and providers.
There is little automated tool support specifically designed for Web services security testing. This dearth
is consistent with the relatively small number of automated software and application security testing tools
in general. This said, current Web services security testers will need to rely on the somewhat more
prevalent software security testing and application vulnerability assessment techniques and tools to fill in
the gaps until a more complete, robust set of Web service specific security testing tools emerges.

Tools for security testing of groups of Web services interacting across SOAs do not yet exist, nor do tools
for testing security of Web services that are dynamically defined at runtime (e.g., through orchestration or
choreography).

6.5     Summary

Web services provide interoperability among a variety of development platforms and operating systems,
giving organizations flexibility when implementing them. To maximize this flexibility, it is important to
understand the security benefits provided by some of the most widely used Web service development
languages and what tools are available in those languages to aid in the development of Web services.
Web service toolkits can prove to be essential to developing secure Web services, particularly if they are
WS-I Basic Profile and WS-I Basic Security Profile compliantâ€”allowing for interoperability with little or
no change to the code generated by the toolkit. In addition, a robust XML parser is essential for
developing Web services to prevent attacks designed to compromise the parser.

There are several languages commonly used to develop Web services: Java, C#, VB.NET, C, and C++.
Java, C#, and VB.NET rely on managed code frameworks to provide many of the support functions
necessary to implement Web services. C and C++ can provide performance improvements over their
managed code counterparts and may be the only option when Web service-enabling a legacy application.


                                                         6-6
