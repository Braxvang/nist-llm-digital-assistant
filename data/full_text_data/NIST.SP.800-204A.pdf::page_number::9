                                                                                              NIST SP 800-204A                                  BUILDING SECURE MICROSERVICES-BASED APPLICATIONS
                                                                                                                                                                USING SERVICE-MESH ARCHITECTURE


                                                                                              1       Introduction

                                                                                              Microservices architecture has become an established approach for building enterprise and
                                                                                              cloud-based applications due to the following:

                                                                                                    ● Agility – The loose coupling and increased modularity of microservices have enabled
                                                                                                      independent and quicker modification and deployment without affecting other
                                                                                                      components (microservices) of a microservices-based application.
                                                                                                    ● Scalability – The characteristics of the microservices allow them to be independently
                                                                                                      scaled.
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204A




                                                                                                    ● Usability – The use of well-defined application programming interfaces (APIs) makes
                                                                                                      integration or onboarding of various microservices easier.
                                                                                                    ● Availability of tools – The increasing availability of automation tools facilitate error-free
                                                                                                      configuration and deployment.

                                                                                              In spite of the above advantages, the architecture of microservices-based applications has some
                                                                                              challenges with modified/enhanced security requirements, such as:

                                                                                                    ● More microservices lead to more interconnections between these components as well as
                                                                                                      more communication links to be protected.
                                                                                                    ● Components (microservices) can come and go dynamically, so the environment needs
                                                                                                      secure service discovery requirements.
                                                                                                    ● There is no concept of a network perimeter.
                                                                                                    ● All microservices must be treated as non-trustworthy.
                                                                                                    ● The fine-grained nature of microservices requires fine-grained authorizations at each
                                                                                                      microservice. However, this may require security policies to be centrally defined and the
                                                                                                      configurations reflecting them to be defined in each microservice to enable uniform,
                                                                                                      consistent enforcement across all microservices.

                                                                                              1.1     Why Service Mesh

                                                                                              Due to the security requirements for microservices-based applications stated above, the
                                                                                              infrastructure that supports the application and that infrastructure’s associated services (e.g.,
                                                                                              security) should be tightly coordinated. One such dedicated infrastructure is the Service Mesh.
                                                                                              The code that implements the Service Mesh can be organized in the following ways with respect
                                                                                              to the components of a microservices-based application architecture (Each architectural pattern is
                                                                                              denoted using the acronym SM-ARx where SM stands for Service Mesh, AR stands for
                                                                                              architecture and x is the sequence number):

                                                                                                    ● SM-AR1: Service Mesh code can be embedded in the microservices application code,
                                                                                                      making the Service Mesh an integral part of the application development framework.
                                                                                                    ● SM-AR2: Service Mesh code implemented as libraries and, therefore, applications are
                                                                                                      coupled to the services provided by the Service Mesh via API calls.
                                                                                                    ● SM-AR3: Service Mesh functions are implemented in proxies with each proxy deployed
                                                                                                      in front of a microservice instance and collectively providing infrastructure services for
                                                                                                      the microservices-based application. These proxies are called “side-car proxies” and can
                                                                                                                                               1
