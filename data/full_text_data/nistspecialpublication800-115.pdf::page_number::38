                                              TECHNICAL GUIDE TO INFORMATION SECURITY TESTING AND ASSESSMENT



maximum level of potential access to an attacker. They may instead result in the testers learning more
about the targeted network and its potential vulnerabilities, or induce a change in the state of the targeted
network’s security. Some exploits enable testers to escalate their privileges on the system or network to
gain access to additional resources. If this occurs, additional analysis and testing are required to
determine the true level of risk for the network, such as identifying the types of information that can be
gleaned, changed, or removed from the system. In the event an attack on a specific vulnerability proves
impossible, the tester should attempt to exploit another discovered vulnerability. If testers are able to
exploit a vulnerability, they can install more tools on the target system or network to facilitate the testing
process. These tools are used to gain access to additional systems or resources on the network, and obtain
access to information about the network or organization. Testing and analysis on multiple systems should
be conducted during a penetration test to determine the level of access an adversary could gain. This
process is represented in the feedback loop in Figure 5-1 between the attack and discovery phase of a
penetration test.




                     Figure 5-2. Attack Phase Steps with Loopback to Discovery Phase

While vulnerability scanners check only for the possible existence of a vulnerability, the attack phase of a
penetration test exploits the vulnerability to confirm its existence. Most vulnerabilities exploited by
penetration testing fall into the following categories:

     Misconfigurations. Misconfigured security settings, particularly insecure default settings, are
      usually easily exploitable.
     Kernel Flaws. Kernel code is the core of an OS, and enforces the overall security model for the
      system—so any security flaw in the kernel puts the entire system in danger.
     Buffer Overflows. A buffer overflow occurs when programs do not adequately check input for
      appropriate length. When this occurs, arbitrary code can be introduced into the system and
      executed with the privileges—often at the administrative level—of the running program.




                                                     5-4
