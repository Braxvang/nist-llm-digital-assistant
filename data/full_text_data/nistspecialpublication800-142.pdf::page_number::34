Practical Combinatorial Testing
________________________________________________________________


6 MEASURING COMBINATORIAL COVERAGE

    Since it is nearly always impossible to test all possible combinations, combinatorial
testing is a reasonable alternative. For some value of t, testing all t-way interactions among
n parameters will detect nearly all errors. It is possible that t = n, but recalling the
empirical data on failures, we would expect t to be relatively small. Determining the level
of input or configuration state space coverage can help in understanding the degree of risk
that remains after testing. If 90% - 100% of the state space has been covered, then
presumably the risk is small, but if coverage is much smaller, then the risk may be
substantial. This chapter describes some measures of combinatorial coverage that can be
helpful in estimating this risk that we have applied to tests for spacecraft software [50] but
have general application to any combinatorial coverage problem.

6.1   Software Test Coverage

    Test coverage is one of the most important topics in software assurance. Users would
like some quantitative measure to judge the risk in using a product. For a given test set,
what can we say about the combinatorial coverage it provides? With physical products,
such as light bulbs or motors, reliability engineers can provide a probability of failure
within a particular time frame. This is possible because the failures in physical products
are typically the result of natural processes, such as metal fatigue.

     With software the situation is more complex, and many Commonly used
different approaches have been devised for determining software
test coverage. With millions of lines of code, or only with a few coverage
thousand, the number of paths through a program is so large that measures do not
it is impossible to test all paths. For each if statement, there are apply well to
two possible branches, so a sequence of n if statements will combinatorial
result in 2n possible paths. Thus even a small program with only testing.
270 if statements in an execution trace may have more possible
paths than there are atoms in the universe, which is on the order of 1080. With loops (while
statements) the number of possible paths is literally infinite. Thus a variety of measures
have been developed to gauge the degree of test coverage. The following are some of the
better-known coverage metrics:

•       Statement coverage: This is the simplest of coverage criteria – the percentage of
statements exercised by the test set. While it may seem at first that 100% statement
coverage should provide good confidence in the program, in practice, statement coverage is
a relatively weak criterion. At best, statement coverage represents a sanity check: unless
statement coverage is close to 100%, the test set is probably inadequate.

•      Decision or branch coverage: The percentage of branches that have been
evaluated to both true and false by the test set.




28
