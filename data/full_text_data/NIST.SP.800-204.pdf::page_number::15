                                                                                             NIST SP 800-204                                                              SECURITY STRATEGIES FOR
                                                                                                                                                          MICROSERVICES-BASED APPLICATION SYSTEMS

                                                                                             Language), which was developed for microservice interface definition and publication. HTTP is
                                                                                             a blocking type of communication wherein the client that initiates a request can continue its task
                                                                                             only when it receives a response.

                                                                                             Publish-Subscribe: This pattern is used when microservices need to collaborate for the
                                                                                             realization of a complex business process or transaction. This is also called a business domain
                                                                                             event-driven approach or domain event subscription approach. In this pattern, a microservice
                                                                                             registers itself or subscribes to business domain events (e.g., interested in specific information or
                                                                                             being able to handle certain requests), which are published to a message broker through an event-
                                                                                             bus interface. These microservices are built using event-driven APIs and use asynchronous
                                                                                             messaging protocols, such as Message Queuing Telemetry Transport (MQTT), Advanced
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-204




                                                                                             Message Queuing Protocol (AMQP), and Kafka Messaging, which enable support for
                                                                                             notifications and subscriptions. In asynchronous protocols, the message sender does not typically
                                                                                             wait for a response but simply sends the message to a message agent (e.g., RabbitMQ queue).
                                                                                             One of the use cases for this approach is the propagation of data updates to multiple
                                                                                             microservices based on certain events [8].

                                                                                             2.6       Microservices: State of the Practice Core Features

                                                                                             The criticality of the communication infrastructure in a microservices-based application
                                                                                             environment calls for several sophisticated capabilities to be provided as core features in many
                                                                                             deployments. As already stated, many of these features can be implemented either stand-alone or
                                                                                             bundled together in architectural frameworks such as an API gateway or service mesh. Even
                                                                                             within the API gateway, these features can be implemented through service composition or direct
                                                                                             implementation within the code base. These features include but are not limited to
                                                                                             authentication, access control, service discovery, load balancing, response caching, application-
                                                                                             aware health checks, and monitoring [2]. A brief description of these features [5] includes:

                                                                                                   •    Authentication and access control: Authentication and access policy may vary depending
                                                                                                        on the type of APIs exposed by microservices—some may be public APIs; some may be
                                                                                                        private APIs; and some may be partner APIs, which are available only for business
                                                                                                        partners.
                                                                                                   •    Service Discovery: In legacy distributed systems, there are multiple services configured
                                                                                                        to operate at designated locations (IP address and port number). In the microservices-
                                                                                                        based application, the following scenario exists and calls for a robust service discovery
                                                                                                        mechanism:
                                                                                                        a) There are a substantial number of services and many instances associated with each
                                                                                                            service with dynamically changing locations.
                                                                                                        b) Each of the microservices may be implemented in VMs or as containers, which may
                                                                                                            be assigned dynamic IP addresses, especially when they are hosted in an
                                                                                                            Infrastructure as a Service (IAAS) or Software as a Service (SAAS) cloud service.
                                                                                                        c) The number of instances associated with a service can vary based on the load
                                                                                                            fluctuations using features such as autoscaling.
                                                                                                   •    Security monitoring and analytics – To detect attacks and identify factors for degradation
                                                                                                        of services (which may impact availability), it is necessary to monitor network traffic into

                                                                                                                                                 7
