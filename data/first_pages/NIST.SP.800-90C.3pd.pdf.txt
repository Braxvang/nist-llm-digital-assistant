 1                 NIST Special Publication
 2                    NIST SP 800-90C 3pd

 3   Recommendation for Random Bit
 4    Generator (RBG) Constructions
 5                                 Third Public Draft (3pd)

 6
 7                                               Elaine Barker
 8                                                John Kelsey
 9                                               Kerry McKay
10                                             Allen Roginsky
11                                       Meltem Sönmez Turan

12                 This publication is available free of charge from:
13                   https://doi.org/10.6028/NIST.SP.800-90C.3pd
14                                          NIST Special Publication
15                                             NIST SP 800-90C 3pd

16   Recommendation for Random Bit
17    Generator (RBG) Constructions
18                                                               Third Public Draft (3pd)

19
20                                                                              Elaine Barker
21                                                                               John Kelsey
22                                                                              Kerry McKay
23                                                                            Allen Roginsky
24                                                                      Meltem Sönmez Turan
25                                                                 Computer Security Division
26                                                          Information Technology Laboratory

27
28                                          This publication is available free of charge from:
29                                            https://doi.org/10.6028/NIST.SP.800-90C.3pd

30                                                                                    September 2022




31
32                                                                           U.S. Department of Commerce
33                                                                            Gina M. Raimondo, Secretary

34                                                           National Institute of Standards and Technology
35        Laurie E. Locascio, NIST Director and Under Secretary of Commerce for Standards and Technology
     NIST SP 800-90C 3pd (Third Public Draft)                                     Recommendation for RBG Constructions
     September 2022


36   Certain commercial entities, equipment, or materials may be identified in this document in order to describe an
37   experimental procedure or concept adequately. Such identification is not intended to imply recommendation or
38   endorsement by the National Institute of Standards and Technology (NIST), nor is it intended to imply that the entities,
39   materials, or equipment are necessarily the best available for the purpose.

40   There may be references in this publication to other publications currently under development by NIST in accordance
41   with its assigned statutory responsibilities. The information in this publication, including concepts and methodologies,
42   may be used by federal agencies even before the completion of such companion publications. Thus, until each
43   publication is completed, current requirements, guidelines, and procedures, where they exist, remain operative. For
44   planning and transition purposes, federal agencies may wish to closely follow the development of these new
45   publications by NIST.

46   Organizations are encouraged to review all draft publications during public comment periods and provide feedback to
47   NIST. Many NIST cybersecurity publications, other than the ones noted above, are available at
48   https://csrc.nist.gov/publications.


49   Authority
50   This publication has been developed by NIST in accordance with its statutory responsibilities under the Federal
51   Information Security Modernization Act (FISMA) of 2014, 44 U.S.C. § 3551 et seq., Public Law (P.L.) 113-283.
52   NIST is responsible for developing information security standards and guidelines, including minimum requirements
53   for federal information systems, but such standards and guidelines shall not apply to national security systems without
54   the express approval of appropriate federal officials exercising policy authority over such systems. This guideline is
55   consistent with the requirements of the Office of Management and Budget (OMB) Circular A-130.
56
57   Nothing in this publication should be taken to contradict the standards and guidelines made mandatory and binding
58   on federal agencies by the Secretary of Commerce under statutory authority. Nor should these guidelines be interpreted
59   as altering or superseding the existing authorities of the Secretary of Commerce, Director of the OMB, or any other
60   federal official. This publication may be used by nongovernmental organizations on a voluntary basis and is not
61   subject to copyright in the United States. Attribution would, however, be appreciated by NIST.


62   NIST Technical Series Policies
63   Copyright, Fair Use, and Licensing Statements
64   NIST Technical Series Publication Identifier Syntax


65   Publication History
66   Approved by the NIST Editorial Review Board on YYYY-MM-DD [will be added in final published version]


67   How to Cite this NIST Technical Series Publication:
68   Barker EB, Kelsey JM, McKay KA, Roginsky AL, Sönmez Turan M (2022) Recommendation for Random Bit
69   Generator (RBG) Constructions. (National Institute of Standards and Technology, Gaithersburg, MD), NIST Special
70   Publication (SP) 800-90C 3pd. https://doi.org/10.6028/NIST.SP.800-90c.3pd


71   NIST Author ORCID iDs [will be added in final published version]
72   Author 1: 0000-0000-0000-0000
73   Author 2: 0000-0000-0000-0000
74   Author 3: 0000-0000-0000-0000
75   Author 4: 0000-0000-0000-0000
     NIST SP 800-90C 3pd (Third Public Draft)                              Recommendation for RBG Constructions
     September 2022

76   Public Comment Period
77   September 7, 2022 – December 7, 2022


78   Submit Comments
79   rbg_comments@nist.gov
80
81   National Institute of Standards and Technology
82   Attn: Computer Security Division, Information Technology Laboratory
83   100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930


84   All comments are subject to release under the Freedom of Information Act (FOIA).
      NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
      September 2022



 85   Reports on Computer Systems Technology
 86   The Information Technology Laboratory (ITL) at the National Institute of Standards and
 87   Technology (NIST) promotes the U.S. economy and public welfare by providing technical
 88   leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test
 89   methods, reference data, proof of concept implementations, and technical analyses to advance the
 90   development and productive use of information technology. ITL’s responsibilities include the
 91   development of management, administrative, technical, and physical standards and guidelines for
 92   the cost-effective security and privacy of other than national security-related information in federal
 93   information systems. The Special Publication 800-series reports on ITL’s research, guidelines, and
 94   outreach efforts in information system security, and its collaborative activities with industry,
 95   government, and academic organizations.

 96   Abstract
 97   The NIST Special Publication (SP) 800-90 series of documents supports the generation of high-
 98   quality random bits for cryptographic and non-cryptographic use. SP 800-90A specifies several
 99   deterministic random bit generator (DRBG) mechanisms based on cryptographic algorithms. SP
100   800-90B provides guidance for the development and validation of entropy sources. This document
101   (SP 800-90C) specifies constructions for the implementation of random bit generators (RBGs) that
102   include DRBG mechanisms as specified in SP 800-90A and that use entropy sources as specified
103   in SP 800-90B. Constructions for three classes of RBGs (namely, RBG1, RBG2, and RBG3) are
104   specified in this document.

105   Keywords
106   deterministic random bit generator (DRBG); entropy; entropy source; random bit generator
107   (RBG); randomness source; RBG1 construction; RBG2 construction; RBG3 construction;
108   subordinate DRBG (sub-DRBG).




                                                        i
      NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
      September 2022

109   Note to Reviewers
110   1. This draft of SP800-90C describes three RBG constructions. Note that in this draft, a non-
111      deterministic random bit generator (NRBG) is presented as an RBG3 construction.
112       Question: In a future revision of SP 800-90C, should other constructions be included?
113       This version of SP 800-90C does not address the use of an RBG software implementation in
114       which a) a cryptographic library or an application is loaded into a system and b) the software
115       accesses entropy sources or RBGs already associated with the system for its required
116       randomness. NIST intends to address this situation in the near future.
117   2. The RBG constructions provided in this draft use NIST-approved cryptographic primitives
118      (such as block ciphers and hash functions) as underlying components. Note that non-vetted
119      conditioning components may be used within SP 800-90B entropy sources.
120       Although NIST still allows three-key TDEA as a block-cipher algorithm, Section 4 of [SP800-
121       131A] indicates that its use is deprecated through 2023 and will be disallowed thereafter for
122       applying cryptographic protection. This document (i.e., SP 800-90C) does not approve the
123       use of three-key TDEA in an RBG.
124       Although SHA-1 is still approved by NIST, NIST is planning to remove SHA-1 from a future
125       revision of FIPS 180-4, so the SP 800-90 series will not be including the use of SHA-1.
126       The use of the SHA-3 hash functions are approved in SP 800-90C for Hash_DRBG and
127       HMAC_DRBG but are not currently included in [SP800-90A]. SP 800-90A will be revised to
128       exclude the use of TDEA and SHA-1 and include the use of the SHA-3 family of hash
129       functions.
130   3. Since the projected date for requiring a minimum security strength of 128 bits for U.S.
131      Government applications is 2030 (see [SP800-57Part1]), RBGs are only specified to provide
132      128, 192, and 256 bits of security strength (i.e., the 112-bit security strength has been
133      removed). Note that a consuming application may still request a lower security strength, but
134      the RBG output will be generated at the instantiated security strength.
135   4. Guidance is provided for accessing entropy sources and for obtaining full-entropy bits using
136      the output of an entropy source that does not inherently provide full-entropy output (see
137      Section 3.3).
138   5. SP 800-90A requires that when instantiating a CTR_DRBG without a derivation function, the
139      randomness source needs to provide full-entropy bits (see SP 800-90A). However, this draft
140      (SP 800-90C) relaxes this requirement in the case of an RBG1 construction, as specified in
141      Section 4. In this case, the external randomness source may be another RBG construction. An
142      addendum to SP 800-90A has been prepared as a temporary specification in SP 800-90C, but
143      SP 800-90A will be revised in the future to accommodate this change.
144   6. The DRBG used in RBG3 constructions supports a security strength of 256 bits. The RBG1
145      and RBG2 constructions may support any valid security strength (i.e., 128, 192 or 256 bits).
146   7. SP 800-90A currently allows the acquisition of a nonce (when required) for DRBG
147      instantiation from any randomness source. However, SP 800-90C does not include an explicit
148      requirement for the generation of a nonce when instantiating a DRBG. Instead, additional bits

                                                      ii
      NIST SP 800-90C 3pd (Third Public Draft)                      Recommendation for RBG Constructions
      September 2022

149       beyond those needed for the security strength are acquired from the randomness source. SP
150       800-90A will be revised to agree with this change.
151   8. SP 800-90C allows the use of both physical and non-physical entropy sources. See the
152      definitions of physical and non-physical entropy sources in Appendix E. Also, multiple
153      validated entropy sources may be used to provide entropy, and two methods are provided in
154      Section 2.3 for counting the entropy provided in a bitstring.
155   9. The CMVP is considering providing information on an entropy source validation certificate
156      that indicates whether an entropy source is physical or non-physical.
157   10. The CMVP is developing a program to validate entropy sources against SP 800-90B with the
158       intent of allowing the re-use of those entropy sources in different RBG implementations.
159       Question: Are there any issues that still need to be addressed in SP 800-90C to allow the re-
160       use of validated entropy sources in different RBG implementations? Note that in many cases,
161       specific issues need to be addressed in the FIPS 140 implementation guide rather than in this
162       document.




                                                     iii
      NIST SP 800-90C 3pd (Third Public Draft)                          Recommendation for RBG Constructions
      September 2022

163   Call for Patent Claims
164   This public review includes a call for information on essential patent claims (claims whose use
165   would be required for compliance with the guidance or requirements in this Information
166   Technology Laboratory (ITL) draft publication). Such guidance and/or requirements may be
167   directly stated in this ITL Publication or by reference to another publication. This call also includes
168   disclosure, where known, of the existence of pending U.S. or foreign patent applications relating
169   to this ITL draft publication and of any relevant unexpired U.S. or foreign patents.
170   ITL may require from the patent holder, or a party authorized to make assurances on its behalf, in
171   written or electronic form, either:
172       a) assurance in the form of a general disclaimer to the effect that such party does not hold and
173          does not currently intend holding any essential patent claim(s); or
174       b) assurance that a license to such essential patent claim(s) will be made available to
175          applicants desiring to utilize the license for the purpose of complying with the guidance or
176          requirements in this ITL draft publication either:
177              i.   under reasonable terms and conditions that are demonstrably free of any unfair
178                   discrimination; or
179             ii.   without compensation and under reasonable terms and conditions that are
180                   demonstrably free of any unfair discrimination.
181   Such assurance shall indicate that the patent holder (or third party authorized to make assurances
182   on its behalf) will include in any documents transferring ownership of patents subject to the
183   assurance, provisions sufficient to ensure that the commitments in the assurance are binding on
184   the transferee, and that the transferee will similarly include appropriate provisions in the event of
185   future transfers with the goal of binding each successor-in-interest.
186   The assurance shall also indicate that it is intended to be binding on successors-in-interest
187   regardless of whether such provisions are included in the relevant transfer documents.
188   Such statements should be addressed to: rbg_comments@nist.gov




                                                        iv
      NIST SP 800-90C 3pd (Third Public Draft)                                                   Recommendation for RBG Constructions
      September 2022

189   Table of Contents
190        Introduction and Purpose .................................................................................................. 1
191
192
193        General Information ............................................................................................................ 3
194
195
196
197
198       2.4.1. DRBG Instantiations ................................................................................................... 6
199       2.4.2. DRBG Reseeding, Prediction Resistance, and Recovery from Compromise ............. 7
200
201
202
203
204       2.8.1. DRBG Functions ....................................................................................................... 13
205       2.8.2. Interfacing with Entropy Sources Using the GetEntropy and Get_ES_Bitstring
206       Functions............................................................................................................................... 16
207       2.8.3. Interfacing with an RBG3 Construction ..................................................................... 18
208        Accessing Entropy Source Output .................................................................................. 20
209
210
211
212       3.3.1. Conditioning Function Calls ...................................................................................... 22
213       3.3.2. Using a Vetted Conditioning Function to Obtain Full-Entropy Bitstrings ................... 24
214        RBG1 Constructions Based on RBGs with Physical Entropy Sources ....................... 27
215
216
217       4.2.1. Instantiating the DRBG in the RBG1 Construction ................................................... 29
218       4.2.2. Requesting Pseudorandom Bits ............................................................................... 31
219
220       4.3.1. Instantiating a Sub-DRBG ......................................................................................... 33
221       4.3.2. Requesting Random Bits .......................................................................................... 33
222
223       4.4.1. RBG1 Requirements ................................................................................................. 33
224       4.4.2. Sub-DRBG Requirements ......................................................................................... 35

                                                                            v
      NIST SP 800-90C 3pd (Third Public Draft)                                                     Recommendation for RBG Constructions
      September 2022

225          RBG2 Constructions Based on Physical and/or Non-Physical Entropy Sources....... 37
226
227
228        5.2.1. RBG2 Instantiation .................................................................................................... 38
229        5.2.2. Requesting Pseudorandom Bits from an RBG2 Construction .................................. 40
230        5.2.3. Reseeding an RBG2 Construction ............................................................................ 40
231
232          RBG3 Constructions Based on Physical Entropy Sources .......................................... 43
233
234
235        6.2.1. Conceptual Interfaces ............................................................................................... 45
236        6.2.2. RBG3(XOR) Requirements ....................................................................................... 48
237
238        6.3.1. Conceptual Interfaces ............................................................................................... 49
239        6.3.2. Requirements for a RBG3(RS) Construction ............................................................ 53
240          Testing ............................................................................................................................... 54
241
242        7.1.1. Testing RBG Components ........................................................................................ 54
243        7.1.2. Handling Failures ...................................................................................................... 54
244
245   References ................................................................................................................................. 57
246   Appendix A.            Entropy vs. Security Strength (Informative).................................................. 59
247
248
249
250
251   Appendix B.            RBG Examples (Informative) .......................................................................... 61
252
253
254        B.2.1. Instantiation of the RBG1 Construction ..................................................................... 63
255        B.2.2. Generation by the RBG1 Construction ..................................................................... 64
256
257        B.3.1. Instantiation of the Sub-DRBGs ................................................................................ 66
258          B.3.1.1.        Instantiating Sub-DRBG1 .................................................................................. 66
259          B.3.1.2.        Instantiating Sub-DRBG2 .................................................................................. 67
260        B.3.2. Pseudorandom Bit Generation by Sub-DRBGs ........................................................ 67

                                                                             vi
      NIST SP 800-90C 3pd (Third Public Draft)                                                  Recommendation for RBG Constructions
      September 2022

261
262        B.4.1. Instantiation of an RBG2 Construction ...................................................................... 69
263        B.4.2. Generation in an RBG2 Construction ....................................................................... 69
264        B.4.3. Reseeding an RBG2 Construction ............................................................................ 70
265
266        B.5.1. Instantiation of an RBG3(XOR) Construction ........................................................... 71
267        B.5.2. Generation by an RBG3(XOR) Construction ............................................................ 72
268          B.5.2.1.       Generation ......................................................................................................... 73
269          B.5.2.2.       Get_conditioned_full-entropy_input Function .................................................... 74
270        B.5.3. Reseeding an RBG3(XOR) Construction .................................................................. 75
271
272        B.6.1. Instantiation of an RBG3(RS) Construction .............................................................. 77
273        B.6.2. Generation by an RBG3(RS) Construction ............................................................... 77
274        B.6.3. Generation by the Directly Accessible DRBG ........................................................... 77
275        B.6.4. Reseeding a DRBG .................................................................................................. 78
276   Appendix C.           Addendum to SP 800-90A: Instantiating and Reseeding a CTR_DRBG ..... 79
277
278
279
280        C.3.1. Derivation Keys and Constants ................................................................................. 80
281        C.3.2. Derivation Function Using CMAC ............................................................................. 80
282        C.3.3. Derivation Function Using CBC-MAC ....................................................................... 80
283   Appendix D.           List of Symbols, Abbreviations, and Acronyms ........................................... 82
284   Appendix E.           Glossary ........................................................................................................... 84


285   List of Tables
286   Table 1. RBG Capabilities ............................................................................................................ 4
287   Table 2. Key Lengths for the Hash-based Conditioning Functions ............................................ 22
288   Table 3. Values for generating full-entropy bits by an RBG3(RS) Construction ......................... 50


289




                                                                          vii
      NIST SP 800-90C 3pd (Third Public Draft)                                                   Recommendation for RBG Constructions
      September 2022

290   List of Figures
291   Fig. 1. DRBG Instantiations .......................................................................................................... 7
292   Fig. 2. Example of an RBG Security Boundary within a Cryptographic Module ........................... 9
293   Fig. 3. General Function Calls .................................................................................................... 13
294   Fig. 4. Instantiate_function ......................................................................................................... 14
295   Fig. 5. Generate_function ........................................................................................................... 15
296   Fig. 6. Reseed_function.............................................................................................................. 16
297   Fig. 7. GetEntropy function ......................................................................................................... 17
298   Fig. 8. Get_ES_Bitstring function ............................................................................................... 17
299   Fig. 9. RBG3 DRBG_Instantiate function ................................................................................... 18
300   Fig. 10. RBG3(XOR)_Generate function .................................................................................... 19
301   Fig. 11. RBG3(RS)_Generate function ....................................................................................... 19
302   Fig. 12. RBG1 Construction ........................................................................................................ 28
303   Fig. 13. Instantiation Using an RBG2(P) Construction as a Randomness Source ..................... 29
304   Fig. 14. Instantiation using an RBG3(XOR) or RBG3(RS) Construction as a Randomness
305            Source ........................................................................................................................... 30
306   Fig. 15. RBG1 Construction with Sub-DRBGs ........................................................................... 32
307   Fig. 16. RBG2 Construction ........................................................................................................ 37
308   Fig. 17. RBG3(XOR) Construction ............................................................................................. 45
309   Fig. 18. RBG3(RS) Construction ................................................................................................ 49
310   Fig. 19. DRBG Instantiations ...................................................................................................... 61
311   Fig. 20. RBG1 Construction Example ......................................................................................... 63
312   Fig. 21. Sub-DRBGs Based on an RBG1 Construction .............................................................. 65
313   Fig. 22. RBG2 Example .............................................................................................................. 68
314   Fig. 23. RBG3(XOR) Construction Example .............................................................................. 71
315   Fig. 24. RBG3(RS) Construction Example ................................................................................. 76
316




                                                                           viii
      NIST SP 800-90C 3pd (Third Public Draft)                    Recommendation for RBG Constructions
      September 2022

317   Acknowledgments
318   The National Institute of Standards and Technology (NIST) gratefully acknowledges and
319   appreciates contributions from Chis Celi (NIST); Darryl Buller, Aaron Kaufer, and Mike Boyle
320   (National Security Agency); Werner Schindler, Matthias Peter, Johannes Mittman (Bundesamt für
321   Sicherheit in der Informationstechnik); and the members of the Cryptographic Module User Forum
322   (CMUF) for assistance in the development of this Recommendation. NIST also thanks the many
323   contributions by the public and private sectors.




                                                    ix
      NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
      September 2022



324       Introduction and Purpose
325   Cryptography and security applications make extensive use of random bits. However, the
326   generation of random bits is challenging in many practical applications of cryptography.
327   The National Institute of Standards and Technology (NIST) developed the Special Publication
328   (SP) 800-90 series to support the generation of high-quality random bits for both cryptographic
329   and non-cryptographic purposes. The SP 800-90 series consists of three parts:
330       •   SP 800-90A, Recommendation for Random Number Generation Using Deterministic
331           Random Bit Generators, specifies several approved deterministic random bit generator
332           (DRBG) mechanisms based on approved cryptographic algorithms that – once provided
333           with seed material that contains sufficient entropy – can be used to generate random bits
334           suitable for cryptographic applications.
335       •   SP 800-90B, Recommendation for the Entropy Sources Used for Random Bit Generation,
336           provides guidance for the development and validation of entropy sources − mechanisms
337           that generate entropy from physical or non-physical noise sources and that can be used to
338           generate the input for the seed material needed by a DRBG or for input to an RBG.
339       •   SP 800-90C, Recommendation for Random Bit Generator (RBG) Constructions, specifies
340           constructions for random bit generators (RBGs) using entropy sources that comply with
341           SP 800-90B and DRBGs that comply with SP 800-90A. Three classes of RBGs are
342           specified in this document (see Sections 5, 6, and 7). SP 800-90C also provides high-level
343           guidance for testing RBGs for conformance to this Recommendation.
344   The RBG constructions defined in this Recommendation consist of two main components: the
345   entropy sources that generate true random variables (variables that may be biased, i.e., each
346   possible outcome does not need to have the same chance of occurring) and the DRBGs that ensure
347   that the outputs of the RBG are indistinguishable from the ideal distribution to a computationally
348   bounded adversary.
349   Throughout this document, the phrase “this Recommendation” refers to the aggregate of SP 800-
350   90A, SP 800-90B, and SP 800-90C, while the phrase “this document” refers only to SP 800-90C.
351   SP 800-90C has been developed in coordination with NIST’s Cryptographic Algorithm Validation
352   Program (CAVP) and Cryptographic Module Validation Program (CMVP). The document uses
353   “shall” and “must” to indicate requirements and uses “should” to indicate an important
354   recommendation. The term “shall” is used when a requirement is testable by a testing lab during
355   implementation validation using operational tests or a code review. The term “must” is used for
356   requirements that may not be testable by the CAVP or CMVP. An example of such a requirement
357   is one that demands certain actions and/or considerations from a system administrator. Meeting
358   these requirements can be verified by a CMVP review of the cryptographic module’s
359   documentation. If the requirement is determined to be testable at a later time (e.g., after SP 800-
360   90C is published and before it is revised), the CMVP will so indicate in the Implementation
361   Guidance for FIPS 140, Security Requirements for Cryptographic Modules.




                                                      1
      NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
      September 2022

362           Audience
363   The intended audience for this Recommendation includes 1) developers who want to design and
364   implement RBGs that can be validated by NIST’s CMVP and CAVP, 2) testing labs that are
365   accredited to perform the validation tests and the evaluation of the RBG constructions, and 3) users
366   who install RBGs in systems.

367           Document Organization
368   This document is organized as follows:
369       •   Section 2 provides background and preliminary information for understanding the
370           remainder of the document.
371       •   Section 3 provides guidance on accessing and handling entropy sources, including the
372           external conditioning of entropy-source output.
373       •   Sections 4, 5, and 6 specify the RBG constructions.
374       •   Section 7 discusses health and implementation-validation testing.
375       •   References contains a list of papers and publications cited in this document.
376   The following informational appendices are also provided:
377       •   Appendix A provides discussions on entropy versus security strength.
378       •   Appendix B provides examples of each RBG construction.
379       •   Appendix C is an addendum to SP 800-90A that includes two additional derivation
380           functions that may be used with the CTR_DRBG. These functions will be moved into SP
381           800-90A as part of the next revision of that document.
382       •   Appendix D provides a list of abbreviations, symbols, functions, and notations used in this
383           document.
384       •   Appendix E provides a glossary with definitions for terms used in this document.




                                                       2
      NIST SP 800-90C 3pd (Third Public Draft)                                              Recommendation for RBG Constructions
      September 2022

385          General Information

386               RBG Security
387   Ideal randomness sources generate identically distributed and independent uniform random bits
388   that provide full-entropy outputs (i.e., one bit of entropy per output bit). Real-world RBGs are
389   designed with a security goal of indistinguishability from the output of an ideal randomness source.
390   That is, given some limits on an adversary’s data and computing power, it is expected that there is
391   no adversary that can reliably distinguish between RBG outputs and outputs from an ideal
392   randomness source.
393   Consider an adversary that can perform 2w computations (typically, these are guesses of the RBG’s
394   internal state) and is given an output sequence from either an RBG with a security strength of s
395   bits (where s ≥ w) or an ideal randomness source. It is expected that an adversary has no better
396   probability of determining which source was used for its random bits than
397                                                               1/2 + 2w−s−1 + ε,
398   where ε is negligible. In this Recommendation, the size of the output is limited to 264 output bits
399   and ε ≤ 2−32.
400   An RBG that has been designed to support a security strength of s bits is suitable for any
401   application with a targeted security strength that does not exceed s. An RBG that is compliant with
402   this Recommendation can support requests for output with a security strength of 128, 192, or 256
403   bits, except for an RBG3 construction (as described in Section 6), which can provide full-entropy
404   output.
405   A bitstring with full entropy has an amount of entropy equal to its length. Full-entropy bitstrings
406   are important for cryptographic applications, as these bitstrings have ideal randomness properties
407   and may be used for any cryptographic purpose. They may be truncated to any length such that the
408   amount of entropy in the truncated bitstring is equal to its length. However, due to the difficulty
409   of generating and testing full-entropy bitstrings, this Recommendation assumes that a bitstring has
410   full entropy if the amount of entropy per bit is at least 1 − ε, where ε is at most 2−32. NISTIR 8427 1
411   provides a justification for the selection of ε.

412               RBG Constructions
413   A construction is a method of designing an RBG or some component of an RBG to accomplish a
414   specific goal. Three classes of RBG constructions are defined in this document: RBG1, RBG2,
415   and RBG3 (see Table 1). Each RBG includes a DRBG from [SP800-90A] and is based on the use
416   of a randomness source that is validated for compliance with [SP800-90B] or SP 800-90C. Once
417   instantiated, a DRBG can generate output at a security strength that does not exceed the DRBG’s
418   instantiated security strength.



      1
          See NISTIR 8427, Discussion on the Full Entropy Assumption of SP 800-90 series.



                                                                            3
      NIST SP 800-90C 3pd (Third Public Draft)                               Recommendation for RBG Constructions
      September 2022

419                                              Table 1. RBG Capabilities

                                 Internal             Prediction                                  Type of
             Construction                                                Full Entropy
                              Entropy Source          Resistance                             randomness source
            RBG1                    No                   No                      No               Physical
            RBG2                   Yes                   Yesa                    No              Physical or
                                                                                                Non-physical
            RBG3                      Yes                   Yesa                 Yes              Physical
420              a
                   If sufficient entropy is available or can be obtained when reseeding the RBG’s DRBG.
421       1. An RBG1 construction (see Section 4) does not have access to a randomness source after
422          instantiation. It is instantiated once in its lifetime over a secure channel from an external
423          RBG with appropriate security properties. An RBG1 construction does not support
424          reseeding and cannot provide prediction resistance as described in Section 2.4.2 and
425          [SP800-90A]. The construction can be used to initialize subordinate DRBGs.
426       2. An RBG2 construction (see Section 5) includes one or more entropy sources that are used
427          to instantiate and reseed the DRBG within the construction. This construction can provide
428          prediction resistance (see Section 2.4.2 and [SP800-90A]) when sufficient entropy is
429          available or can be obtained from the RBG’s entropy source(s) at the time that prediction
430          resistance is requested. The construction has two variants that depend on the type of
431          entropy source(s) employed (i.e., physical and non-physical).
432       3. An RBG3 construction is designed to provide output with a security strength equal to the
433          requested length of its output by producing outputs that have full entropy (i.e., an RBG
434          designed as an RBG3 construction can, in effect, support all security strengths) (see Section
435          2.1). This construction provides prediction resistance and has two types, namely
436          RBG3(XOR) and RBG3(RS).
437           a. An RBG3(XOR) construction (see Section 6.2) combines the output of one or more
438              validated entropy sources with the output of an instantiated, approved DRBG using an
439              exclusive-or (XOR) operation.
440           b. An RBG3(RS) construction (see Section 6.3) uses one or more validated entropy
441              sources to provide randomness input for the DRBG by continuously reseeding.
442   This document also provides constructions for 1) subordinate DRBGs (sub-DRBGs) that are
443   instantiated and possibly reseeded by an RBG1 construction (see Section 4.3) and 2) acquiring
444   entropy from an entropy source and conditioning the output to provide a bitstring with full entropy
445   (see Section 3.3). SP 800 90A provides constructions for instantiating and reseeding DRBGs and
446   requesting the generation of pseudorandom bitstrings.
447   All constructions in SP 800-90C are described in pseudocode. These pseudocode conventions are
448   not intended to constrain real-world implementations but to provide a consistent notation to
449   describe the constructions. By convention, unless otherwise specified, integers are unsigned 32-
450   bit values, and when used as bitstrings, they are represented in the big-endian format.

451           Sources of Randomness for an RBG
452   The RBG constructions specified in this document are based on the use of validated entropy
453   sources. Some RBG constructions (e.g., the RBG3 construction) access these entropy sources

                                                            4
      NIST SP 800-90C 3pd (Third Public Draft)                                                    Recommendation for RBG Constructions
      September 2022

454   directly to obtain entropy. Other constructions (e.g., the RBG1 construction) fulfill their entropy
455   requirements by accessing another RBG as a randomness source. In this case, the source RBG may
456   include its own entropy source.
457   SP 800 90B provides guidance for the development and validation of entropy sources −
458   mechanisms that provide entropy for an RBG. Validated entropy sources (i.e., entropy sources that
459   have been successfully validated by the CMVP as complying with SP 800-90B) provide fixed-
460   length outputs and have been validated as reliably providing a specified minimum amount of
461   entropy for each output (e.g., each eight-bit output has been validated as providing at least five bits
462   of entropy). 2
463   An entropy source is a physical entropy source if the primary noise source of the entropy source
464   is physical – that is, it uses dedicated hardware to provide entropy (e.g., from ring oscillators,
465   thermal noise, shot noise, jitter, or metastability). Similarly, a validated entropy source is a non-
466   physical entropy source if the primary noise source of the entropy source is non-physical – that is,
467   entropy is provided by system data (e.g., the entropy present in the RAM data or system time).
468   The entropy-source type is certified during SP 800-90B validation.
469   One or more validated entropy sources are used to provide entropy for instantiating and reseeding
470   the DRBGs in RBG2 or RBG3 constructions or used by an RBG3 construction to generate output
471   upon request by a consuming application.
472   An implementation could be designed to use a combination of physical and non-physical entropy
473   sources. When requests are made to the sources, bitstring outputs are concatenated until the amount
474   of entropy in the concatenated bitstring meets or exceeds the request. Two methods are provided
475   for counting the entropy provided in the concatenated bitstring.
476        Method 1: The RBG implementation includes one or more physical entropy sources, and one
477        or more non-physical entropy sources may also be included in the implementation. However,
478        only the entropy in a bitstring that is provided from physical entropy sources is counted toward
479        fulfilling the amount of entropy requested in an entropy request. Any entropy in a bitstring that
480        is provided by a non-physical entropy source is not counted, even if bitstrings produced by the
481        non-physical entropy source are included in the concatenated bitstring that is used by the RBG.
482        Method 2: The RBG implementation includes one or more non-physical entropy sources, and
483        one or more physical entropy sources may also be included in the implementation. The entropy
484        from both non-physical entropy sources and (if present) physical entropy sources is counted
485        when fulfilling an entropy request.
486        Example: Let pesi be the ith output of a physical entropy source, and npesi be the jh output of a
487        non-physical entropy source. If an implementation consists of one physical and one non-
488        physical entropy source, and a request has been made for 128 bits of entropy, the concatenated
489        bitstring might be something like:
490              pes1 || pes2 || npes1 || pes3 || ... || npesm ||pesn,
491   which is the concatenated output of the physical and non-physical entropy sources.


      2
        Note that this document also discusses the use of non-validated entropy sources. When discussing such entropy sources, “non-validated” will
      always precede “entropy sources.” The use of the term “validated entropy source” may be shortened to just “entropy source” to avoid repetition.


                                                                            5
      NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
      September 2022

492   According to Method 1, only the entropy in pes1, pes2, ..., pesn would be counted toward fulfilling
493   the 128-bit request. Any entropy in npes1, ... npesm is not counted.
494   According to Method 2, all of the entropy in pes1, pes2, ... pesn and in npes1, npes2, ..., npesm is
495   counted. Since the entropy from both non-physical and physical entropy sources is counted in
496   Method 2, the concatenated output string is expected to be shorter compared to that credited using
497   Method 1.
498   When multiple entropy sources are used, there is no requirement on the order in which the entropy
499   sources are accessed or the number of times that each entropy source is accessed to fulfill an
500   entropy request (e.g., if two physical entropy sources are used, it is possible that a request would
501   be fulfilled by only one of the entropy sources because entropy is not available at the time of the
502   request from the other entropy source). However, the Method 1 or Method 2 criteria for counting
503   entropy still applies.
504   This Recommendation assumes that the entropy produced by a validated physical entropy source
505   is generally more reliable than the entropy produced by a validated non-physical entropy source
506   since non-physical entropy sources are typically influenced by human actions or network events,
507   the unpredictability of which is difficult to accurately quantify. Therefore, Method 1 is considered
508   to provide more assurance that the concatenated bitstring actually contains at least the requested
509   amount of entropy (128 bits for the example). Note that RBG2(P) and RBG3 constructions only
510   count the entropy using Method 1 (see Sections 5 and 6).

511           DRBGs
512   Approved DRBG designs are specified in [SP800-90A]. A DRBG includes instantiate, generate,
513   and health-testing functions and may include reseed and uninstantiate functions. The instantiation
514   of a DRBG involves acquiring sufficient randomness to initialize the DRBG to support a targeted
515   security strength and establish the internal state, which includes the secret information for
516   operating the DRBG. The generate function produces output upon request and updates the internal
517   state. Health testing is used to determine that the DRBG continues to operate correctly. Reseeding
518   introduces fresh entropy into the DRBG’s internal state and is used to recover from a potential (or
519   actual) compromise (see Section 2.4.2 for additional discussion). An uninstantiate function is used
520   to terminate a DRBG instantiation and destroy the information in its internal state.

521   2.4.1. DRBG Instantiations
522   A DRBG implementation consists of software code, hardware, or both hardware and software that
523   is used to implement a DRBG design. The same implementation can be used to create multiple
524   “copies” of the same DRBG (e.g., for different purposes) without replicating the software code or
525   hardware. Each “copy” is a separate instantiation of the DRBG with its own internal state that is
526   accessed via a state handle that is unique to that instantiation (see Figure 1). Each instantiation
527   may be considered a different DRBG, even though it uses the same software code or hardware.




                                                       6
      NIST SP 800-90C 3pd (Third Public Draft)                                                       Recommendation for RBG Constructions
      September 2022




528
529                                                         Fig. 1. DRBG Instantiations

530   Each DRBG instantiation is initialized with input from some randomness source that establishes
531   the security strengths that can be supported by the DRBG. During this process, an optional but
532   recommended personalization string may also be used to differentiate between instantiations in
533   addition to the output of the randomness source. The personalization string could, for example,
534   include information particular to the instantiation or contain entropy collected during system
535   activity (e.g., from a non-validated entropy source). An implementation should allow the use of a
536   personalization string. More information on personalization strings is provided in [SP800-90A].
537   A DRBG may be implemented to accept further input during operation from the randomness
538   source (e.g., to reseed the DRBG) and/or additional input from inside or outside of the
539   cryptographic module that contains the DRBG. This additional input could, for example, include
540   information particular to a request for generation or reseeding or could contain entropy collected
541   during system activity (e.g., from a validated or non-validated entropy source). 3

542   2.4.2. DRBG Reseeding, Prediction Resistance, and Recovery from Compromise
543   Under some circumstances, the internal state of an RBG (containing the RBG’s secret information)
544   could be leaked to an adversary. This would typically happen as the result of a side-channel attack
545   or tampering with a hardware device, and it may not be detectable by the RBG or any consuming
546   application.
547   All DRBGs in [SP800-90A] are designed with backtracking resistance − that is, learning the
548   DRBG’s current internal state does not provide knowledge of previous outputs. Since all RBGs in
549   SP 800-90C are based on the use of SP 800-90A DRBGs, they also inherit this property. However,

      3
        Entropy provided in additional input does not affect the instantiated security strength of the DRBG instantiation. However, it is good practice to
      include any additional entropy when available to provide more security.


                                                                               7
      NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
      September 2022

550   once the secret information within the DRBG’s internal state is compromised, all future DRBG
551   outputs are known to the adversary unless the DRBG is reseeded − a process that returns the DRBG
552   to a non-compromised state.
553   A DRBG is reseeded when at least s bits of fresh entropy are used to update the internal state
554   (where s is the security strength of the DRBG) so that the updated internal state is unknown and
555   extremely unlikely to be correctly guessed. A DRBG that has been reseeded has prediction
556   resistance against an adversary who knows its previous internal state. Reseeding may be
557   performed upon request from a consuming application (either an explicit request for reseeding or
558   a request for the generation of bits with prediction resistance); on a fixed schedule based on time,
559   number of outputs, or events; or as sufficient entropy becomes available.
560   Although reseeding provides fresh entropy bits that are incorporated into an already instantiated
561   DRBG at a security strength of s bits, this Recommendation does not consider the reseed process
562   as increasing the DRBG’s security strength. For example, a reseed of a DRBG that has been
563   instantiated to support a security strength of 128 bits does not increase the DRBG’s security
564   strength to 256 bits when reseeding with 128 bits of fresh entropy.
565   An RBG1 construction has no access to a randomness source after instantiation and so cannot be
566   reseeded or recover from a compromise (see Section 4). Thus, it can never provide prediction
567   resistance.
568   An RBG2 construction contains an entropy source that is used to reseed the DRBG within the
569   construction (see Section 5) and recover from a possible compromise of the RBG’s internal state.
570   Prediction resistance may be requested by a consuming application during a request for the
571   generation of (pseudo) random bits. If sufficient entropy can be obtained from the entropy
572   source(s) at that time, the DRBG is reseeded before the requested bits are generated. If sufficient
573   entropy is not available, an error indication is returned, and no bits are generated for output.
574   Therefore, it is recommended that prediction resistance not be claimed for an RBG implementation
575   unless sufficient entropy is reliably available upon request.
576   An RBG3 construction is provided with fresh entropy for every RBG output (see Section 6). As a
577   result, every output from an RBG3 construction has prediction resistance.
578   For a more complete discussion of backtracking and prediction resistance, see [SP800-90A].

579           RBG Security Boundaries
580   An RBG exists within a conceptual RBG security boundary that should be defined with respect to
581   one or more threat models that include an assessment of the applicability of an attack and the
582   potential harm caused by the attack. The RBG security boundary must be designed to assist in the
583   mitigation of these threats using physical or logical mechanisms or both.
584   The primary components of an RBG are a randomness source (i.e., an entropy source or an RBG
585   construction), a DRBG, and health tests for the RBG. RBG input (e.g., entropy bits and a
586   personalization string) shall enter an RBG only as specified in the functions described in Section
587   2.8. The security boundary of a DRBG is discussed in [SP800-90A]. The security boundary for an
588   entropy source is discussed in [SP800-90B]. Both the entropy source and the DRBG contain their
589   own health tests within their respective security boundaries.

                                                       8
      NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
      September 2022

590   Figure 2 shows an RBG implemented within a [FIPS 140]-validated cryptographic module. The
591   RBG security boundary shall either be the same as the cryptographic module boundary or be
592   completely contained within that boundary. The data input may be a personalization string or
593   additional input (see Section 2.4.1). The data output is status information and possibly random bits
594   or a state handle. Within the RBG security boundary of the figure are an entropy source and a
595   DRBG − each with its own (conceptual) security boundary. An entropy-source security boundary
596   includes a noise source, health tests, and (optionally) a conditioning component. A DRBG security
597   boundary contains the chosen DRBG, memory for the internal state, and health tests. An RBG
598   security boundary contains health tests and may also contain an (optional) external conditioning
599   function. The RBG2 and RBG3 constructions in Sections 5 and 6, respectively, use this model.




600
601                 Fig. 2. Example of an RBG Security Boundary within a Cryptographic Module

602   Note that in the case of the RBG1 construction in Section 4, the security boundary containing the
603   DRBG does not include a randomness source (shown as an entropy source in Figure 2).
604   A cryptographic primitive (e.g., an approved hash function) used by an RBG may be used by
605   other applications within the same cryptographic module. However, these other applications shall
606   not modify or reveal the RBG’s output, intermediate values, or internal state.




                                                       9
      NIST SP 800-90C 3pd (Third Public Draft)                                                        Recommendation for RBG Constructions
      September 2022

607                Assumptions and Assertions
608   The RBG constructions in SP 800-90C are based on the use of validated entropy sources and the
609   following assumptions and assertions for properly functioning entropy sources:
610           1. An entropy source is independent of another entropy source if a) their security boundaries
611              do not overlap (e.g., they reside in separate cryptographic modules, or one is a physical
612              entropy source and the other is a non-physical entropy source), b) there are no common
613              noise sources, 4 and c) statistical tests provide evidence of the independence of the entropy
614              sources.
615           2. The use of both validated and non-validated entropy sources is permitted in an
616              implementation, but only entropy sources that have been validated for compliance with
617              [SP800-90B] are used to provide the randomness input for seeding and reseeding a DRBG
618              or providing entropy for an RBG3 construction.
619   The following assumptions and assertions pertain to the use of validated entropy sources for
620   providing entropy bits:
621           3. For the purpose of analysis, it is assumed that a) the number of bits that are output by an
622              entropy source is never more than 264, and b) the number of output bits from the RBG is
623              never more than 264 bits for a DRBG instantiation. In the case of an RBG1 construction
624              with one or more subordinate DRBGs, the output limit applies to the total output provided
625              by the RBG1 construction and all of its subordinate DRBGs.
626           4. Each entropy-source output has a fixed length, ES_len (in bits).
627           5. Each entropy-source output is assumed to contain a fixed amount of entropy, denoted as
628              ES_entropy, that was assessed during entropy-source implementation validation. (See
629              [SP800-90B] for entropy estimation.) ES-entropy is assumed to be at least 0.1 bits per bit
630              of output.
631           6. Each entropy source has been characterized as either a physical entropy source or a non-
632              physical entropy source upon successful validation.
633           7. The outputs from a single entropy source can be concatenated. The entropy of the resultant
634              bitstring is the sum of the entropy from each entropy-source output. For example, if m
635              outputs are concatenated, then the length of the bitstring is m × ES_len bits, and the entropy
636              for that bitstring is assumed to be m × ES_entropy bits. (This is a consequence of the model
637              of entropy used in [SP800-90B].)
638           8. The output of multiple independent entropy sources can be concatenated in an RBG. The
639              entropy in the resultant bitstring is the sum of the entropy in the output of each independent
640              entropy-source output that is considered to be contributing to the entropy in the bitstring
641              (see Methods 1 and 2 in Section 2.3). For example, suppose that the output from
642              independent physical entropy sources A and B and non-physical entropy source C are
643              concatenated. The length of the concatenated bitstring is the sum of the lengths of the
644              component bitstrings (i.e., ES_lenA + ES_lenB + ES_lenC).



      4
          They may, however, use the same type of noise source (e.g., both entropy sources could use ring oscillators but not the same ones).


                                                                                10
      NIST SP 800-90C 3pd (Third Public Draft)                               Recommendation for RBG Constructions
      September 2022

645               •   Using Method 1 in Section 2.3, the amount of entropy in the concatenated bitstring
646                   is ES_entropyA + ES_entropyB.
647               •   Using Method 2 in Section 2.3, the amount of entropy in the concatenated bitstring
648                   is the sum of the entropies in the bitstrings (i.e., ES_entropyA + ES_entropyB +
649                   ES_entropyC).
650       9. Under certain conditions, the output of one or more entropy sources can be externally
651          conditioned to provide full-entropy output. See Section 3.3.2 and Section 6.3.1 for the use
652          of this assumption and [NISTIR8427] for rationale.
653   Furthermore,
654       10. The amount of entropy in a subset bitstring that is “extracted” from the output block of an
655           approved hash function or block cipher is a proportion of the entropy in that block, such
656           that
                                                          𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠_𝑙𝑙𝑙𝑙𝑙𝑙
657                        𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 = �                     � 𝑒𝑒𝑒𝑒𝑡𝑡𝑡𝑡𝑡𝑡𝑡𝑡𝑡𝑡𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜_𝑏𝑏𝑏𝑏𝑏𝑏𝑏𝑏𝑏𝑏
                                                          𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜_𝑙𝑙𝑙𝑙𝑙𝑙
658           where subset_len is the length of the subset bitstring, output_len is the length of the output
659           block, entropyoutput_block is the amount of entropy in the output block, and entropysubset is the
660           amount of entropy in the subset bitstring.
661       11. Full entropy bits can be extracted from the output block of a hash function or block cipher
662           when the amount of fresh entropy inserted into the algorithm exceeds the number of bits to
663           be extracted by at least 64 bits. For example, if output_len is the length of the output block,
664           all bits of the output block can be assumed to have full entropy if at least output_len + 64
665           bits of entropy are inserted into the algorithm. As another example, if a DRBG is reseeded
666           at its security strength s, (s − 64) bits with full entropy can be extracted from the DRBG’s
667           output block.
668       12. To instantiate a DRBG at a security strength of s bits, a bitstring of at least 3s/2 bits long
669           is needed from a randomness source for an RBG1 construction, and a bitstring with at least
670           3s/2 bits of entropy is needed from an entropy source for an RBG2 or RBG3 construction.
671       13. One or more of the constructions provided herein are used in the design of an RBG.
672       14. All components of an RBG2 and RBG3 construction (as specified in Sections 5 and 6)
673           reside within the physical boundary of a single [FIPS140]-validated cryptographic module.
674       15. The DRBGs specified in [SP800-90A] are assumed to meet their explicit security claims
675           (e.g., backtracking resistance, prediction resistance, claimed security strength, etc.).
676   The following assumptions and assertions have been made for the subordinate DRBGs (sub-
677   DRBGs) that are seeded (i.e., initialized) using an RBG1 construction:
678       16. A sub-DRBG is considered to be part of the RBG1 construction that initializes it.
679       17. The assumptions and assertions in items 3, 10, and 14 (above) apply to sub-DRBGs.

680           General Implementation and Use Requirements and Recommendations
681   When implementing the RBGs specified in this Recommendation, an implementation:

                                                            11
      NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
      September 2022

682       1. Shall destroy intermediate values before exiting the function or routine in which they are
683          used,
684       2. Shall employ an “atomic” generate operation whereby a generate request is completed
685          before using any of the requested bits,
686       3. Should consider the threats posed by quantum computers in the future, and
687       4. Should be implemented with the capability to support a security strength of 256 bits or to
688          provide full-entropy output.
689   When using RBGs, the user or application requesting the generation of random or pseudorandom
690   bits should request only the number of bits required for a specific immediate purpose rather than
691   generating bits to be stored for future use. Since, in most cases, the bits are intended to be secret,
692   the stored bits (if not properly protected) are potentially vulnerable to exposure, thus defeating the
693   requirement for secrecy.

694           General Function Calls
695   Functions used within this document for accessing the DRBGs in [SP800-90A], the entropy
696   sources in [SP800-90B], and the RBG3 constructions specified in SP 800-90C are provided below.
697   Each function shall return a status code that shall be checked (e.g., a status of success or failure
698   by the function).
699   If the status code indicates a success, then additional information may also be returned, such as a
700   state handle from an instantiate function or the bits that were requested to be generated during a
701   generate function.
702   If the status code indicates a failure of an RBG component, then see Section 7.1.2 for error-
703   handling guidance. Note that if the status code does not indicate a success, an invalid output (e.g.,
704   a null bitstring) shall be returned with the status code if information other than the status code
705   could be returned.




                                                       12
      NIST SP 800-90C 3pd (Third Public Draft)                               Recommendation for RBG Constructions
      September 2022




706
707                                         Fig. 3. General Function Calls


708   2.8.1. DRBG Functions
709   SP 800-90A specifies several functions for use within a DRBG, indicating the input and output
710   parameters and other implementation details. Note that, in some cases, some input parameters may
711   be omitted, and some output information may not be returned.
712   At least two functions are required in a DRBG:
713       1. An instantiate function that seeds the DRBG using the output of a randomness source and
714          other input (see Section 2.8.1.1) and
715       2. A generate function that produces output for use by a consuming application (see Section
716          2.8.1.2).
717   A DRBG may also support a reseed function (see Section 2.8.1.3). A Get_randomness-
718   source_input function is used in SP 800-90A to request output from a randomness source during
719   instantiation and reseeding (see Section 2.8.1.4).
720   The use of the Uninstantiate_function specified in SP 800-90A is not explicitly discussed in SP
721   800-90C but may be required by an implementation.

722   2.8.1.1.        DRBG Instantiation
723   A DRBG shall be instantiated prior to the generation of pseudorandom bits at the highest security
724   strength to be supported by the DRBG instantiation using the following call:
725       (status, state_handle) = Instantiate_function(requested_instantiation_security_strength,
726                          prediction_resistance_flag, personalization_string).


                                                         13
      NIST SP 800-90C 3pd (Third Public Draft)                                                          Recommendation for RBG Constructions
      September 2022




727
728                                                             Fig. 4. Instantiate_function

729   The Instantiate_function (shown in Figure 4) is used to instantiate a DRBG at the
730   requested_instantiation_security_strength using the output of a randomness source 5 and an
731   optional personalization_string to create seed material. A prediction_resistance flag may be used
732   to indicate whether subsequent Generate_function calls may request prediction resistance. As
733   stated in Section 2.4.1, a personalization_string is optional but strongly recommended. (Details
734   about the Instantiate_function are provided in [SP800-90A].)
735   If the returned status code for the Instantiate_function indicates a success (i.e., the DRBG has
736   been instantiated at the requested security strength), a state handle may 6 be returned to indicate the
737   particular DRBG instance. When provided, the state handle will be used in subsequent calls to the
738   DRBG (e.g., during a Generate_function call) to identify the internal state information for the
739   instantiation. The information in the internal state includes the security strength of the instantiation,
740   the number of times that the instantiation has produced output, and other information that changes
741   during DRBG execution (see [SP800-90A] for each DRBG design).
742   When the DRBG has been instantiated at the requested_instantiation_security_strength, the
743   DRBG will operate at that security strength even if the requested_security_strength in subsequent
744   Generate_function calls (see Section 2.8.1.2) is less than the instantiated security strength.
745   If the status code indicates an error and an implementation is designed to return a state handle, an
746   invalid (e.g., Null) state handle shall be returned.

747   2.8.1.2.                 DRBG Generation Request
748   Pseudorandom bits are generated after DRBG instantiation using the following call:
749             (status, returned_bits) = Generate_function(state_handle, requested_number_of_bits,
750                 requested_security_strength, prediction_resistance_request, additional_input).




      5
          The randomness source provides the randomness input required to instantiate the security strength of the DRBG.
      6
          In cases where only one instantiation of a DRBG will ever exist, a state handle need not be returned since only one internal state will be created.


                                                                                 14
      NIST SP 800-90C 3pd (Third Public Draft)                               Recommendation for RBG Constructions
      September 2022




751
752                                              Fig. 5. Generate_function

753   The Generate_function (shown in Figure 5) requests that a DRBG generate a specified number
754   of bits. The request may indicate the DRBG instance to be used (using the state handle returned
755   by an Instantiate_function call; see Section 2.8.1.1), the number of bits to be returned, the security
756   strength that the DRBG needs to support for generating the bitstring, and whether or not prediction
757   resistance is to be obtained during this execution of the Generate_function. Optional additional
758   input may also be incorporated into the function call. As stated in Section 2.4.1, the ability to
759   handle and use additional input is recommended.
760   The Generate_function returns status information – either an indication of success or an error. If
761   the returned status code indicates a success, the requested number of bits is returned.
762       •   If requested_number_of_bits is equal to or greater than the instantiated security strength,
763           the security strength that the returned_bits can support (if used as a key) is:
764                                     ss_key = the instantiated security strength,
765           where ss_key is the security strength of the key.
766       •   If the requested_number of bits is less than the instantiated security strength, and the
767           returned_bits are to be used as a key, the key is capable of supporting a security strength
768           of:
769                                      ss_key = requested_number_of_bits.
770   If the status code indicates an error, the returned_bits shall consist of an invalid (e.g., Null)
771   bitstring that must not be used. Examples of conditions in which an error indication shall be
772   returned include the following:
773       •   The requested_security_strength exceeds the instantiated security strength for the DRBG
774           (i.e., the security strength recorded in the DRBG’s internal state during instantiation).
775       •   Prediction resistance has been requested but cannot be obtained at this time.
776   Details about the Generate_function are provided in Section 9.3 of [SP800-90A].

777   2.8.1.3.        DRBG Reseed Request
778   The reseeding of a DRBG instantiation is intended to insert additional entropy into that DRBG
779   instantiation (e.g., to recover from a possible compromise or to provide prediction resistance). This
780   is accomplished using the following call (note that this does not increase the security strength of
781   the DRBG):

                                                            15
      NIST SP 800-90C 3pd (Third Public Draft)                                                 Recommendation for RBG Constructions
      September 2022

782                              status = Reseed_function(state_handle, additional_input).




783
784                                                        Fig. 6. Reseed_function

785       A Reseed_function (shown in Figure 6) is used to acquire at least s bits of fresh entropy for the
786       DRBG instance indicated by the state handle (or the only instance if no state handle has been
787       provided), where s is the security strength of the DRBG. 7 In addition to the randomness input
788       provided from the randomness source(s) during reseeding, optional additional input may be
789       incorporated into the reseed process. As discussed in Section 2.4.1, the capability for handling
790       and using additional input is recommended. (Details about the Reseed_function are provided in
791       [SP800-90A].)
792       An indication of the status is returned.
793       The Reseed_function is not permitted in an RBG1 construction (see Section 4) but is permitted
794       in the RBG2 and RBG3 constructions (see Sections 5 and 6, respectively).

795   2.8.1.4.             The Get_randomness-source_input Call
796   A Get_randomness-source_input call is used in the Instantiate_function and Reseed_function
797   in [SP800-90A] to indicate when a randomness source (i.e., an entropy source or RBG) needs to
798   be accessed to obtain randomness input. Details are not provided in SP 800-90A about how the
799   Get_randomness-source_input call needs to be implemented. SP 800-90C provides guidance on
800   how the call should actually be implemented based on various situations. Sections 4, 5, and 6
801   provide instructions for obtaining input from a randomness source when the Get_randomness-
802   source_input call is encountered in SP 800-90A. 8

803   2.8.2. Interfacing with Entropy Sources Using the GetEntropy and
804          Get_ES_Bitstring Functions

805   2.8.2.1.             The GetEntropy Call
806   An entropy source, as discussed in [SP800-90B], is a mechanism for producing bitstrings that
807   cannot be predicted and whose unpredictability can be quantified in terms of min-entropy. SP 800-
808   90B uses the following call for accessing an entropy source:
809                                  (status, ES_output) = GetEntropy (bits_of_entropy),


      7
       The value of s is available in the DRBG’s internal state.
      8
        Note that, at this time, modifications to the Instantiate_function and Reseed_function specification in SP 800-90A and to the appropriate
      algorithms in Section 10 of that document may be required to accommodate the specific requests for entropy for each RBG construction.


                                                                          16
      NIST SP 800-90C 3pd (Third Public Draft)                             Recommendation for RBG Constructions
      September 2022

810   where bits_of_entropy is the amount of entropy requested, ES_output is a bitstring containing the
811   requested amount of entropy, and status indicates whether or not the request has been satisfied.
812   See Figure 7.




813
814                                          Fig. 7. GetEntropy function

815   If the status indicates a success, a bitstring of at least bits_of_entropy long is returned as the
816   ES_output. ES_output must contain at least the requested amount of entropy indicated by the
817   bits_of_entropy input parameter. If the status does not indicate a success, an invalid ES_output
818   bitstring is returned (e.g., ES_output could be a null bitstring).

819   2.8.2.2.        The Get_ES_Bitstring Function
820   A single GetEntropy call may not be sufficient to obtain the entropy required for seeding and
821   reseeding a DRBG and for providing input for the exclusive-or operation in an RBG3(XOR)
822   construction (see Section 6.2). Therefore, SP 800-90C uses a Get_ES_Bitstring function (see
823   Figure 8) to obtain the required entropy from one or more GetEntropy calls. The
824   Get_ES_Bitstring function is invoked as follows:
825                    (status, entropy_bitstring) = Get_ES_Bitstring(bits_of_entropy),
826   where bits_of_entropy is the amount of entropy requested in the returned entropy_ bitstring, and
827   status indicates whether or not the request has been satisfied.




828
829                                        Fig. 8. Get_ES_Bitstring function

830   Note that if non-validated entropy sources are used (e.g., to provide entropy to be used as additional
831   input), they shall be accessed using a different function than is used to access validated entropy
832   sources (i.e., the Get_ES_Bitstring function).
833   If the returned status from the Get_ES_Bitstring function indicates a success, the requested
834   amount of entropy (i.e., indicated by bits_of_entropy) shall be returned in the entropy_bitstring,
835   whose length is equal to or greater than bits_of_entropy. If the status does not indicate a success,
836   an invalid entropy_bitstring shall be returned (e.g., entropy_bitstring is a null bitstring).
837   The Get_ES_Bitstring function will be used in this document to access validated entropy sources
838   to obtain one or more bitstrings with entropy using GetEntropy calls.


                                                          17
      NIST SP 800-90C 3pd (Third Public Draft)                           Recommendation for RBG Constructions
      September 2022

839   See Section 3.1 for additional discussion about the Get_ES_Bitstring function.

840   2.8.3. Interfacing with an RBG3 Construction
841   An RBG3 construction requires interface functions to instantiate its DRBG (see Section 2.8.3.1)
842   and to request the generation of full-entropy bits (see Section 2.8.3.2).

843   2.8.3.1.        Instantiating a DRBG within an RBG3 Construction
844   The RBG3_DRBG_Instantiate function is used to instantiate the DRBG within the RBG3
845   construction using the following call:
846              (status, state_handle) = RBG3_DRBG_Instantiate(prediction_resistance_flag,
847                                         personalization_string).




848
849                                    Fig. 9. RBG3 DRBG_Instantiate function

850   The RBG3’s instantiate function (shown in Figure 9) will result in a call to the DRBG’s
851   Instantiate_function (provided in Section 2.8.1.1). An optional but recommended
852   personalization_string (see Section 2.4.1) may be provided as an input parameter. If included, the
853   personalization_string shall be passed to the DRBG that is instantiated in the
854   Instantiate_function request. See Sections 6.2.1.1 and 6.3.1.1 for more specificity.
855   If the returned status code indicates a success, a state handle may be returned to indicate the
856   particular DRBG instance that is to be used by the construction. Note that if multiple instances of
857   the DRBG are used, a separate state handle shall be returned for each instance. When provided,
858   the state handle shall be used in subsequent calls to that RBG (e.g., during a call to the generate
859   function) when multiple instances of the DRBG have been instantiated. If the status code indicates
860   an error (e.g., entropy is not currently available, or the entropy source has failed), an invalid (e.g.,
861   Null) state handle shall be returned.

862   2.8.3.2.        Generation Using an RBG3 Construction
863   The RBG3(XOR) and RBG3(RS) generate functions are different because of the difference in their
864   designs (see Sections 6.2.1.2 and 6.3.1.2).
865   For the RBG3(XOR) construction, the generate function is invoked using the following call:
866      (status, returned_bits) = RBG3(XOR)_Generate(state_handle, requested_number_of_bits,
867                            prediction_resistance_request, additional_input).



                                                        18
      NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
      September 2022




868
869                                    Fig. 10. RBG3(XOR)_Generate function

870   For the RBG3(RS) construction, the generate function is invoked using the following call:
871                      (status, returned_bits) = RBG3(RS)_Generate(state_handle,
872                               requested_number_of_bits, additional_input).




873
874                                     Fig. 11. RBG3(RS)_Generate function

875   The     RBG3(XOR)_Generate        function   (shown     in    Figure    10)    includes      a
876   prediction_resistance_request parameter to request a reseed of the RBG3(XOR)’s DRBG
877   instantiation, when desired. This parameter is not included as a parameter for the
878   RBG3(RS)_Generate function (shown in Figure 11) since this design always reseeds itself during
879   execution.
880   The generate functions result in calls to the entropy sources and the DRBG instantiation used by
881   the RBG3 construction. This call accesses the DRBG using the Generate_function call provided
882   in Section 2.8.1.2. The input parameters to the two generate functions are used when calling the
883   DRBG instantiation used by that RBG3 construction.
884   If the returned status code indicates a success, a bitstring that contains the newly generated bits is
885   returned. The RBG then uses the resulting bitstring as specified for each RBG3 construction (see
886   Section 6).
887   If the status code indicates an error (e.g., the entropy source has failed), an invalid (e.g., Null)
888   bitstring shall be returned as the returned_bits.




                                                        19
      NIST SP 800-90C 3pd (Third Public Draft)                                                    Recommendation for RBG Constructions
      September 2022

889        Accessing Entropy Source Output
890   The security provided by an RBG is based on the use of validated entropy sources. Section 3.1
891   discusses the use of the Get_ES_Bitstring function to request entropy from one or more entropy
892   sources. Section 3.2 discusses the behavior required by an entropy source. Section 3.3 discusses
893   the conditioning of the output of one or more entropy sources to obtain a bitstring with full entropy
894   before further use by an RBG.

895             The Get_ES_Bitstring Function
896   The Get_ES_Bitstring function specified in Section 2.8.2.2 is used within an RBG to obtain
897   entropy from one or more validated entropy sources using one or more GetEntropy calls (see
898   Sections 2.8.2.1 and 3.2) in whatever manner is required (e.g., by polling the entropy sources or
899   by extracting bits containing entropy from a pool of collected bits). The Get_ES_Bitstring
900   function shall only be used to access validated entropy sources to obtain the entropy for seeding
901   and reseeding a DRBG and for providing input for the exclusive-or operation of an RBG3(XOR)
902   construction (see Section 6.2).
903   In many cases, the Get_ES_Bitstring function will need to query an entropy source (or a set of
904   entropy sources) multiple times to obtain the amount of entropy requested. For the most part, the
905   construction of the Get_ES_Bitstring function itself is not specified in this document but is left
906   to the developer to implement appropriately for the selected entropy sources.
907   The behavior of the Get_ES_Bitstring function shall be as follows:
908        1. A Get_ES_Bitstring function shall only be used to access one or more validated entropy
909           sources.
910        2. The entropy bitstrings produced from multiple entropy-source calls to a single validated
911           entropy source or by calls to multiple validated entropy sources shall be concatenated into
912           a single bitstring. The entropy in the bitstring is computed as the sum of the entropy
913           produced by each call to a validated entropy source that is to be counted as contributing
914           entropy to the bitstring (see Section 2.3). 9
915        3. If a failure is reported during an invocation of the Get_ES_Bitstring function by any
916           physical or non-physical entropy source whose entropy is counted toward fulfilling an
917           entropy request, the failure shall be handled as discussed in Section 7.1.2.
918        4. If a non-physical entropy source whose entropy is not counted reports a failure, the failure
919           shall be reported to the RBG or the consuming application.
920        5. The Get_ES_Bitstring function shall not return an entropy_bitstring unless the bitstring
921           contains sufficient entropy to fulfill the entropy request. The returned status shall indicate
922           a success only when this condition is met.




      9
        For Method 1 in Section 3.3, only entropy contributed by one or more validated physical entropy sources is counted. For Method 2, the entropy
      from all validated entropy sources is counted.


                                                                           20
      NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
      September 2022

923           Entropy Source Requirements
924   This Recommendation requires the use of one or more validated entropy sources to provide
925   entropy for seeding and reseeding a DRBG and for input to the XOR operation in the RBG3(XOR)
926   construction specified in Section 6.2. In addition to the assumptions and assertions concerning
927   entropy sources in Section 2.6, the following conditions shall be met when using these entropy
928   sources:
929       1. Only validated entropy sources shall be used to provide the entropy bitstring for seeding
930          and reseeding a DRBG and for providing input to the XOR operation in the RBG3(XOR)
931          construction.
932           Non-validated entropy sources may be used by an RBG to provide input for personalization
933           strings and/or the additional input in DRBG function calls (see Section 2.4.1).
934       2. Each validated entropy source shall be independent of all other validated or non-validated
935          entropy sources used by the RBG.
936       3. The outputs from an entropy source shall not be reused (e.g., the value in the entropy
937          source is erased after being output).
938       4. When queried for entropy, the validated entropy sources must respond as follows:
939               a. The requested output must be returned only if the returned status indicates a
940                  success. In this case, the ES-output bitstring must contain the requested amount of
941                  entropy. (Note that the ES-output bitstring may be longer than the amount of
942                  entropy requested, i.e., the bitstring may not have full entropy.)
943               b. If an indication of a failure is returned by a validated entropy source as the status,
944                  an invalid (e.g., Null) bitstring shall be returned as ES_output.
945       5. If the validated entropy-source components operate continuously regardless of whether
946          requests are received and a failure is determined, the entropy source shall immediately
947          report the failure to the RBG (see Section 7.1.2).
948       6. If a validated entropy source reports a failure (e.g., because of a failed health test), the
949          entropy source shall not produce output (except possibly for a failure status indication)
950          until the failure is corrected. The entropy source shall immediately report the failure to the
951          Get_ES_Bitstring function (see Section 3.1). If multiple validated entropy sources are
952          used, the report shall identify the entropy source that reported the failure.
953       7. A detected failure of any entropy source shall cause the RBG to report the failure to the
954          consuming application and terminate the RBG operation. The RBG must not be returned
955          to normal operation until the conditions that caused the failure have been corrected and
956          tested for successful operation.

957           External Conditioning to Obtain Full-Entropy Bitstrings
958   An RBG3(XOR) construction (see Section 6.2) and a CTR_DRBG without a derivation function
959   in an RBG2 or RBG3 construction (see Sections 5 and 6) require bitstrings with full entropy from
960   an entropy source. If the validated entropy source does not provide full-entropy output, a method


                                                       21
      NIST SP 800-90C 3pd (Third Public Draft)                          Recommendation for RBG Constructions
      September 2022

961   for conditioning the output to obtain a bitstring with full entropy is needed. Since this conditioning
962   is performed outside an entropy source, the output is said to be externally conditioned.
963   When external conditioning is performed, the vetted conditioning function listed in [SP800-90B]
964   shall be used.

965   3.3.1. Conditioning Function Calls
966   The conditioning functions operate on bitstrings obtained from one or more calls to the entropy
967   source(s).
968   The following format is used in Section 3.3.2 for a conditioning-function call:
969                    conditioned_output = Conditioning_function(input_parameters),
970   where the input_parameters for the selected conditioning function are discussed in Sections 3.3.1.2
971   and 3.3.1.3, and conditioned_output is the output returned by the conditioning function.

972   3.3.1.1.        Keys Used in External Conditioning Functions
973   The HMAC, CMAC, and CBC-MAC vetted conditioning functions require the input of a Key of
974   a specific length (keylen). Unlike other cryptographic applications, keys used in these external
975   conditioning functions do not require secrecy to accomplish their purpose so may be hard-coded,
976   fixed, or all zeros.
977   For the CMAC and CBC-MAC conditioning functions, the length of the key shall be an
978   approved key length for the block cipher used (e.g., keylen = 128, 192, or 256 bits for AES).
979   For the HMAC conditioning function, the length of the key shall be equal to the length of the hash
980   function’s output block (i.e., output_len).
981                       Table 2. Key Lengths for the Hash-based Conditioning Functions

                                                            Length of the output block
                    Hash Function
                                                            (output_len) and key (keylen)
                    SHA-224, SHA-512/224, SHA3-224                          224
                    SHA-256, SHA-512/256, SHA3-256                          256
                    SHA-384, SHA3-384                                       384
                    SHA-512, SHA3-512                                       512
982   Using random keys may provide some additional security in case the input is more predictable
983   than expected. Thus, these keys should be chosen randomly in some way (e.g., by drawing bits
984   directly from the entropy source and inserting them into the key or by providing entropy-source
985   bits to a conditioning function with a fixed key to derive the new key). Note that any entropy used
986   to randomize the key shall not be used for any other purpose (e.g., as input to the conditioning
987   function).

988   3.3.1.2.        Hash Function-based Conditioning Functions
989   Conditioning functions may be based on approved hash functions.


                                                       22
       NIST SP 800-90C 3pd (Third Public Draft)                                  Recommendation for RBG Constructions
       September 2022

 990   One of the following calls shall be used for external conditioning when the conditioning function
 991   is based on a hash function:
 992          1. Using an approved hash function directly:
 993                                  conditioned_output = Hash(entropy_bitstring),
 994              where the hash function operates on the entropy_bitstring provided as input.
 995          2. Using HMAC with an approved hash function:
 996                              conditioned_output = HMAC(Key, entropy_bitstring),
 997              where HMAC operates on the entropy_bitstring using a Key determined as specified in
 998              Section 3.3.1.1.
 999          3. Using Hash_df as specified in SP 800-90A:
1000                         conditioned_output = Hash_df(entropy_bitstring, output_len),
1001              where the derivation function operates on the entropy_bitstring provided as input to
1002              produce a bitstring of output_len bits.
1003   In all three cases, the length of the conditioned output is equal to the length of the output block of
1004   the selected hash function (i.e., output_len).

1005   3.3.1.3.           Block Cipher-based Conditioning Functions
1006   Conditioning functions may be based on approved block ciphers. 10 TDEA shall not be used as
1007   the block cipher (see Section 2.6).
1008   For block cipher-based conditioning functions, one of the following calls shall be used for external
1009   conditioning:
1010          1. Using CMAC (as specified in [SP800-38B]) with an approved block cipher:
1011                              conditioned_output = CMAC(Key, entropy_bitstring),
1012              where CMAC operates on the entropy_bitstring using a Key determined as specified in
1013              Section 3.3.1.1.
1014          2. Using CBC-MAC (specified in Appendix F of [SP800-90B]) with an approved block
1015             cipher:
1016                           conditioned_output = CBC-MAC(Key, entropy_bitstring),
1017              where CBC-MAC operates on the entropy_bitstring using a Key determined as specified
1018              in Section 3.3.1.1.




       10
            At the time of publication, only AES-128, AES-192, and AES-256 were approved as block ciphers for the
            conditioning functions (see SP 800-90B). In all three cases, the block length is 128 bits.

                                                               23
       NIST SP 800-90C 3pd (Third Public Draft)                                                        Recommendation for RBG Constructions
       September 2022

1019                CBC-MAC shall only be used as an external conditioning function under the following
1020                conditions:
1021                      a. The length of the input is an integer multiple of the block size of the block cipher
1022                         (e.g., a multiple of 128 bits for AES) − no padding is done by CBC-MAC itself. 11
1023                      b. All inputs to CBC-MAC in the same RBG shall have the same length.
1024                      c. If the CBC-MAC conditioning function is used to obtain full entropy from an
1025                         entropy source for CTR_DRBG instantiation or reseeding:
1026                                        A personalization string shall not be used during instantiation.
1027                                        Additional input shall not be used during the reseeding of the
1028                                         CTR_DRBG but may be used during the generate process.
1029                CBC-MAC is not approved for any use other than in an RBG (see [SP800-90B]).
1030           3. Using the Block_cipher_df as specified in [SP800-90A] with an approved block cipher:
1031                       conditioned_output = Block_cipher_df(entropy_bitstring, block_length),
1032                where Block_cipher_df operates on the entropy_bitstring using a key specified within the
1033                function, and the block_length is 128 bits for AES.
1034   In all three cases, the length of the conditioned output is equal to the length of the output block
1035   (i.e., 128 bits for AES). If the requested amount of entropy is requested for subsequent use by an
1036   RBG, 12 then multiple iterations of the conditioning function may be required, each using a different
1037   entropy_bitstring.

1038   3.3.2. Using a Vetted Conditioning Function to Obtain Full-Entropy Bitstrings
1039   This construction will produce a bitstring with full entropy using one of the conditioning functions
1040   identified in Section 3.3.1.1 for an RBG2 or RBG3 construction whenever a bitstring with full
1041   entropy is required (e.g., to seed or reseed a CTR_DRBG with no derivation function or to provide
1042   full entropy for the RBG3(XOR) construction). This process is unnecessary if the entropy source
1043   provides full-entropy output.
1044   Let output_len be the length of the output block of the vetted conditioning function to be used;
1045   output_len is the length of the hash function’s output block when a hash-based conditioning
1046   function is used (see Section 3.3.1.2); output_len = 128 when an AES-based conditioning function
1047   is used (see Section 3.3.1.3).
1048   The approach used by this construction is to acquire sufficient entropy from the entropy source to
1049   produce output_len bits with full entropy in the conditioning function’s output block, where
1050   output_len is the length of the output block. The amount of entropy required for each use of the
1051   conditioning function is output_len + 64 bits (see item 11 of Section 2.6). This process is repeated
1052   until the requested number of full-entropy bits have been produced.



       11
            Any padding required could be done before submitting the entropy_bitstring to the CBC-MAC function.
       12
            Since the output block of AES is only 128 bits, this will often be the case when seeding or reseeding a DRBG.


                                                                                24
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

1053   The Get_conditioned_full_entropy_ input function below obtains entropy from one or more
1054   entropy sources using the Get_ES_Bitstring function discussed in Section 3.1 and conditions it
1055   to provide an n-bit string with full entropy.
1056   Get_conditioned_full_entropy_input:
1057      Input: integer n.                           Comment: the requested number of full-entropy bits.
1058       Output: integer status, bitstring returned_bitstring.
1059   Process:
1060      1. temp = the Null string.
1061       2. ctr = 0.
1062       3. While ctr < n, do
1063           3.1    (status, entropy_bitstring) = Get_ES_Bitstring(output_len + 64).
1064           3.2   If (status ≠ SUCCESS), then return (status, invalid_bitstring).
1065           3.3   conditioned_output = Conditioning_function(input_parameters).
1066           3.4   temp = temp || conditioned_output.
1067           3.5   ctr = ctr + output_len.
1068       4. returned_bitstring = leftmost(temp, n).
1069       5. Return (SUCCESS, returned_bitstring).
1070   Steps 1 and 2 initialize the temporary bitstring (temp) for storing the full-entropy bitstring being
1071   assembled and the counter (ctr) that counts the number of full-entropy bits produced for each
1072   iteration of step 3.
1073   Step 3 obtains and processes the entropy for each iteration.
1074       •   Step 3.1 requests output_len + 64 bits from the validated entropy sources. When the output
1075           of multiple entropy sources is used, the entropy counted for fulfilling the request for outlen
1076           + 64 bits is determined using Method 1 or Method 2 as specified in Section 2.3 in the
1077           following situations:
1078           Method 1 shall be used when:
1079           Instantiating and reseeding an RBG2(P) construction containing a CTR_DRBG with no
1080           derivation function (see Section 5.2.1, item 1b, and Section 5.2.3),
1081           Instantiating and reseeding a CTR_DRBG with no derivation function that is used within
1082           an RBG3 construction (see Section 6.1, requirement 1), or
1083           Generating bits in an RBG3(XOR) construction (see Section 6.2.1.2, step 1).
1084           Method 2 shall be used when instantiating and reseeding an RBG2(NP) construction
1085           containing a CTR_DRBG with no derivation function (see Section 5.2.1, item 1b, and
1086           Section 5.2.3).




                                                        25
       NIST SP 800-90C 3pd (Third Public Draft)                           Recommendation for RBG Constructions
       September 2022

1087       •   Step 3.2 checks whether or not the status returned in step 3.1 indicated a success. If the
1088           status did not indicate a success, the status is returned along with an invalid bitstring as the
1089           returned_bitstring (e.g., invalid_bitstring is Null).
1090       •   Step 3.3 invokes the conditioning function for processing the entropy_bitstring obtained
1091           from step 3.1. The input_parameters for the selected Conditioning_function are specified
1092           in Sections 3.3.1.2 or 3.3.1.3, depending on the conditioning function used.
1093       •   Step 3.4 concatenates the conditioned_output received in step 3.3 to the temporary bitstring
1094           (temp), and step 3.5 increments the counter for the number of full-entropy bits that have
1095           been produced so far.
1096       •   If at least n full-entropy bits have not been produced, repeat the process starting at step 3.1.
1097       •   Step 4 truncates the full-entropy bitstring to n bits.
1098       •   Step 5 returns an n-bit full-entropy bitstring as the returned_bitstring.




                                                          26
       NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
       September 2022

1099       RBG1 Constructions Based on RBGs with Physical Entropy Sources
1100   An RBG1 construction provides a source of cryptographic random bits from a device that has no
1101   internal randomness source. Its security depends entirely on being instantiated securely from an
1102   RBG with access to a physical entropy source that resides outside of the device.
1103   An RBG1 construction is instantiated (i.e., seeded) only once before its first use by an RBG2(P)
1104   construction (see Section 5) or an RBG3 construction (see Section 6). Since a randomness source
1105   is not available after DRBG instantiation, an RBG1 construction cannot be reseeded and, therefore,
1106   cannot provide prediction resistance.
1107   An RBG1 construction may be useful for constrained devices in which an entropy source cannot
1108   be implemented or in any device in which access to a suitable source of randomness is not available
1109   after instantiation. Since an RBG1 construction cannot be reseeded, the use of the DRBG is limited
1110   to the DRBG’s seedlife (see [SP800-90A]).
1111   Subordinate DRBGs (sub-DRBGs) may be used within the security boundary of an RBG1
1112   construction (see Section 4.3). The use of one or more sub-DRBGs may be useful for
1113   implementations that use flash memory, such as when the number of write operations to the
1114   memory is limited (resulting in short device lifetimes) or when there is a need to use different
1115   DRBG instantiations for different purposes. The RBG1 construction is the source of the
1116   randomness that is used to (optionally) instantiate one or more sub-DRBGs. Each sub-DRBG is a
1117   DRBG specified in SP 800-90A and is intended to be used for a limited time and a limited purpose.
1118   A sub-DRBG is, in fact, a different instantiation of the DRBG design implemented within the
1119   RBG1 construction (see Section 2.4.1).

1120           RBG1 Description
1121   As shown in Figure 12, an RBG1 construction consists of a DRBG contained within a DRBG
1122   security boundary in one cryptographic module and an RBG (serving as a randomness source)
1123   contained within a separate cryptographic module from that of the RBG1 construction. Note that
1124   the required health tests are not shown in the figure.




                                                       27
       NIST SP 800-90C 3pd (Third Public Draft)                            Recommendation for RBG Constructions
       September 2022




1125
1126                                          Fig. 12. RBG1 Construction

1127   The RBG for instantiating the DRBG within the RBG1 construction must be either an RBG2(P)
1128   construction that has support for prediction resistance requests ( see Section 5) or an RBG3
1129   construction (see Section 6). A physically secure channel between the randomness source and the
1130   DRBG is used to securely transport the randomness input required for the instantiation of the
1131   DRBG. An optional recommended personalization string and optional additional input may be
1132   provided from within the DRBG’s cryptographic module or from outside of that module (see
1133   Section 2.4.1).
1134   An external conditioning function is not needed for this design because the output of the RBG has
1135   already been cryptographically processed.
1136   The output from an RBG1 construction may be used within the cryptographic module (e.g., to seed
1137   a sub-DRBG as specified in Section 4.3) or by an application outside of the RBG1 security
1138   boundary.
1139   The security strength provided by the RBG1 construction is the minimum of the security strengths
1140   provided by the DRBG within the construction, the secure channel, and the RBG used to seed the
1141   DRBG.
1142   Examples of RBG1 and sub-DRBG constructions are provided in Appendices B.2 and B.3,
1143   respectively.

1144           Conceptual Interfaces
1145   Interfaces to the DRBG within an RBG1 construction include function calls for instantiating the
1146   DRBG and generating pseudorandom bits upon request (see Sections 4.2.1 and 4.2.2).
1147   Note that reseeding is not included in this construction.

                                                         28
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

1148   4.2.1. Instantiating the DRBG in the RBG1 Construction
1149   The DRBG within the RBG1 construction may be instantiated at any security strength possible for
1150   the DRBG design using the Instantiate_function discussed in Section 2.8.1.1 and [SP800-90A],
1151   subject to the maximum security strength that is supported by the RBG used as the randomness
1152   source.
1153                                    (status, RBG1_state_handle) =
1154        Instantiate_function (s, prediction_resistance_flag = FALSE, personalization_string),
1155   where s is the requested security strength for the DRBG in the RBG1 construction. If used, the
1156   prediction_resistance_flag is set to FALSE since the DRBG cannot be reseeded to provide
1157   prediction resistance.
1158   An external RBG (i.e., the randomness source) shall be used to obtain the bitstring necessary for
1159   establishing the DRBG’s s-bit security strength.
1160   In SP 800-90A, the Instantiate_function specifies the use of a Get_randomness-source_input
1161   call to obtain randomness input from the randomness source for instantiation (see Section 2.8.1.4
1162   in this document and in [SP800-90A]). For an RBG1 construction, an approved external RBG2(P)
1163   or RBG3 construction must be used as the randomness source (see Sections 5 and 6, respectively).
1164   If the randomness source is an RBG2(P) construction (see Figure 13), the Get_randomness-
1165   source_input call in the Instantiate_function shall be replaced by a Generate_function call to
1166   the RBG2(P) construction (in whatever manner is required) (see Sections 2.8.1.2 and 5.2.2). The
1167   RBG2(P) construction must be reseeded using its internal entropy source(s) before generating bits
1168   to be provided to the RBG1 construction. This is accomplished by setting the
1169   prediction_resistance_request parameter in the Generate_function call to TRUE (see steps 1a
1170   and 2a below).




1171
1172                Fig. 13. Instantiation Using an RBG2(P) Construction as a Randomness Source




                                                        29
       NIST SP 800-90C 3pd (Third Public Draft)                                                      Recommendation for RBG Constructions
       September 2022

1173   If the randomness source is an RBG3 construction (as shown in Figure 14), the Get_randomness-
1174   source_input call shall be replaced by the appropriate RBG3 generate function (see Sections
1175   2.8.3.2, 6.2.1.2, and 6.3.1.2 and steps 1b, 1c, 2b, and 2c below).




1176
1177         Fig. 14. Instantiation using an RBG3(XOR) or RBG3(RS) Construction as a Randomness Source

1178   Let s be the security strength to be instantiated. The DRBG within an RBG1 construction is
1179   instantiated as follows:
1180        1. When an RBG1 construction is instantiating a CTR_DRBG without a derivation function,
1181           s + 128 bits 13 shall be obtained from the randomness source as follows:
1182                   If the randomness source is an RBG2(P) construction (see Figure 13), the
1183                   Get_randomness-source_input call is replaced by:
1184                      (status, randomness-source_input) = Generate_function(RBG2_state_handle, s +
1185                               128, s, prediction_resistance_request = TRUE, additional_input).
1186                   Note that the DRBG within the RBG2(P) construction must be reseeded before
1187                   generating output. 14 This may be accomplished by requesting prediction resistance
1188                   (i.e., setting prediction_resistance_request = TRUE). See Requirement 17 in Section
1189                   4.4.1.



       13
          For AES, the block length is 128 bits, and the key length is equal to the security strength s. SP 800-90A requires the randomness input from the
       randomness source to be key length + block length bits when a derivation function is not used.
       14
          See Requirement 11 in Section 5.4.1.


                                                                              30
       NIST SP 800-90C 3pd (Third Public Draft)                      Recommendation for RBG Constructions
       September 2022

1190               If the randomness source is an RBG3(XOR) construction (see Figure 14), the
1191               Get_randomness-source_input call is replaced by:
1192               (status, randomness-source_input) = RBG3(XOR)_Generate(RBG3_state_handle, s
1193                             + 128, prediction_resistance_request, additional_input).
1194               A request for prediction resistance from the DRBG used by the RBG3(XOR)
1195               construction is optional.
1196           c) If the randomness source is an RBG3(RS) construction (see Figure 14), the
1197              Get_randomness-source_input call is replaced by:
1198                 (status, randomness-source_input) = RBG3(RS)_Generate(RBG3_state_handle,
1199                                            3s/2, additional_input).
1200       2. When an RBG1 construction is instantiating any other DRBG (including a CTR_DRBG
1201          with a derivation function), 3s/2 bits shall be obtained from a randomness source that
1202          provides a security strength of at least s bits.
1203           a) If the randomness source is an RBG2(P) construction (see Figure 13), the
1204              Get_randomness-source_input call is replaced by:
1205                (status, randomness-source_input) = Generate_function(RGB2_state_handle, 3s/2,
1206                            s, prediction_resistance_request = TRUE, additional_input).
1207               Note that the DRBG within the RBG2(P) construction must be reseeded before
1208               generating output. This is accomplished by requesting prediction resistance (i.e., by
1209               setting prediction_resistance_request = TRUE). See Requirement 17 in Section 4.4.
1210           b) If the randomness source is an RBG3(XOR) construction (see Figure 14), the
1211              Get_randomness-source_input call is replaced by:
1212                (status, randomness-source_input) = RBG3(XOR)_Generate(RBG3_state_handle,
1213                              3s/2, prediction_resistance_request, additional_input).
1214               A request for prediction resistance from the DRBG used by the RBG3(XOR)
1215               construction is optional.
1216           c) If the randomness source is an RBG3(RS) construction (see Figure 14), the
1217              Get_randomness_-sourceinput call is replaced by:
1218                 (status, randomness-source_input) = RBG3(RS)_Generate(RBG3_state_handle,
1219                                            3s/2, additional_input).

1220   4.2.2. Requesting Pseudorandom Bits
1221   Pseudorandom bits from the RBG1 construction shall be requested using the following call:
1222                    (status, returned_bits) = Generate_function(RBG1_state_handle,
1223         requested_number_of_bits, s, prediction_resistance_request = FALSE, additional_input).
1224   The prediction_resistance_request is set to FALSE or the parameter may be omitted since a
1225   reseeding capability is not included in an RBG1 construction.


                                                      31
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

1226           Using an RBG1 Construction with Subordinate DRBGs (Sub-DRBGs)
1227   Figure 15 depicts an example of the use of optional subordinate DRBGs (sub-DRBGs) within the
1228   security boundary of an RBG1 construction. The RBG1 construction is used as the randomness
1229   source to provide separate outputs to instantiate each of its sub_DRBGs.




1230
1231                                 Fig. 15. RBG1 Construction with Sub-DRBGs

1232   The RBG1 construction and each of its sub-DRBGs shall be implemented as separate physical or
1233   logical entities (see Figure 15).
1234       •   When implemented as separate physical entities, the DRBG algorithms used by the RBG1
1235           construction and a sub-DRBG shall be the same DRBG algorithm (e.g., the RBG1
1236           construction and all of its sub_DRBGs use HMAC_DRBG and SHA-256).
1237       •   When implemented as separate logical entities, the same software or hardware
1238           implementation of a DRBG algorithm is used but with a different internal state for each
1239           logical entity (e.g., the RBG1 construction has an internal state whose state handle is
1240           RBG1_state_handle, while the state handle for Sub-DRBG 1’s internal state is sub-
1241           DRBG1_state_handle).
1242   The sub-DRBGs have the following characteristics:
1243       1. A sub-DRBG cannot be reseeded or provide prediction resistance.
1244       2. Sub-DRBG outputs are considered outputs from the RBG1 construction.
1245       3. The security strength that can be provided by a sub-DRBG is no more than the security
1246          strength of its randomness source (i.e., the RBG1 construction).
1247       4. Each sub-DRBG has restrictions on its use (e.g., the number of outputs) as specified for its
1248          DRBG algorithm in [SP800-90A].
1249       5. Sub-DRBGs cannot provide output with full entropy.
1250       6. The number of sub-DRBGs that can be instantiated by a RBG1 construction is limited only
1251          by practical considerations associated with the implementation or application.


                                                        32
       NIST SP 800-90C 3pd (Third Public Draft)                                                       Recommendation for RBG Constructions
       September 2022

1252   4.3.1. Instantiating a Sub-DRBG
1253   Instantiation of the sub-DRBG is requested (e.g., by a consuming application) using the
1254   Instantiate_function discussed in Section 2.8.1.1 and [SP800-90A].
1255                                   (status, sub-DRBG_state_handle) =
1256          Instantiate_function(s, prediction_resistance_flag = FALSE, personalization_string),
1257   where s is the requested security strength for the (target) sub-DRBG (note that s must be no greater
1258   than the security strength of the RBG1 construction). 15
1259   The (target) sub-DRBG is instantiated as follows:
1260        1. When the sub-DRBG uses CTR_DRBG without a derivation function, s + 128 bits 16 shall
1261           be obtained from the RBG1 construction as follows:
1262                    (status, randomness-source_input) = Generate_function(RBG1_state_handle, s +
1263                    128, s, prediction_resistance_request = FALSE, additional_input).
1264        2. When the sub-DRBG uses any other DRBG (including a CTR_DRBG with a derivation
1265           function), 3s/2 bits shall be obtained from the RBG1 construction as follows:
1266                     (status, randomness-source_input) = Generate_function(RBG1_state_handle, 3s/2,
1267                                 s, prediction_resistance_request = FALSE, additional_input).

1268   4.3.2. Requesting Random Bits
1269   Pseudorandom bits may be requested from a sub-DRBG using the following call (see Section
1270   2.8.1.2):
1271                (status, returned_bits) = Generate_function(sub_DRBG_state_handle,
1272        requested_number_of_bits, requested_security_strength, prediction_resistance_request =
1273                                       FALSE, additional_input),
1274   where sub_DRBG_state_handle (if used) was returned by the Instantiate_function (see Sections
1275   2.8.1.1 and 4.3.1).

1276              Requirements

1277   4.4.1. RBG1 Requirements
1278   An RBG1 construction being instantiated has the following testable requirements (i.e., testable by
1279   the validation labs):
1280        1. An approved DRBG from [SP800-90A] whose components are capable of providing the
1281           targeted security strength for the RBG1 construction shall be employed.


       15
          The implementation is required to check the requested security strength (for the sub-DRBG) against the security strength recorded in the internal
       state of the RBG1’s DRBG (see SP 800-90A).
       16
          For AES, the block length is 128 bits, and the key length is equal to the security strength s. SP 800-90A requires the randomness input from the
       randomness source to be (key length + block length) bits when a derivation function is not used.


                                                                               33
       NIST SP 800-90C 3pd (Third Public Draft)                                                         Recommendation for RBG Constructions
       September 2022

1282        2. The RBG1 components shall be successfully validated for compliance with [SP800-90A],
1283           SP 800-90C, [FIPS140], and the specification of any other approved algorithm used within
1284           the RBG1 construction, as applicable.
1285        3. The RBG1 construction shall not produce any output until it is instantiated.
1286        4. The RBG1 construction shall not include a reseed capability.
1287        5. The RBG1 construction shall not permit itself to be instantiated more than once. 17
1288        6. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), 3s/2 bits
1289           shall be obtained from a randomness source (see Requirements 13 - 17), where s is the
1290           targeted security strength for the DRBG used in the RBG1 construction.
1291        7. For a CTR_DRBG (without a derivation function), s + 128 bits 18 shall be obtained from
1292           the randomness source (see Requirements 13 - 17), where s is the targeted security strength
1293           for the DRBG used in the RBG1 construction.
1294        8. The internal state of the RBG1 construction shall be maintained 19 and updated to produce
1295           output on demand.
1296        9. The RBG1 construction shall not provide output for generating requests that specify a
1297           security strength greater than the instantiated security strength of its DRBG.
1298        10. If the RBG1 construction is used to instantiate a sub-DRBG, the RBG1 construction may
1299            directly produce output in addition to instantiating the sub-DRBG.
1300        11. If the seedlife of the DRBG within the RBG1 construction is ever exceeded or a health test
1301            of the DRBG fails, the use of the RBG1 construction shall be terminated.
1302        12. If a health test on the RBG1 construction fails, the RBG1 construction and all of its sub-
1303            DRBGs shall be terminated.
1304   The non-testable requirements for the RBG1 construction are listed below. If these requirements
1305   are not met, no assurance can be obtained about the security of the implementation.
1306        13. An approved RBG2(P) construction with support for prediction resistance requests or an
1307            RBG3 construction must be used as the randomness source for the DRBG in the RBG1
1308            construction.
1309        14. The randomness source must fulfill the requirements in Section 5 (for an RBG(P)
1310            construction) or Section 6 (for an RBG3 construction), as appropriate.
1311        15. The randomness source must provide the requested number of bits at a security strength of
1312            s bits or higher, where s is the targeted security strength for the RBG1 construction.
1313        16. The specific output of the randomness source (or portion thereof) that is used for the
1314            instantiation of an RBG1 construction must not be used for any other purpose, including
1315            for seeding a different instantiation.


       17
          While technically possible to reseed the DRBG, doing so outside of very controlled conditions (e.g., “in the field”) might result in seeds with less
       than the required amount of randomness.
       18
          Note that s + 128 = keylen + blocklen = seedlen, as specified in SP 800-90A.
       19
          This means ever-changing but maintained regardless of access to power for its entire lifetime.


                                                                                34
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

1316       17. If an RBG2(P) construction is used as the randomness source for the RBG1 construction,
1317           the RBG2(P) construction must be reseeded (i.e., prediction resistance must be obtained
1318           within the RBG2(P) construction) before generating bits for each RBG1 instantiation.
1319       18. A physically secure channel must be used to insert the randomness input from the
1320           randomness source into the DRBG of the RBG1 construction.
1321       19. An RBG1 construction must not be used for applications that require a higher security
1322           strength than has been instantiated.

1323   4.4.2. Sub-DRBG Requirements
1324   A sub-DRBG has the following testable requirements (i.e., testable by the validation labs).
1325       1. The randomness source for a sub-DRBG shall be an RBG1 construction; a sub-DRBG
1326          shall not serve as a randomness source for another sub-DRBG.
1327       2. A sub-DRBG shall employ the same DRBG components as its randomness source.
1328       3.    A sub-DRBG shall reside in the same security boundary as the RBG1 construction that
1329            initializes it.
1330       4. The RBG1 construction shall fulfill the appropriate requirements of Section 4.4.1.
1331       5. A sub-DRBG shall exist only for a limited time and purpose, as determined by the
1332          application or developer.
1333       6. The output from the RBG1 construction that is used for sub-DRBG instantiation shall not
1334          be output from the security boundary of the construction and shall not be used for any
1335          other purpose, including for seeding a different sub-DRBG.
1336       7. A sub-DRBG shall not permit itself to be instantiated more than once.
1337       8. A sub-DRBG shall not provide output for use by the RBG1 construction (e.g., as additional
1338          input) or another sub-DRBG in the security boundary.
1339       9. The security strength s requested for a target sub-DRBG instantiation shall not exceed the
1340          security strength that is supported by the RBG1 construction.
1341       10. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), 3s/2 bits
1342           shall be obtained from the RBG1 construction for instantiation, where s is the requested
1343           security strength for the target sub-DRBG.
1344       11 For a CTR_DRBG (without a derivation function), s + 128 bits shall be obtained from the
1345          RBG1 construction for instantiation, where s is the requested security strength for the target
1346          sub-DRBG.
1347       12. A sub-DRBG shall not produce output until it is instantiated.
1348       13. A sub-DRBG shall not provide output for generating requests that specify a security
1349           strength greater than the instantiated security strength of the sub-DRBG.
1350       14. A sub-DRBG shall not include a reseed capability.



                                                        35
       NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
       September 2022

1351       15. If the seedlife of a sub-DRBG is ever exceeded or a health test of the sub-DRBG fails, the
1352           use of the sub-DRBG shall be terminated.
1353   A non-testable requirement for a sub-DRBG (not testable by the validation labs) is:
1354       16. The output of a sub-DRBG must not be used as input to seed other DRBGs (e.g., the
1355           DRBGs in other RBGs).




                                                       36
       NIST SP 800-90C 3pd (Third Public Draft)                            Recommendation for RBG Constructions
       September 2022

1356       RBG2 Constructions Based on Physical and/or Non-Physical Entropy Sources
1357   An RBG2 construction is a cryptographically secure RBG with continuous access to one or more
1358   validated entropy sources within its RBG security boundary. The RBG is instantiated before use,
1359   generates outputs on demand, and can be used in an RBG3 construction (see Section 6). An RBG2
1360   construction may support reseeding and may provide prediction resistance during generation
1361   requests (i.e., by performing a reseed of the DRBG prior to generating output). Both reseeding and
1362   providing prediction resistance are optional for this construction.
1363   If full-entropy output is required by a consuming application, an RBG3 construction from Section
1364   6 needs to be used rather than an RBG2 construction.
1365   An RBG2 construction may be useful for all devices in which an entropy source can be
1366   implemented.

1367           RBG2 Description
1368   The DRBG for an RBG2 construction is contained within the same RBG security boundary and
1369   cryptographic module as its validated entropy source(s) (see Figure 16). The entropy source is
1370   used to provide the entropy bits for both DRBG instantiation and the reseeding of the DRBG used
1371   by the construction (e.g., to provide prediction resistance). An optional recommended
1372   personalization string and optional additional input may be provided from within the cryptographic
1373   module or from outside of that module.




1374
1375                                          Fig. 16. RBG2 Construction

1376   The output from the RBG may be used within the cryptographic module or by an application
1377   outside of the module.


                                                         37
       NIST SP 800-90C 3pd (Third Public Draft)                           Recommendation for RBG Constructions
       September 2022

1378   An example of an RBG2 construction is provided in Appendix B.4.
1379   An RBG2 construction may be implemented to use one or more validated physical and/or non-
1380   physical entropy sources for instantiation and reseeding. Two variants of the RBG2 construction
1381   may be implemented.
1382           1. An RBG2(P) construction uses the output of one or more validated physical entropy
1383              sources and (optionally) one or more validated non-physical entropy sources as discussed
1384              in Method 1 of Section 2.3 (i.e., only the entropy produced by validated physical entropy
1385              sources is counted toward the entropy required for instantiating or reseeding the RBG).
1386              Any amount of entropy may be obtained from a non-physical entropy source as long as
1387              sufficient entropy has been obtained from the physical entropy sources to fulfill an entropy
1388              request.
1389           2. An RBG2(NP) construction uses the output of any validated non-physical or physical
1390              entropy sources as discussed in Method 2 of Section 2.3 (i.e., the entropy produced by both
1391              validated physical and non-physical entropy sources is counted toward the entropy required
1392              for instantiating or reseeding the RBG).
1393   These variants affect the implementation of a Get_ES_Bitstring function (as specified in Section
1394   2.8.2.2 and discussed in Section 3.1), either accessing the entropy source directly or via the
1395   Get_conditioned_full_entropy_input function during instantiation and reseeding (see Sections
1396   5.2.1 and 5.2.3). That is, when instantiating and reseeding an RBG2(P) construction (including a
1397   DRBG within an RBG3 construction as discussed in Section 6), Method 1 in Section 2.3 is used
1398   to combine the entropy from the entropy sources, and Method 2 is used when instantiating and
1399   reseeding an RBG2(NP) construction.

1400                 Conceptual Interfaces
1401   The RBG2 construction interfaces to the DRBG include function calls for instantiating the DRBG
1402   (see Section 5.2.1), generating pseudorandom bits on request (see Section 5.2.2), and (optionally)
1403   reseeding the DRBG at the end of the DRBG’s seedlife and providing prediction resistance upon
1404   request (see Section 5.2.3).
1405   Once instantiated, an RBG2 construction with a reseed capability may be reseeded on demand or
1406   whenever sufficient entropy is available.

1407   5.2.1. RBG2 Instantiation
1408   An RBG2 construction may be instantiated at any valid 20 security strength possible for the DRBG
1409   and its components using the following call:
1410               (status, RBG2_state_handle) = Instantiate_function (s, prediction_resistance_flag,
1411                                           personalization_string),




       20
            A security strength of either 128, 192, or 256 bits.


                                                                   38
       NIST SP 800-90C 3pd (Third Public Draft)                                                   Recommendation for RBG Constructions
       September 2022

1412   where s is the requested instantiation security strength for the DRBG. The
1413   prediction_resistance_flag (if used) is set to TRUE if prediction resistance is to be supported and
1414   FALSE otherwise.
1415   An RBG2 construction obtains entropy for its DRBG from one or more validated entropy sources,
1416   either directly or using a conditioning function to process the output of the entropy source to obtain
1417   a full-entropy bitstring for instantiation (e.g., when employing a CTR_DRBG without a derivation
1418   function using entropy sources that do not provide full-entropy output).
1419   SP 800-90A uses a Get_randomness-source_input call to obtain the entropy needed for
1420   instantiation (see SP 800-90A).
1421        1. When the DRBG is a CTR_DRBG without a derivation function, full-entropy bits shall be
1422           obtained as follows:
1423             a) If the entropy source provides full-entropy output, the Get_randomness-source_input
1424                call is replaced by: 21, 22
1425                                      (status, entropy_bitstring) = Get_ES_Bitstring (s + 128). 23
1426                   For an RBG2(P) construction, only validated physical entropy sources shall be used.
1427                   The output of the entropy sources shall be concatenated to obtain the s + 128 full-
1428                   entropy bits to be returned as entropy_bitstring.
1429                   (This recommendation assumes that non-physical entropy sources cannot provide full-
1430                   entropy output. Therefore, the Get_ES_bitstring function shall not be used with non-
1431                   physical entropy sources in this case.)
1432             b) If the entropy sources does not provide full-entropy output, the Get_randomness-
1433                source_input call is replaced by: 24, 25
1434                                                  (status, Full_entropy_bitstring) =
1435                                            Get_conditioned_full_entropy_input(s + 128).
1436                   Validated physical and/or non-physical entropy sources shall be used to provide the
1437                   requested entropy. For an RBG2(P) construction, the requested s + 128 bits of entropy
1438                   shall be counted as specified in Method 1 of Section 2.3. For an RBG2(NP)
1439                   construction, the requested s + 128 bits of entropy shall be counted as specified in
1440                   Method 2 of Section 2.3.
1441        2.    For the Hash_DRBG, HMAC_DRBG and CTR_DRBG (with a derivation function), the
1442             entropy source shall provide 3s/2 bits of entropy to establish the security strength.
1443             a)     If the consuming application requires full entropy in the returned bitstring, the
1444                    Get_randomness-source_input call is replaced by:
1445                                                            (status, Full_entropy_bitstring) =
1446                                                   Get_conditioned_full_entropy_input(3s/2).

       21
          Appropriate changes may be required for the Instantiate_function in [SP800-90A] and the algorithms in Section 10 of that document.
       22
          See Section 3.8.2.2 for a specification of the Get_ES_Bitstring function.
       23
          For a CTR_DRBG using AES, s + 128 = the length of the key + the length of the AES block = seedlen (see Table 2 in SP 800-90A).
       24
          Appropriate changes may be required for the Instantiate_function in [SP800-90A] and the algorithms in Section 10.2 of that document.
       25
          See Section 4.3.2 for a specification of the Get_conditioned_full_entropy_input function.


                                                                            39
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

1447           b)   If the consuming application does not require full entropy in the returned bitstring, the
1448                Get_randomness-source_input call is replaced by:
1449                                   (status, entropy_bitstring) = Get_ES_Bitstring(3s/2).
1450           Validated physical and/or non-physical entropy sources shall be used to provide the
1451           requested entropy. For an RBG2(P) construction, the requested 3s/2 bits of entropy shall
1452           be counted as specified in Method 1 of Section 2.3. For an RBG2(NP) construction, the
1453           requested 3s/2 bits of entropy shall be counted as specified in Method 2 of Section 3.3.

1454   5.2.2. Requesting Pseudorandom Bits from an RBG2 Construction
1455   Pseudorandom bits may be requested using the following call (see Section 2.8.1.2):
1456    (status, returned_bits) = Generate_function(RBG2_state_handle, requested_number_of_bits,
1457             requested_security_strength, prediction_resistance_request, additional_input),
1458   where state_handle (if used) was returned by the Instantiate_function (see Sections 2.8.1.1 and
1459   5.2.1).
1460   Support for prediction resistance is optional. If prediction resistance is supported, its use is
1461   optional. This RBG may be designed to always provide prediction resistance, to only provide
1462   prediction resistance upon request, or to be unable to provide prediction resistance (i.e., to not
1463   support prediction-resistance requests during generation).
1464   Note that when prediction resistance is requested, the Generate_function will invoke the
1465   Reseed_function. If sufficient entropy is not available for reseeding, an error indication shall be
1466   returned, and the requested bits shall not be generated.

1467   5.2.3. Reseeding an RBG2 Construction
1468   As discussed in Section 2.4.2, when the RBG2 construction includes a reseed capability, the
1469   reseeding of the DRBG may be performed 1) upon request from a consuming application (either
1470   an explicit request for reseeding or a request for the generation of bits with prediction resistance);
1471   2) on a fixed schedule based on time, number of outputs, or events; or 3) as sufficient entropy
1472   becomes available.
1473   An RBG2 construction is reseeded using the following call:
1474                    status = Reseed_function(RBG2_state_handle, additional_input),
1475   where the RBG2_state_handle (when used) was obtained during the instantiation of the RBG (see
1476   Sections 2.8.1.1 and 5.2.1).
1477   SP 800-90A uses a Get_randomness-source_input call to obtain the entropy needed for
1478   reseeding the DRBG (see Section 2.8.1.3 herein and in [SP800-90A]. The DRBG is reseeded at
1479   the instantiated security strength recorded in the DRBG’s internal state. The Get_randomness-
1480   source_input call in SP 800-90A shall be replaced with the following:
1481       1. For the CTR_DRBG without a derivation function, use the appropriate replacement as
1482          specified in step 1 of Section 5.2.1.


                                                         40
       NIST SP 800-90C 3pd (Third Public Draft)                                                       Recommendation for RBG Constructions
       September 2022

1483          2. For the Hash_DRBG, HMAC_DRBG and CTR_DRBG (with a derivation function),
1484             replace the Get_randomness-sourceinput call in the Reseed_function with the
1485             following: 26
1486                      a) If the consuming application requires full entropy in the returned bitstring, the
1487                         Get_randomness-source_input call is replaced by:
1488                                (status, Full_entropy_bitstring) = Get_conditioned_full_entropy_input(s).
1489                      b) If the consuming application does not require full entropy in the returned bitstring,
1490                         the Get_randomness-source_input call is replaced by:
1491                                                   (status, entropy_bitstring) = Get_ES_Bitstring(s).
1492                Validated physical and/or non-physical entropy sources shall be used to provide the
1493                requested entropy. For an RBG2(P) construction, the requested s bits of entropy shall be
1494                counted as specified in Method 1 27 of Section 2.3. For an RBG2(NP) construction, the
1495                requested s bits of entropy shall be counted as specified in Method 2 28 of Section 2.3.

1496                RBG2 Requirements
1497   An RBG2 construction has the following requirements in addition to those specified in [SP800-
1498   90A]:
1499          1. The RBG shall employ an approved and validated DRBG from [SP800-90A] whose
1500             components are capable of providing the targeted security strength for the RBG.
1501          2. The RBG and its components shall be successfully validated for compliance with [SP800-
1502             90A], [SP800-90B], SP 800-90C, [FIPS140], and the specification of any other approved
1503             algorithm used within the RBG, as appropriate.
1504          3. The RBG may include a reseed capability. If implemented, the reseeding of the DRBG
1505             shall be performed either a) upon request from a consuming application (either an explicit
1506             request for reseeding or a request for the generation of bits with prediction resistance); b)
1507             on a fixed schedule based on time, number of outputs, or events; and/or c) as sufficient
1508             entropy becomes available.
1509          4. Validated entropy sources shall be used to instantiate and reseed the DRBG. A non-
1510             validated entropy sources shall not be used for this purpose.
1511          5. The entropy sources used for the instantiation and reseeding of an RBG(P) construction
1512             shall include one or more validated physical entropy sources; the inclusion of one or more
1513             validated non-physical entropy sources is optional. A bitstring that contains entropy shall
1514             be assembled and the entropy in that bitstring determined as specified in Method 1 of
1515             Section 2.3 (i.e., only the entropy provided by validated physical entropy sources shall be
1516             counted toward fulfilling the amount of entropy in an entropy request).


       26
            See Sections 2.8.2.2 and 3.1 for discussions of the Get_ES_bitstring function.
       27
            Method 1 only counts the entropy provided by validated physical sources.
       28
            Method 2 counts the entropy provided by both physical and non-physical entropy sources.


                                                                                 41
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

1517       6. The entropy sources used for the instantiation and reseeding of an RBG2(NP) construction
1518          shall include one or more validated non-physical entropy sources; the inclusion of one or
1519          more validated physical entropy sources is optional. A bitstring containing entropy shall
1520          be assembled and the entropy in that bitstring determined as specified in Method 2 of
1521          Section 2.3 (i.e., the entropy provided by both validated non-physical entropy sources and
1522          any validated physical entropy sources included in the implementation shall be counted
1523          toward fulfilling the requested amount of entropy).
1524       7. The DRBG shall be capable of being instantiated and reseeded at the maximum security
1525          strength (s) for the DRBG design (see [SP800-90A]).
1526       8. A specific entropy-source output (or portion thereof) shall not be reused (e.g., it is
1527          destroyed after use).
1528       9. When instantiating and reseeding a CTR_DRBG without a derivation function, (s + 128)
1529          bits with full entropy shall be obtained either directly from the entropy source or from the
1530          entropy source via an external vetted conditioning function (see Section 3.3).
1531       10. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), a
1532           bitstring with at least 3s/2 bits of entropy shall be obtained from the entropy source to
1533           instantiate the DRBG at a security strength of s bits. When reseeding is performed, a
1534           bitstring with at least s bits of entropy shall be obtained from the entropy source.
1535       11. The DRBG shall be instantiated before first use (i.e., before providing output for use by a
1536           consuming application) and reseeded using the validated entropy sources used for
1537           instantiation.
1538       12. When health tests detect the failure of a validated entropy source, the failure shall be
1539           handled as discussed in Section 7.1.2.1.
1540   A non-testable requirement for the RBG (not testable by the validation labs) is:
1541       13. The RBG must not be used by applications that require a higher security strength than
1542           has been instantiated in the DRBG.




                                                       42
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

1543       RBG3 Constructions Based on Physical Entropy Sources
1544   An RBG3 construction is designed to provide full entropy (i.e., an RBG3 construction can support
1545   all security strengths). The RBG3 constructions specified in this Recommendation include one or
1546   more entropy sources and an approved DRBG from SP 800-90A that can and will be instantiated
1547   at a security strength of 256 bits. If an entropy source fails in an undetected manner, the RBG
1548   continues to operate as an RBG2(P) construction, providing outputs at the security strength of its
1549   DRBG (256 bits) (see Section 5 and Appendix A). If a failure is detected, the RBG operation shall
1550   be terminated.
1551   Two RBG3 constructions are specified:
1552       1. RBG3(XOR) − This construction is based on combining the output of one or more
1553          validated entropy sources with the output of an instantiated, approved DRBG using an
1554          exclusive-or operation (see Section 6.2).
1555       2. RBG3(RS) − This construction is based on using one or more validated entropy sources to
1556          continuously reseed the DRBG (see Section 6.3).
1557   An RBG3 construction continually accesses its entropy sources, and its DRBG may be reseeded
1558   whenever requested (e.g., to provide prediction resistance for the DRBG’s output). Upon receipt
1559   of a request for random bits from a consuming application, the entropy source is accessed to obtain
1560   sufficient bits for the request. See Sections 3.1 and 3.2 for further discussion about accessing the
1561   entropy source(s).
1562   An implementation may be designed so that the DRBG implementation used within an RBG3
1563   construction can be directly accessed by a consuming application (i.e., the directly accessible
1564   DRBG uses the same internal state as the RBG3 construction).
1565   An RBG3 construction is useful when bits with full entropy are required or a higher security
1566   strength than RBG1 and RBG2 constructions can support is needed.

1567           General Requirements
1568   RBG3 constructions have the following general security requirements. See Sections 6.2.2 and 6.3.2
1569   for additional requirements for the RBG3(XOR) and RBG3(RS) constructions, respectively.
1570       1. An RBG3 construction shall be designed to provide outputs with full entropy using one or
1571          more validated independent physical entropy sources as specified for Method 1 in Section
1572          3.3 (i.e., only the entropy provided by validated physical entropy sources shall be counted
1573          toward fulfilling entropy requests, although entropy provided by any validated non-
1574          physical entropy source may be used but not counted).
1575       2. An RBG3 construction and its components shall be successfully validated for compliance
1576          with the corresponding requirements in [SP800-90A], [SP800-90B], SP 800-90C, [FIPS
1577          140] and the specification of any other approved algorithm used within the RBG, as
1578          appropriate.
1579       3. The DRBG within the RBG3 construction shall be capable of supporting a security strength
1580          of 256 bits (i.e., a CTR_DRBG based on AES-256 or either Hash_DRBG or
1581          HMAC_DRBG using a hash function with an output length of at least 256 bits).

                                                       43
       NIST SP 800-90C 3pd (Third Public Draft)                                                          Recommendation for RBG Constructions
       September 2022

1582           4. The DRBG shall be instantiated at a security strength of 256 bits before the first use of the
1583              RBG3 construction or direct access of the DRBG.
1584           5. The DRBG shall include a reseed function to support reseed requests.
1585           6. A specific entropy-source output (or portion thereof) shall not be reused (e.g., the same
1586              entropy-source outputs shall not be used for an RBG3 request and a request to a separate
1587              instantiation of a DRBG).
1588           7. If the DRBG is directly accessible, the requirements in Section 5.3 for RBG2(P)
1589              constructions shall apply to the direct access of the DRBG.
1590           8. When health tests detect the failure of a validated physical entropy source, the failure shall
1591              be handled as discussed in Section 7.1.2.1. If a failure is detected in a non-physical entropy
1592              source, the consuming application shall be notified.

1593                RBG3(XOR) Construction
1594   An RBG3(XOR) construction contains one or more validated entropy sources and a DRBG whose
1595   outputs are XORed to produce full-entropy output (see Figure 17). In order to provide the required
1596   full-entropy output, the input to the XOR (shown as “⊕” in the figure) from the entropy-source
1597   side of the figure shall consist of bits with full entropy (see Section 2.1). 29 If the entropy sources
1598   cannot provide full-entropy output, then an external conditioning function shall be used to
1599   condition the output of the entropy sources to a full-entropy bitstring before XORing with the
1600   output of the DRBG (see Section 3.3).




       29
            Note that the DRBGs themselves are not designed to inherently provide full-entropy output.


                                                                               44
       NIST SP 800-90C 3pd (Third Public Draft)                                                       Recommendation for RBG Constructions
       September 2022




1601
1602                                                      Fig. 17. RBG3(XOR) Construction

1603   When n bits of output are requested from an RBG3(XOR) construction, n bits of output from the
1604   DRBG are XORed with n full-entropy bits obtained either directly from the entropy source or from
1605   the entropy source after cryptographic processing by an external vetted conditioning function (see
1606   Section 3.3). When the entropy source is working properly, 30 an n-bit output from the RBG3(XOR)
1607   construction is said to provide n bits of entropy or to support a security strength of n bits. The
1608   DRBG used in the RBG3(XOR) construction is always required to support a 256-bit security
1609   strength. If the entropy source fails without being detected and the DRBG has been successfully
1610   instantiated with at least 256 bits of entropy, the DRBG continues to produce output at a security
1611   strength of 256 bits.
1612   An example of an RBG3(XOR) design is provided in Appendix B.5.

1613   6.2.1. Conceptual Interfaces
1614   The RBG interfaces include function calls for instantiating the DRBG (see Section 6.2.1.1),
1615   generating random bits on request (see Section 6.2.1.2), and reseeding the DRBG instantiation(s)
1616   (see Section 6.2.1.3).

1617   6.2.1.1.                 Instantiation of the DRBG
1618   The DRBG for the RBG3(XOR) construction is instantiated as follows:


       30
            The entropy source provides at least the amount of entropy determined during the entropy-source validation process.


                                                                                45
       NIST SP 800-90C 3pd (Third Public Draft)                           Recommendation for RBG Constructions
       September 2022

1619   RBG3(XOR)_DRBG_Instantiate:
1620       Input: integer (prediction_resistance_flag), string personalization_string.
1621       Output: integer status, integer state_handle.
1622       Process:
1623          1. (status, RBG3(XOR)_state_handle) = Instantiate_function(256,
1624             prediction_resistance_flag, personalization_string).
1625           2. Return (status, RBG3(XOR)_state_handle).
1626   In step 1, the DRBG is instantiated at a security strength of 256 bits. The
1627   prediction_resistance_flag and personalization_string (when provided as input to the
1628   RBG3(XOR)_DRBG_Instantiate function) shall be used in step 1.
1629   In step 2, the status and RBG3(XOR)_state_handle that were obtained in step 1 are returned. Note
1630   that if the status does not indicate a successful instantiate process (i.e., a failure is indicated), the
1631   returned state handle shall be invalid (e.g., a Null value). The handling of status codes is discussed
1632   in Section 2.8.3.

1633   6.2.1.2.        Random and Pseudorandom Bit Generation
1634   Let n be the requested number of bits to be generated, and let the RBG3(XOR)_state_handle be
1635   the value returned by the instantiation function for RBG3’s DRBG instantiation (see Section
1636   6.2.1.1). Random bits with full entropy shall be generated by the RBG3(XOR) construction using
1637   the following generate function:
1638   RBG3(XOR)_Generate:
1639     Input: integer (RBG3(XOR)_state_handle, n, prediction_resistance_request), string
1640     additional_input.
1641       Output: integer status, string returned_bits.
1642       Process:
1643          1. (status, ES_bits) = Request_entropy(n).
1644           2. If (status ≠ SUCCESS), then return (status, invalid_string).
1645           3. (status, DRBG_bits) = Generate_function(RBG3(XOR)_state_handle, n, 256,
1646              prediction_resistance_request, additional_input).
1647           4. If (status ≠ SUCCESS), then return (status, invalid_string).
1648           5. returned_bits = ES_bits ⊕ DRBG_bits.
1649           6. Return (SUCCESS, returned_bits).
1650   Step 1 requests that the entropy sources generate bits. Since full-entropy bits are required, the
1651   (place holder) Request_entropy call shall be replaced by one of the following:




                                                          46
       NIST SP 800-90C 3pd (Third Public Draft)                                                       Recommendation for RBG Constructions
       September 2022

1652        •     If full-entropy output is provided by all validated physical entropy sources used by the
1653              RBG3(XOR) implementation, and non-physical entropy sources are not used, 31 step 1
1654              becomes:
1655                                            (status, ES_bits) = Get_ES_Bitstring(n).
1656              The Get_ES_Bitstring function 32 shall use Method 1 in Section 2.3 to obtain the n full-
1657              entropy bits that were requested in order to produce the ES_bits bitstring.
1658        •     If full-entropy output is not provided by all physical entropy sources, or the output of both
1659              physical and non-physical entropy sources is also used by the implementation, step 1
1660              becomes:
1661                                 (status, ES_bits) = Get_conditioned_full_entopy_input(n).
1662              The Get_conditioned_full_entropy_input construction is specified in Section 3.3.2. It
1663              requests entropy from the entropy sources in step 3.1 of that construction with a
1664              Get_ES_Bitstring call. The Get_ES_Bitstring call shall use Method 1 (as specified in
1665              Section 3.3) when collecting the output of the entropy sources (i.e., only the entropy
1666              provided by physical entropy sources is counted).
1667   In step 2, if the request in step 1 is not successful, abort the RBG3(XOR)_Generate function,
1668   returning the status received in step 1 and an invalid bitstring as the returned_bits (e.g., a Null
1669   bitstring). If status indicates a success, ES_bits is the full-entropy bitstring to be used in step 5.
1670   In step 3, the RBG3(XOR)’s DRBG instantiation is requested to generate n bits at a security
1671   strength of 256 bits. The DRBG instantiation is indicated by the RBG3(XOR)_state_handle, which
1672   was obtained during instantiation (see Section 6.2.1.1). If a prediction-resistance request and/or
1673   additional input are provided in the RBG.3(XOR)_Generate call, they shall be included in the
1674   Generate_function call.
1675   Note that it is possible that the DRBG would require reseeding during the Generate_function call
1676   in step 3 (e.g., because of a prediction-resistance request, or the end of the seedlife of the DRBG
1677   has been reached). If a reseed of the DRBG is required during Generate-function execution, the
1678   DRBG shall be reseeded as specified in Section 6.2.1.3 with bits not otherwise used by the RBG.
1679   In step 4, if the Generate_function request is not successful, the RBG3(XOR)_Generate
1680   function is aborted, and the status received in step 3 and an invalid bitstring (e.g., a Null bitstring)
1681   are returned to the consuming application. If status indicates a success, DRBG_bits is the
1682   pseudorandom bitstring to be used in step 5.
1683   Step 5 combines the bitstrings returned from the entropy sources (from step 1) and the DRBG
1684   (from step 3) using an XOR operation. The resulting bitstring is returned to the consuming
1685   application in step 6.




       31
          Since non-physical entropy sources are assumed to be incapable of providing full-entropy output, they cannot contribute to the bitstring provided
       by the Get_ES_Bitstring function.
       32
          See Section 3.10.2.2.


                                                                               47
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

1686   6.2.1.3.        Pseudorandom Bit Generation Using a Directly Accessible DRBG
1687   Pseudorandom bit generation by a direct access of the DRBG is accomplished as specified in
1688   Section 5.2.2 using the state handle obtained during instantiation (see Section 6.2.1.1).
1689   When directly accessing the DRBG instantiation that is also used by the RBG3(XOR)
1690   construction, the following function is used:
1691               (status, returned_bits) = Generate_function(RBG3(XOR)_state_handle,
1692        requested_number_of_bits, requested_security_strength, prediction_resistance_request,
1693                                          additional_input),
1694   where:
1695       •    RBG3(XOR)_state_handle indicates the DRBG instantiation to be used.
1696       •    requested_security_strength ≤ 256.
1697       •    prediction-resistance-request is either TRUE or FALSE; requesting prediction resistance
1698            during the Generate_function is optional.
1699       •    The use of additional input is optional.
1700   Note that when prediction resistance is requested, the Generate_function will invoke the
1701   Reseed_function (see Section 6.2.1.3). If sufficient entropy is not available for reseeding, an error
1702   indication shall be returned, and the requested bits shall not be generated.

1703   6.2.1.4.        Reseeding the DRBG Instantiations
1704   Reseeding is performed using the entropy sources in the same manner as an RBG2 construction
1705   using the appropriate state handle (e.g., RBG3(XOR)_state_handle, as specified in Section 6.2.1.1).

1706   6.2.2. RBG3(XOR) Requirements
1707   An RBG3(XOR) construction has the following requirements in addition to those provided in
1708   Section 6.2:
1709       1. Bitstrings with full entropy shall be provided to the XOR operation either directly from the
1710          concatenated output of one or more validated physical entropy sources or by an external
1711          conditioning function using the output of one or more validated entropy sources as
1712          specified in Method 1 of Section 2.3. In the latter case, the output of validated non-physical
1713          entropy sources may be used without counting any entropy that they might provide.
1714       2. The same entropy-source outputs used by the DRBG for instantiation or reseeding shall
1715          not be used as input into the RBG’s XOR operation.
1716       3. The DRBG instantiations shall be reseeded occasionally (e.g., after a predetermined period
1717          of time or number of generation requests).




                                                           48
       NIST SP 800-90C 3pd (Third Public Draft)                          Recommendation for RBG Constructions
       September 2022

1718           RBG3(RS) Construction
1719   The second RBG3 construction specified in this document is the RBG3(RS) construction shown
1720   in Figure 18, and an example of this construction is provided in Appendix B.6.
1721   Note that external conditioning of the outputs from the entropy sources during instantiation and
1722   reseeding is required when the DRBG is a CTR_DRBG without a derivation function and the
1723   entropy sources do not provide a bitstring with full entropy.




1724
1725                                        Fig. 18. RBG3(RS) Construction


1726   6.3.1. Conceptual Interfaces
1727   The RBG interfaces include function calls for instantiating the DRBG (see Section 6.3.1.1),
1728   generating random bits on request (see Section 6.3.1.2), and reseeding the DRBG instantiation (see
1729   Section 6.3.1.3).

1730   6.3.1.1.        Instantiation of the DRBG Within an RBG3(RS) Construction
1731   DRBG instantiation is performed as follows:
1732   RBG3(RS)_DRBG_Instantiate:
1733       Input: integer (prediction_resistance_flag), string personalization_string.
1734       Output: integer status, integer state_handle.
1735       Process:
1736          1. (status, RBG3(RS)_state_handle) = Instantiate_function(256,
1737             prediction_resistance_flag = TRUE, personalization_string).


                                                         49
       NIST SP 800-90C 3pd (Third Public Draft)                           Recommendation for RBG Constructions
       September 2022

1738           2. Return (status, RBG3(RS)_state_handle).
1739   In step 1, the DRBG is instantiated at a security strength of 256 bits. The
1740   prediction_resistance_flag is set to TRUE, and personalization_string (when provided as input to
1741   the RBG3(RS)_DRBG_Instantiate function) shall be used in step 1.
1742   In step 2, the status and the RBG3(RS)_state_handle are returned. Note that if the status does not
1743   indicate a successful instantiate process (i.e., a failure is indicated), the returned state handle shall
1744   be invalid (e.g., a Null value). The handling of status codes is discussed in Section 2.8.3.

1745   6.3.1.2.        Random and Pseudorandom Bit Generation
1746   6.3.1.2.1   Generation Using the RBG3(RS) Construction
1747   When an RBG3(RS) construction receives a request for n random bits, the DRBG instantiation
1748   used by the construction needs to be reseeded with sufficient entropy so that bits with full entropy
1749   can be extracted from the DRBG’s output block.
1750   Table 3 provides information for generating full-entropy output from the DRBGs in SP 800-90A
1751   that use the cryptographic primitives listed in the table. Each primitive in the table can support a
1752   security strength of 256 bits − the highest security strength recognized by this Recommendation.
1753   To use the table, select the row that identifies the cryptographic primitive used by the implemented
1754   DRBG.
1755       •   Column 1 lists the DRBGs.
1756       •   Column 2 identifies the cryptographic primitives that can be used by the DRBG(s) in
1757           column 1 to support a security strength of 256 bits.
1758       •   Column 3 indicates the length of the output block (output_len) for the cryptographic
1759           primitives in column 2.
1760       •   Column 4 indicates the amount of fresh entropy that is obtained by a Reseed_function
1761           when the Generate_function is invoked with prediction resistance requested.
1762                 Table 3. Values for generating full-entropy bits by an RBG3(RS) Construction

                                                           Output Block          Entropy obtained
                                            DRBG
                   DRBG                                  Length (output_len)     during a normal
                                            Primitives
                                                               in bits           reseed operation
                   CTR_DRBG
                   (with no derivation      AES-256              128                   384
                   function)
                   CTR_DRBG (using a
                                            AES-256              128                   256
                   derivation function)
                                            SHA-256
                                                                 256                   256
                                            SHA3-256
                   Hash_DRBG
                                            SHA-384
                   or                                            384                   256
                                            SHA3-384
                   HMAC_DRBG
                                            SHA-512
                                                                 512                   256
                                            SHA3-512




                                                          50
       NIST SP 800-90C 3pd (Third Public Draft)                            Recommendation for RBG Constructions
       September 2022

1763   The strategy used for obtaining full-entropy output from the RBG3(RS) construction requires
1764   obtaining sufficient fresh entropy and subsequently extracting full entropy bits from the output
1765   block in accordance with item 11 of Section 2.6.
1766   For the RBG3(RS)_Generate function:
1767       •   Let n be the requested number of full-entropy bits to be generated by an RBG3(RS)
1768           construction.
1769       •   Let RBG3(RS)_state_handle be a state handle returned from the instantiate function (see
1770           Section 6.3.1.1).
1771   Random bits with full entropy shall be generated as follows:
1772   RBG3(RS)_ Generate:
1773       Input: integer (RBG3(RS)_state_handle, n), string additional_input.
1774       Output: integer status, bitstring returned_bits.
1775       Process:
1776             1. full-entropy_bits =Null.
1777               2. sum = 0.
1778               3. While (sum < n),
1779                   3.1   Obtain generated_bits from the entropy source.
1780                   3.2   If (status ≠ SUCCESS), then return (status, invalid_bitstring).
1781                   3.3   full-entropy_bits = full_entropy_bits || generated_bits.
1782                   3.4   sum = sum + len(generated_bits).
1783               4. Return (SUCCESS, leftmost(full-entropy_bits, n)).
1784   In steps 1 and 2, the bitstring intended to collect the generated bits for returning to the calling
1785   application (i.e., full-entropy_bits) is initialized to the Null bitstring, and the counter for the number
1786   of bits obtained for fulfilling the request is initialized to zero.
1787   Step 3 is iterated until n bits have been generated.
1788       In step 3.1, the DRBG is requested to obtain sufficient entropy so that a bitstring with full
1789       entropy can be extracted from the output block. The form of the request depends on the DRBG
1790       algorithm used in the RBG3(RS) construction and the method for obtaining a full-entropy
1791       bitstring (see Section 2.6, item 11). Note that extracting fewer full-entropy bits from the
1792       DRBG’s output block is permitted.
1793           For a CTR_DRBG (with or without a derivation function), a maximum of 128 bits with
1794           full entropy can be provided from the AES output block for each iteration of the DRBG as
1795           follows:
1796                   (status, generated_bits) = Generate_function(RBG3(RS)_state_handle, 128,
1797                   256, prediction_resistance_request = TRUE, additional_input).



                                                          51
       NIST SP 800-90C 3pd (Third Public Draft)                                                  Recommendation for RBG Constructions
       September 2022

1798                   The Generate_function generates 128 (full entropy) bits after reseeding the
1799                   CTR_DRBG with either 256 or 384 bits of entropy (by setting
1800                   prediction_resistance_request = TRUE). 33
1801             For a hash-based DRBG (i.e., Hash_DRBG and HMAC_DRBG), a maximum of 256 full-
1802             entropy bits can be produced from each iteration of the DRBG as follows:
1803                        3.1.1      (status, additional_entropy) = Get_ES_Bitstring (64).
1804                        3.1.2      If (status ≠ SUCCESS), then return (status, invalid_bitstring).
1805                        3.1.3      (status, generated_bits) = Generate_function(RBG3(RS)_state_handle,
1806                                   256, 256, prediction_resistance_request = TRUE, additional_input ||
1807                                   additional_entropy).
1808                   At least 64 bits of entropy beyond the amount obtained during reseeding are required.
1809                   As shown in Table 3, the reseeding process will acquire 256 bits of entropy. The (256
1810                   + 64 = 384) bits of entropy are inserted into the DRBG by 1) obtaining a bitstring with
1811                   at least 64 bits of entropy directly from the entropy sources (step 3.1.1), 2)
1812                   concatenating the additional entropy bits with any additional_input provided in the
1813                   RBG3(RS)_Generate call, and 3) requesting the generation of 256 bits with prediction
1814                   resistance and including the concatenated bitstring. This results in both the reseed of
1815                   the DRBG with 256 bits of entropy and the insertion of the additional 64 bits of entropy)
1816                   (step 3.1.3).
1817             For a hash-based DRBG (i.e., Hash_DRBG and HMAC_DRBG), a maximum of 192 full-
1818             entropy bits can be produced from each iteration of the DRBG as follows:
1819                        (status, generated_bits) = Generate_function(RBG3(RS)_state_handle, 192,
1820                        256, prediction_resistance_request = TRUE, additional_input).
1821             The DRBG is reseeded with 256 bits of entropy by requesting generation with prediction
1822             resistance and extracting only (256 − 64 = 192) bits from the DRBG’s output block as
1823             full-entropy bits.
1824        In step 3.2, if the Generate_function request invoked in step 3.1 is not successful, the
1825        RBG3(RS)_Generate function is aborted, and the status received in step 3.1 and an invalid
1826        bitstring (e.g., a Null bitstring) are returned to the consuming application.
1827        Step 3.3 combines the full-entropy bitstrings obtained in step 3.1 with previously generated
1828        full-entropy bits using a concatenation operation.
1829        Step 3.4 adds the number of full-entropy bits produced in step 3.1 to those generated in
1830        previous iterations of step 3.
1831        If sum is less than the requested number of bits (n), repeat step 3 starting at step 3.1.
1832   In step 4, the leftmost n bits are selected from the collected bitstring (i.e., full-entropy_bits) and
1833   returned to the consuming application.
1834   6.3.1.2.2       Generation Using a Directly Accessible DRBG

       33
         The use of the prediction_resistance_request will handle the differences between the two versions of the CTR_DRBG (i.e., with or without a
       derivation function).


                                                                           52
       NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
       September 2022

1835   Direct access of the DRBG is accomplished as specified in Section 5.2.2 using the state handle
1836   associated with the instantiation and internal state that was returned for the DRBG (see Section
1837   6.3.1.1).
1838                (status, returned_bits) = Generate_function(RBG3(RS)_state_handle,
1839        requested_number_of_bits, requested_security_strength, prediction_resistance_request,
1840                                           additional_input),
1841   where state_handle (if used) was returned by the Instantiate_function (see Section 6.3.1.1).
1842   When the previous generate request was made to the RBG3(RS) construction rather than directly
1843   to the DRBG, the prediction_resistance_request parameter shall be set to TRUE. Otherwise,
1844   requesting prediction resistance during the Generate_function is optional.

1845   6.3.1.3.        Reseeding
1846   Reseeding is performed during a Generate_function request to a directly accessible DRBG (see
1847   Section 6.3.1.2.2) when prediction resistance is requested or the end of the DRBG’s seedlife is
1848   reached. The Generate_function invokes the Reseed_function specified in [SP800-90A].
1849   Reseeding may also be performed on demand as specified in Section 4.2.3 using the
1850   RBG3(RS)_state_handle if provided during instantiation.

1851   6.3.2. Requirements for a RBG3(RS) Construction
1852   An RBG3(RS) construction has the following requirements in addition to those provided in
1853   Section 6.1:
1854       1. Fresh entropy shall be acquired either directly from all independent validated entropy
1855          sources (see Section 3.2) or (in the case of a CTR_DRBG used as the DRBG when the
1856          entropy sources do not provide full-entropy output) from an external conditioning function
1857          that processes the output of the validated entropy sources as specified in Section 3.3.2.
1858          Method 1 in Section 2.3 shall be used when collecting the required entropy (i.e., only the
1859          entropy provided by validated physical entropy sources shall be counted toward fulfilling
1860          the amount of entropy requested).
1861       2. If the DRBG is directly accessible, a reseed of the DRBG instantiation shall be performed
1862          before generating output in response to a request for output from the directly accessible
1863          DRBG when the previous use of the DRBG was by the RBG3(RS) construction. This could
1864          require an additional internal state value to record the last use of the DRBG for generation
1865          (e.g., used by an RBG3(RS)_Generate function as specified in Section 6.3.1.2.1 or
1866          directly accessed by a (DRBG) Generate_function as discussed in Section 6.3.1.2.2).




                                                       53
       NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
       September 2022

1867       Testing
1868   Two types of testing are specified in this Recommendation: health testing and implementation-
1869   validation testing. Health testing shall be performed on all RBGs that claim compliance with this
1870   Recommendation (see Section 7.1). Section 7.2 provides requirements for implementation
1871   validation.

1872           Health Testing
1873   Health testing is the testing of an implementation prior to and during normal operations to
1874   determine that the implementation continues to perform as expected and as validated. Health
1875   testing is performed by the RBG itself (i.e., the tests are designed into the RBG implementation).
1876   An RBG shall support the health tests specified in [SP800-90A] and [SP800-90B] as well as
1877   perform health tests on the components of SP 800-90C (see Section 7.1.1). [FIPS 140] specifies
1878   the testing to be performed within a cryptographic module.

1879   7.1.1. Testing RBG Components
1880   Whenever an RBG receives a request to start up or perform health testing, a request for health
1881   testing shall be issued to the RBG components (e.g., the DRBG and any entropy source).

1882   7.1.2. Handling Failures
1883   Failures may occur during the use of entropy sources and during the operation of other components
1884   of an RBG.
1885   Note that [SP800-90A] and [SP800-90B] discuss the error handling for DRBGs and entropy
1886   sources, respectively.

1887   7.1.2.1.        Entropy-Source Failures
1888   A failure of a validated entropy source may be reported to the Get_ES_Bitstring function (see
1889   item 3 of Section 3.1 and item 4 of Section 3.2) during entropy requests to the entropy sources or
1890   to the RBG when the entropy sources continue to function when entropy is not requested (see item
1891   5 of Section 3.2).

1892   7.1.2.2.        Failures by Non-Entropy-Source Components
1893   Failures by non-entropy-source components may be caused by either hardware or software
1894   failures. Some of these may be detected using the health testing within the RBG using known-
1895   answer tests. Failures could also be detected by the system in or on which the RBG resides.
1896   When such failures are detected that affect the RBG, RBG operation shall be terminated. The RBG
1897   must not be resumed until the reasons for the failure have been determined and the failures have
1898   been repaired and successfully tested for proper operation.


                                                      54
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

1899           Implementation Validation
1900   Implementation validation is the process of verifying that an RBG and its components fulfill the
1901   requirements of this Recommendation. Validation is accomplished by:
1902       •   Validating the components from [SP800-90A] and [SP800-90B].
1903       •   Validating the use of the constructions in SP 800-90C via code inspection, known-answer
1904           tests, or both, as appropriate.
1905       •   Validating that the appropriate documentation as specified in SP 800-90C has been
1906           provided (see below).
1907   Documentation shall be developed that will provide assurance to testers that an RBG that claims
1908   compliance with this Recommendation has been implemented correctly. This documentation shall
1909   include the following as a minimum:
1910       •   An identification of the constructions and components used by the RBG, including a
1911           diagram of the interaction between the constructions and components.
1912       •   If an external conditioning function is used, an indication of the type of conditioning
1913           function and the method for obtaining any keys that are required by that function.
1914       •   Appropriate documentation, as specified in [SP800-90A] and [SP800-90B]. The DRBG
1915           and the entropy sources shall be validated for compliance with SP 800-90A or SP 800-
1916           90B, respectively, and the validations successfully finalized before the completion of RBG
1917           implementation validation.
1918       •   For an RBG1 or RBG2 construction, the maximum security-strength that can be supported
1919           by the DRBG.
1920       •   A description of all validated and non-validated entropy sources used by the RBG,
1921           including identifying whether the entropy source is a physical or non-physical entropy
1922           source.
1923       •   Documentation justifying the independence of all validated entropy sources from all other
1924           validated and non-validated entropy sources.
1925       •   An identification of the features supported by the RBG (e.g., access to the underlying
1926           DRBG of an RBG3 construction).
1927       •   A description of the health tests performed, including an identification of the periodic
1928           intervals for performing the tests.
1929       •   A description of any support functions other than health testing.
1930       •   A description of the RBG components within the RBG security boundary (see Section 2.5).
1931       •   For an RBG1 construction, a statement indicating that the randomness source must be a
1932           validated RBG2(P) or RBG3 construction (e.g., this could be provided in user
1933           documentation and/or a security policy).
1934       •   If sub-DRBGs can be used in an RBG1 construction, the maximum number of sub-DRBGs
1935           and the security strengths to be supported by the sub-DRBGs.

                                                       55
       NIST SP 800-90C 3pd (Third Public Draft)                    Recommendation for RBG Constructions
       September 2022

1936       •   For an RBG2 construction (including a directly accessible DRBG within an RBG3
1937           construction), a statement indicating whether prediction resistance is always provided
1938           when a request is made by a consuming application, only provided when requested, or
1939           never provided.
1940       •   For an RBG3 construction, a statement indicating whether the DRBG can be accessed
1941           directly.
1942       •   Documentation specifying the guidance to users about fulfilling the non-testable
1943           requirements for RBG1 constructions, RBG2 constructions, and sub-DRBGs, as
1944           appropriate (see Sections 5.4 and 6.3, respectively).




                                                     56
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

1945   References

1946   [FIPS140]               National Institute of Standards and Technology (2001) Security
1947                           Requirements for Cryptographic Modules. (U.S. Department of Commerce,
1948                           Washington, DC), Federal Information Processing Standards Publication
1949                           (FIPS)      140-2,   Change    Notice   2    December     03,   2002.
1950                           https://doi.org/10.6028/NIST.FIPS.140-2

1951                           National Institute of Standards and Technology (2010) Security
1952                           Requirements for Cryptographic Modules. (U.S. Department of Commerce,
1953                           Washington, DC), Federal Information Processing Standards Publication
1954                           (FIPS) 140-3. https://doi.org/10.6028/NIST.FIPS.140-3
1955   [FIPS140IG]             National Institute of Standards and Technology, Canadian Centre for
1956                           Cyber Security Implementation Guidance for FIPS 140-2 and the
1957                           Cryptographic Module Validation Program, [Amended]. Available at
1958                           https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-
1959                           program/documents/fips140-2/FIPS1402IG.pdf
1960   [FIPS180]               National Institute of Standards and Technology (2015) Secure Hash
1961                           Standard (SHS). (U.S. Department of Commerce, Washington, DC),
1962                           Federal Information Processing Standards Publication (FIPS) 180-4.
1963                           https://doi.org/10.6028/NIST.FIPS.180-4
1964   [FIPS197]               National Institute of Standards and Technology (2001) Advanced
1965                           Encryption Standard (AES). (U.S. Department of Commerce, Washington,
1966                           DC), Federal Information Processing Standards Publication (FIPS) 197.
1967                           https://doi.org/10.6028/NIST.FIPS.197
1968   [FIPS198]               National Institute of Standards and Technology (2008) The Keyed-Hash
1969                           Message Authentication Code (HMAC). (U.S. Department of Commerce,
1970                           Washington, DC), Federal Information Processing Standards Publication
1971                           (FIPS) 198-1. https://doi.org/10.6028/NIST.FIPS.198-1.
1972   [FIPS202]               National Institute of Standards and Technology (2015) SHA-3 Standard:
1973                           Permutation-Based Hash and Extendable-Output Functions. (U.S.
1974                           Department of Commerce, Washington, DC), Federal Information
1975                           Processing          Standards       Publication     (FIPS)       202.
1976                           https://doi.org/10.6028/NIST.FIPS.202
1977   [NISTIR8427]            Buller D, Kaufer A, Roginsky AL, Sonmez Turan M (2022). Discussion on
1978                           the Full Entropy Assumption of SP 800-90 Series. (National Institute of
1979                           Standards and Technology, Gaithersburg, MD), NIST Internal Report
1980                           (NISTIR) 8427 ipd. https://doi.org/10.6028/NIST.IR.8427.ipd
1981   [SP800-38B]             Dworkin MJ (2005) Recommendation for Block Cipher Modes of
1982                           Operation: the CMAC Mode for Authentication. (National Institute of
1983                           Standards and Technology, Gaithersburg, MD), NIST Special Publication



                                                        57
       NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
       September 2022

1984                           (SP) 800-38B, Includes updates as              of   October    6,    2016.
1985                           https://doi.org/10.6028/NIST.SP.800-38B
1986   [SP800-57Part1]         Barker EB (2020) Recommendation for Key Management: Part 1 –
1987                           General. (National Institute of Standards and Technology, Gaithersburg,
1988                           MD), NIST Special Publication (SP) 800-57 Part 1, Rev. 5.
1989                           https://doi.org/10.6028/NIST.SP.800-57pt1r5

1990   [SP800-67]              Barker EB, Mouha N (2017) Recommendation for the Triple Data
1991                           Encryption Algorithm (TDEA) Block Cipher. (National Institute of
1992                           Standards and Technology, Gaithersburg, MD), NIST Special Publication
1993                           (SP) 800-67, Rev. 2. https://doi.org/10.6028/NIST.SP.800-67r2

1994   [SP800-90A]             Barker EB, Kelsey JM (2015) Recommendation for Random Number
1995                           Generation Using Deterministic Random Bit Generators. (National
1996                           Institute of Standards and Technology, Gaithersburg, MD), NIST Special
1997                           Publication (SP) 800-90A, Rev. 1. https://doi.org/10.6028/NIST.SP.800-
1998                           90Ar1
1999   [SP800-90B]             Sönmez Turan M, Barker EB, Kelsey JM, McKay KA, Baish ML, Boyle M
2000                           (2018) Recommendation for the Entropy Sources Used for Random Bit
2001                           Generation. (National Institute of Standards and Technology, Gaithersburg,
2002                           MD),         NIST       Special       Publication     (SP)       800-90B.
2003                           https://doi.org/10.6028/NIST.SP.800-90B

2004   [SP800-131A]            Barker EB, Roginsky AL (2019) Transitioning the Use of Cryptographic
2005                           Algorithms and Key Lengths. (National Institute of Standards and
2006                           Technology, Gaithersburg, MD), NIST Special Publication (SP) 800-131A,
2007                           Rev. 2. https://doi.org/10.6028/NIST.SP.800-131Ar2
2008   [WS19]                  Woodage J, Shumow D (2019) An Analysis of NIST SP 800-90A. In:
2009                           Ishai Y, Rijmen V (eds) Advances in Cryptology – EUROCRYPT 2019.
2010                           EUROCRYPT 2019. Lecture Notes in Computer Science, vol 11477.
2011                           Springer, Cham. https://doi.org/10.1007/978-3-030-17656-3_6




                                                       58
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

2012   Appendix A. Entropy vs. Security Strength (Informative)
2013   This section of the appendix compares and contrasts entropy and security strength.

2014   A.1.    Entropy
2015   Suppose that an entropy source produces n-bit strings with m bits of entropy in each bitstring. This
2016   means that when an n-bit string is obtained from that entropy source, the best possible guess of the
2017   value of the string has a probability of no more than 2−m of being correct.
2018   Entropy can be thought of as a property of a probability distribution, like the mean or variance.
2019   Entropy measures the unpredictability or randomness of the probability distribution on bitstrings
2020   produced by the entropy source, not a property of any particular bitstring. However, the
2021   terminology is sometimes slightly abused by referring to a bitstring as having m bits of entropy.
2022   This simply means that the bitstring came from a source that ensures m bits of entropy in its output
2023   bitstrings.
2024   Because of the inherent variability in the process, predicting future entropy-source outputs does
2025   not depend on an adversary’s amount of computing power.

2026   A.2.    Security Strength
2027   A deterministic cryptographic mechanism (such as one of the DRBGs defined in [SP800-90A])
2028   has a security strength − a measure of how much computing power an adversary expects to need
2029   to defeat the security of the mechanism. If a DRBG has an s-bit security strength, an adversary
2030   who can make 2w computations of the underlying block cipher or hash function, where w < s,
2031   expects to have about a 2w−s probability of defeating the DRBG’s security. For example, an
2032   adversary who can perform 296 AES encryptions can expect to defeat the security of the CTR-
2033   DRBG that uses AES-128 with a probability of about 2−32 (i.e., 296−128).

2034   A.3.    A Side-by-Side Comparison
2035   Informally, one way of thinking of the difference between security strength and entropy is the
2036   following: suppose that an adversary somehow obtains the internal state of an entropy source (e.g.,
2037   the state of all of the ring oscillators and any internal buffer). This might allow the adversary to
2038   predict the next few bits from the entropy source (assuming that there is some buffering of bits
2039   within the entropy source), but the entropy source outputs will once more become unpredictable
2040   to the adversary very quickly. For example, knowing what faces of the dice are showing on the
2041   craps table does not allow a player to successfully predict the next roll of the dice.
2042   In contrast, suppose that an adversary somehow obtains the internal state of a DRBG. Because the
2043   DRBG is deterministic, the adversary can then predict all future outputs from the DRBG until the
2044   next reseeding of the DRBG with a sufficient amount of entropy.
2045   An entropy source provides bitstrings that are hard for an adversary to guess correctly but usually
2046   have some detectable statistical flaws (e.g., they may have slightly biased bits, or successive bits
2047   may be correlated). However, a well-designed DRBG provides bitstrings that exhibit none of these


                                                       59
       NIST SP 800-90C 3pd (Third Public Draft)                                                     Recommendation for RBG Constructions
       September 2022

2048   properties. Rather, they have independent and identically distributed bits, with each bit taking on
2049   a value with a probability of exactly 0.5. These bitstrings are only unpredictable to an adversary
2050   who does not know the DRBG’s internal state.

2051   A.4.         Entropy and Security Strength in this Recommendation
2052   In the RBG1 construction specified in Section 4, the DRBG is instantiated from either an RBG2(P)
2053   or an RBG3 construction. In order to instantiate the RBG1 construction at a security strength of s
2054   bits, this Recommendation requires the source RBG to support a security strength of at least s bits
2055   and provide a bitstring that is 3s/2 bits long for most of the DRBGs. However, for a CTR_DRBG
2056   without a derivation function, a bitstring that is s + 128 bits long is required. (Note that an RBG3
2057   construction supports any desired security strength.)
2058   In the RBG2 and RBG3 constructions specified in Sections 5 and 6, respectively, the DRBG within
2059   the construction is instantiated using a bitstring with a certain amount of entropy obtained from a
2060   validated entropy source. 34 In order to instantiate the DRBG to support an s-bit security strength,
2061   a bitstring with at least 3s/2 bits of entropy is required for the instantiation of most of the DRBGs.
2062   Reseeding requires a bitstring with at least s bits of entropy. However, for a CTR_DRBG without
2063   a derivation function, a bitstring with exactly s + 128 full-entropy bits is required for instantiation
2064   and reseeding, either obtained directly from an entropy source that provides full-entropy output or
2065   from an entropy source via an approved (vetted) conditioning function (see Section 3.3).
2066   The RBG3 constructions specified in Section 6 are designed to provide full-entropy outputs but
2067   with a DRBG included in the design in case the entropy source fails undetectably. Entropy bits are
2068   possibly obtained from an entropy source via an approved (vetted) conditioning function. When
2069   the entropy source is working properly, an n-bit output from the RBG3 construction is said to
2070   provide n bits of entropy. The DRBG in an RBG3 construction is always required to support a
2071   256-bit security strength. If an entropy-source fails and the failure is undetected, the RBG3
2072   construction outputs are generated at a security strength of 256 bits. In this case, the security
2073   strength of a bitstring produced by the RBG is the minimum of 256 and its length (i.e.,
2074   security_strength = min(256, length)).
2075   In conclusion, entropy sources and properly functioning RBG3 constructions provide output with
2076   entropy. RBG1 and RBG2 constructions provide output with a security strength that depends on
2077   the security strength of the RBG instantiation and the length of the output. Likewise, if the entropy
2078   source used by an RBG3 construction fails undetectably, the output is then dependent on the
2079   DRBG within the construction (an RBG(P) construction) to produce output at a security strength
2080   of 256 bits.
2081   Because of the difference between the use of “entropy” to describe the output of an entropy source
2082   and the use of “security strength” to describe the output of a DRBG, the term “randomness” is
2083   used as a general term to mean either “entropy” or “security strength,” as appropriate. A
2084   “randomness source” is the general term for an entropy source or RBG that provides the
2085   randomness used by an RBG.
2086

       34
            However, note that the entropy-source output may be cryptographically processed by an approved conditioning function before being used.


                                                                              60
       NIST SP 800-90C 3pd (Third Public Draft)                                                      Recommendation for RBG Constructions
       September 2022

2087   Appendix B. RBG Examples (Informative)
2088   Appendix B.1 discusses and provides an example of the direct access to a DRBG used by an RBG3
2089   construction.
2090   Appendices B.2 – B.6 provide examples of each RBG construction. Not shown in the figures: if
2091   an error that indicates an RBG failure (e.g., a noise source in the entropy source has failed) is
2092   reported, RBG operation is terminated (see Section 7.1.2). For these examples, all entropy sources
2093   are considered to be physical entropy sources.

2094   B.1.         Direct DRBG Access in an RBG3 Construction
2095   An implementation may be designed so that the DRBG implementation used within an RBG3
2096   construction can be directly accessed by a consuming application 35 using the same or separate
2097   instantiations from the instantiation used by the RBG3 construction (see the examples in Figure
2098   19).




2099
2100                                                         Fig. 19. DRBG Instantiations

2101   In the leftmost example in Figure 19, the same internal state is used by the RBG3 construction and
2102   a directly accessible DRBG. The DRBG implementation is instantiated only once, and only a
2103   single state handle is obtained during instantiation (e.g., RBG3_state handle). 36 Generation and
       35
            Without using other components or functionality used by the RBG3 construction (see Sections 6.2 and 6.3).
       36
            Because only a single instantiation has been implemented, a state handle is not required.


                                                                               61
       NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
       September 2022

2104   reseeding for RBG3 operations use RBG3 function calls (see Sections 6.2 and 6.3), while
2105   generation and reseeding for direct DRBG access use RBG2 function calls (see Section 5.2) with
2106   the RBG3_state_handle. Using the same instantiation for both RBG3 operation and direct access
2107   to the DRBG requires additional reseeding processes in the case of an RBG3(RS) construction
2108   (see Section 6.3.2).
2109   In the rightmost example in Figure 19, different internal states are used by the RBG3 construction
2110   and a directly accessible DRBG. The DRBG implementation is instantiated twice – once for RBG3
2111   operations and a second time for direct access to the DRBG. A different state handle needs to be
2112   obtained for each instantiation (e.g., RBG3_state_handle and DRBG_state_handle). Generation
2113   and reseeding for RBG3 operations use RBG3 function calls and RBG3_state_handle (see Sections
2114   6.2 and 6.3), while generation and reseeding for direct DRBG access use RBG2 function calls and
2115   DRBG_state_handle (see Section 5.2).
2116   Multiple directly accessible DRBGs may also be incorporated into an implementation by creating
2117   multiple instantiations. However, no more than one directly accessible DRBG should share the
2118   same internal state with the RBG3 construction (i.e., if n directly accessible DRBGs are required,
2119   either n or n− 1 separate instantiations are required).
2120   The directly accessed DRBG instantiations are in the same security boundary as the RBG3
2121   construction. When accessed directly (rather than operating as part of the RBG3 construction), the
2122   DRBG instantiations are considered to be operating as RBG2(P) constructions as discussed in
2123   Section 5.

2124   B.2.    Example of an RBG1 Construction
2125   An RBG1 construction has access to a randomness source only during instantiation when it is
2126   seeded (see Section 4). For this example (see Figure 20), the DRBG used by the RBG1 construction
2127   and the randomness source reside in two different cryptographic modules with a secure channel
2128   connecting them during the instantiation process. Following DRBG instantiation, the secure
2129   channel is not available. For this example, the randomness source is an RBG2(P) construction (see
2130   Section 5) with a state handle of RBG2_state_handle.
2131   The targeted security strength for the RBG1 construction is 256 bits, so a DRBG from [SP800-
2132   90A] that is able to support this security strength must be used (HMAC_DRBG using SHA-256 is
2133   used in this example). A personalization_string is provided during instantiation, as recommended
2134   in Section 2.4.1.
2135   As discussed in Section 4, the randomness source (i.e., the RBG2(P) construction for this example)
2136   is not available during normal operation, so reseeding and prediction resistance cannot be
2137   provided.
2138   This example provides an RBG that is instantiated at a security strength of 256 bits.




                                                       62
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022




2139
2140                                     Fig. 20. RBG1 Construction Example


2141   B.2.1. Instantiation of the RBG1 Construction
2142   A physically secure channel is required to transport the entropy bits from the randomness source
2143   (the RBG2(P) construction) to the HMAC_DRBG during instantiation; an example of an RBG2(P)
2144   construction is provided in Appendix B.4. Thereafter, the randomness source and the secure
2145   channel are no longer available.
2146   The HMAC_DRBG is instantiated using the Instantiate_function, as specified in Section 2.8.1.1,
2147   with the following call:
2148          (status, RBG1_state_handle) = Instantiate_function (256, prediction_resistance_flag =
2149                                        FALSE, “Device 7056”).
2150           A security strength of 256 bits is requested for the HMAC_DRBG used in the RBG1
2151           construction.
2152           Since an RBG1 construction does not provide prediction resistance (see Section 4), the
2153           prediction_resistance_flag is set to FALSE.
2154           The personalization string to be used for this example is “Device 7056.”



                                                        63
       NIST SP 800-90C 3pd (Third Public Draft)                                                     Recommendation for RBG Constructions
       September 2022

2155   The Get_randomness-source_input call in the Instantiate_function results in a single request
2156   being sent to the randomness source to generate bits to establish the security strength (see Section
2157   4.2.1, item 2.a).
2158              The HMAC_DRBG requests 3s/2 = 384 bits from the randomness source, where s = the
2159              256-bit targeted security strength for the DRBG:
2160                    (status, randomness_bitstring) = Generate_function(RBG2_state_handle, 384, 256,
2161                                         prediction_resistance_request = TRUE).
2162              This call requests the randomness source (indicated by RBG2_state_handle) to generate
2163              384 bits at a security strength of 256 bits for the randomness input required for seeding the
2164              DRBG in the RBG1 construction. Prediction resistance is requested so that the randomness
2165              source (i.e., the RBG2(P) construction) is reseeded before generating the requested 384
2166              bits (see Requirement 17 in Section 4.4.1). Note that optional additional_input is not
2167              provided for this example.
2168        2. The RBG2(P) construction checks that the request can be handled (e.g., whether a security
2169           strength of 256 bits is supported). If the request is valid, 384 bits are generated after
2170           reseeding the RBG2(P) construction, the internal state of the RBG2(P) construction is
2171           updated, and status = SUCCESS is returned to the RBG1 construction along with the newly
2172           generated randomness_bitstring.
2173              If the request is determined to be invalid, status = FAILURE is returned along with a Null
2174              bitstring as the randomnessy_bitstring. The FAILURE status is subsequently returned from
2175              the Instantiate_function along with a Null value as the RBG1_state_handle, and the
2176              instantiation process is terminated.
2177    If a valid randomness_bitstring is returned from the RBG2(P) construction, the
2178    randomness_bitstring is used along with the personalization_string to create the seed to
2179    instantiate the DRBG (see [SP800-90A]). 37 If the instantiation is successful, the internal state is
2180    established, a status of SUCCESS is returned from the Instantiate_function with a state handle
2181    of RBG1_state_handle, and the RBG can be used to generate pseudorandom bits.

2182   B.2.2. Generation by the RBG1 Construction
2183   Assuming that the HMAC_DRBG in the RBG1 construction has been instantiated (see Appendix
2184   B.2.1), pseudorandom bits are requested from the RBG by a consuming application using the
2185   Generate_function call as specified in Section 2.8.1.2:
2186                     (status, returned_bits) = Generate_function (RBG1_state_handle,
2187           requested_number_of_bits, requested_security_strength, prediction_resistance_request =
2188                                          FALSE, additional_input).
2189              RBG1_state_handle was returned as the state handle during instantiation (see Appendix
2190              B.2.1).



        The first 256 bits of the randomness_bitstring are used as the randomness input, and the remaining 128 bits are used as the nonce in SP 800-90A,
       37

       Revision 1. A future update of SP 800-90A will revise this process by using the entire 384-bit string as the randomness input.


                                                                             64
       NIST SP 800-90C 3pd (Third Public Draft)                       Recommendation for RBG Constructions
       September 2022

2191           The requested_security_strength may be any value that is less than or equal to 256 (the
2192           instantiated security strength recorded in the DRBG’s internal state).
2193           Since prediction resistance cannot be provided in an RBG1 construction,
2194           prediction_resistance_request is set to FALSE. (Note that the prediction_resistance
2195           request input parameter could be omitted from the Generate_function call for this
2196           example).
2197           Any additional input is optional.
2198   The Generate_function returns an indication of the status. If status = SUCCESS, the
2199   requested_number_of_bits are provided as the returned_bits to the consuming application. If
2200   status = FAILURE, returned_bits is an empty (i.e., null) bitstring.

2201   B.3.    Example Using Sub-DRBGs Based on an RBG1 Construction
2202   This example uses an RBG1 construction to instantiate two sub-DRBGs: sub-DRBG1 and sub-
2203   DRBG2 (see Figure 21).




2204
2205                             Fig. 21. Sub-DRBGs Based on an RBG1 Construction

2206   The instantiation of the RBG1 construction is discussed in Appendix B.2. The RBG1 construction
2207   that is used as the source RBG includes an HMAC_DRBG and has been instantiated to provide a
2208   security strength of 256 bits. The state handle for the construction is RBG1_state_handle.
2209   For this example, Sub-DRBG1 will be instantiated to provide a security strength of 128 bits, and
2210   Sub-DRBG2 will be instantiated to provide a security strength of 256 bits. Both sub-DRBGs use
2211   the same DRBG algorithm as the RBG1 construction.
2212   Neither the RBG1 construction nor the sub-DRBGs can be reseeded or provide prediction
2213   resistance.
2214   This example provides the following capabilities:
2215       •   Access to the RBG1 construction to provide output generated at a security strength of 256
2216           bits (see Appendix B.2 for the RBG1 example)
2217       •   Access to one sub-DRBG (Sub-DRBG1) that provides output for an application that
2218           requires a security strength of no more than 128 bits

                                                       65
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

2219       •    Access to a second sub-DRBG (Sub-DRBG2) that provides output for a second application
2220            that requires a security strength of 256 bits

2221   B.3.1. Instantiation of the Sub-DRBGs
2222   Each sub-DRBG is instantiated using output from an RBG1 construction that is discussed in
2223   Appendix 62B.2.

2224   B.3.1.1.        Instantiating Sub-DRBG1
2225   Sub-DRBG1 is instantiated using the following Instantiate_function call (see Section 2.8.1.1):
2226       (status, sub-DRBG1_state_handle) = Instantiate_function (128, prediction_resistance_flag
2227                                  = FALSE, “Sub-DRBG App 1”).
2228       •    A security strength of 128 bits is requested from the DRBG indicated by the
2229            RBG1_state_handle.
2230       •    Setting “prediction_resistance_flag = FALSE” indicates that a consuming application will
2231            not be allowed to request prediction resistance. Optionally, the parameter can be omitted.
2232       •    The personalization string to be used for sub-DRBG1 is “Sub-DRBG App 1.”
2233       •    The returned state handle for sub-DRBG1 will be sub-DRBG1_state_handle.
2234   The randomness input for establishing the 128-bit security strength of sub-DRBG1 is requested
2235   using the following Generate_function call to the RBG1 construction):
2236           (status, randomness-source_input) = Generate_function(RBG1_state_handle, 192, 128,
2237                         prediction_resistance_request = FALSE, additional_input).
2238       •    192 bits are requested from the source RBG (indicated by RBG1_state_handle) at a security
2239            strength of 128 bits (192 = 128 + 64 = 3s/2).
2240       •    Setting “prediction_resistance_flag = FALSE” indicates that the source RBG (the RBG1
2241            construction) will not need to reseed itself before generating the requested output.
2242            Alternatively, the parameter can be omitted.
2243       •    Additional input is optional.
2244   If status = SUCCESS is returned from the Generate_function, the HMAC_DRBG in sub-DRBG1
2245   is seeded using the randomness-source_input obtained from the RBG1 construction and the
2246   personalization_string provided in the Instantiate_function call (i.e., “Sub-DRBG App 1”). The
2247   internal state is recorded for Sub-DRBG1 (including the 128-bit security strength), and status =
2248   SUCCESS is returned from the Instantiate_function along with a state handle of sub-
2249   DRBG1_state_handle.
2250   If status = FAILURE is returned from the Generate_function call, then the internal state is not
2251   created, status = FAILURE and a Null state handle are returned from the Instantiate_function,
2252   and the sub-DRBG1 cannot be used to generate bits.




                                                        66
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

2253   B.3.1.2.         Instantiating Sub-DRBG2
2254   Sub-DRBG2 is instantiated using the following Instantiate_function call (see Section 2.8.1.1):
2255    (status, sub-DRBG2_state_handle) = Instantiate_function (256, prediction_resistance_flag =
2256                                 FALSE, “Sub-DRBG App 2”).
2257       •     A security strength of 256 bits is requested from the randomness source (the DRBG
2258             construction indicated by RBG1_state_handle).
2259       •     Setting “prediction_resistance_flag = FALSE” indicates that a consuming application will
2260             not be allowed to request prediction resistance. Optionally, the parameter can be omitted.
2261       •     The personalization string to be used for sub-DRBG2 is “Sub-DRBG App 2.”
2262       •     The returned state handle will be sub-DRBG2_state_handle.
2263   The randomness input for establishing the 256-bit security strength of sub-DRBG2 is requested
2264   using the following Generate_function call to the RBG1 construction):
2265           (status, randomness-source_input) = Generate_function(RBG1_state_handle, 384, 256,
2266                         prediction_resistance_request = FALSE, additional_input).
2267       •     384 bits are requested from the source RBG (indicated by RBG1_state_handle) at a security
2268             strength of 256 bits (384 = 256 + 128 = 3s/2).
2269       •     Setting “prediction_resistance_flag = FALSE” indicates that the source RBG (the RBG1
2270             construction) will not need to reseed itself before generating the requested output.
2271             Alternatively, the parameter can be omitted.
2272       •     Additional input is optional.
2273   If status = SUCCESS is returned from the Generate_function, the HMAC_DRBG in sub-DRBG2
2274   is seeded using the randomness-source_input obtained from the RBG1 construction and the
2275   personalization_string provided in the Instantiate_function call (i.e., “Sub-DRBG App 2”). The
2276   internal state is recorded for Sub-DRBG2 (including the 256-bit security strength), and status =
2277   SUCCESS is returned from the Instantiate_function along with a state handle of sub-
2278   DRBG2_state_handle.
2279   If status = FAILURE is returned from the Generate_function call, then the internal state is not
2280   created, status = FAILURE and a Null state handle are returned from the Instantiate_function,
2281   and the sub-DRBG2 cannot be used to generate bits.

2282   B.3.2. Pseudorandom Bit Generation by Sub-DRBGs
2283   Assuming that the sub-DRBG has been successfully instantiated (see Appendix B.3.1),
2284   pseudorandom bits are requested from the sub-DRBG by a consuming application using the
2285   Generate_function call as specified in Section 2.8.1.2:
2286           (status, returned_bits) = Generate_function(state_handle, requested_number_of_bits,
2287                      security_strength, prediction_resistance_request, additional input),
2288   where:
2289       •     For sub_DRBG1, state_handle = sub-DRBG1_state_handle;

                                                         67
       NIST SP 800-90C 3pd (Third Public Draft)                           Recommendation for RBG Constructions
       September 2022

2290           For sub-DRBG2, state_handle = sub-DRBG2_state_handle;
2291       •   requested_number_of_bits must be ≤ 219 (see SP 800-90A for HMAC_DRBG);
2292       •   For sub_DRBG1, security strength must be ≤ 128;
2293       •   For sub_DRBG2, security strength must be ≤ 256;
2294       •   prediction_resistance_request = FALSE (or is omitted); and
2295       •   additional_input is optional.

2296   B.4.    Example of an RBG2(P) or RBG2(NP) Construction
2297   For this example of an RBG2 construction, no conditioning function is used, and only a single
2298   DRBG instantiation will be used (see Figure 22), so a state handle is not needed. Full-entropy
2299   output is not provided by the entropy source, which may be either a physical or non-physical
2300   entropy source.




2301
2302                                              Fig. 22. RBG2 Example

2303   The targeted security strength is 256 bits, so a DRBG from [SP800-90A] that can support this
2304   security strength must be used; HMAC_DRBG using SHA-256 is used in this example. A
2305   personalization_string may be provided, as recommended in Section 2.4.1. Reseeding and
2306   prediction resistance are supported and will be available on demand.
2307   This example provides the following capabilities:
2308       •   An RBG instantiated at a security strength of 256 bits, and
2309       •   Access to an entropy source to provide prediction resistance.



                                                           68
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

2310   B.4.1. Instantiation of an RBG2 Construction
2311   The DRBG in the RBG2 construction is instantiated using an Instantiate_function call (see
2312   Section 2.8.1.1):
2313       (status) = Instantiate_function (256, prediction_resistance_flag = TRUE, “RBG2 42”).
2314       •   Since there is only a single instantiation, a state_handle is not used for this example.
2315       •   Using “prediction_resistance_flag = TRUE”, the RBG is notified that prediction resistance
2316           may be requested in subsequent Generate_function calls.
2317       •   The personalization string to be used for this example is “RBG2 42.”
2318   The entropy for establishing the security strength (s) of the DRBG (i.e., s = 256 bits) is requested
2319   using the following Get_ES_Bitstring call to the entropy source (see Section 2.8.2.2 and item 2
2320   in Section 5.2.1):
2321                           (status, entropy_bitstring) = Get_ES_Bitstring(384),
2322   where 3s/2 = 384 bits of entropy are requested from the entropy source.
2323   If status = SUCCESS is returned from the Get_ES_Bitstring call, the HMAC_DRBG is seeded
2324   using entropy_bitstring, and the personalization_string is “RBG2 42.” The internal state is
2325   recorded (including the security strength of the instantiation), and status = SUCCESS is returned
2326   to the consuming application by the Instantiate_function.
2327   If status = FAILURE is returned from the Get_ES_Bitstring call, then the internal state is not
2328   created, status = FAILURE and a Null state handle are returned by the Instantiate_function to
2329   the consuming application, and the RBG cannot be used to generate bits.

2330   B.4.2. Generation in an RBG2 Construction
2331   Assuming that the RBG has been successfully instantiated (see Appendix B.4.1), pseudorandom
2332   bits are requested from the RBG by a consuming application using the Generate_function call as
2333   specified in Section 2.8.1.2:
2334      (status, returned_bits) = Generate_function(requested_number_of_bits, security_strength,
2335                            prediction_resistance_request, additional input).
2336       •   Since there is only a single instantiation of the HMAC_DRBG, a state_handle was not
2337           returned from the Instantiate_function (see Appendix B.4.1) and is not used during the
2338           Generate_function call.
2339       •   The requested_security_strength may be any value that is less than or equal to 256 (the
2340           instantiated security strength recorded in the HMAC_DRBG’s internal state).
2341       •   prediction_resistance_request = TRUE if prediction resistance is requested and FALSE
2342           otherwise.
2343       •   Additional input is optional.
2344   If prediction resistance is requested, a reseed of the HMAC_DRBG is requested by the
2345   Generate_function before the requested bits are generated (see Appendix B.4). If status =


                                                        69
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

2346   FAILURE is returned from the Reseed_function, status = FAILURE is also returned to the
2347   consuming application by the Generate_function, along with a Null value as the returned_bits.
2348   Whether or not prediction resistance is requested, a status indication is returned from the
2349   Generate_function call. If status = SUCCESS, a bitstring of at least requested_number_of_bits
2350   is provided as the returned_bits to the consuming application. If status = FAILURE, returned_bits
2351   is an empty bitstring.

2352   B.4.3. Reseeding an RBG2 Construction
2353   The HMAC_DRBG will be reseeded 1) if explicitly requested by the consuming application, 2)
2354   whenever generation with prediction resistance is requested by the Generate_function, or 3)
2355   automatically during a Generate_function call at the end of the DRBG’s designed seedlife (see
2356   the Generate_function specification in [SP800-90A)].
2357   The Reseed_function call, as specified in Section 2.8.1.3, is:
2358                                 status = Reseed_function(additional_input).
2359       •   Since there is only a single instantiation of the HMAC_DRBG, a state_handle was not
2360           returned from the Instantiate_function (see Appendix B.4.1) and is not used during the
2361           Reseed_function call.
2362       •   The additional_input is optional.
2363   Since entropy is obtained directly from the entropy source (case 2 in Section 5.2.3), the
2364   implementation has replaced the Get_randomness-source_input call used by the
2365   Reseed_function in [SP800-90A] with a Get_ES_Bitstring call.
2366   The HMAC_DRBG is reseeded with a security strength of 256 bits as follows:
2367                           (status, entropy_bitstring) = Get_ES_Bitstring(256).
2368   If status = SUCCESS is returned by Get_ES_Bitstring, the entropy_bitstring contains at least 256
2369   bits of entropy and is at least 256 bits long. Status = SUCCESS is returned to the calling application
2370   (e.g., the Generate_function) by the Reseed_function.
2371   If status = FAILURE, entropy_bitstring is an empty (e.g., null) bitstring. The HMAC_DRBG is
2372   not reseeded, and status= FAILURE is returned from Reseed_function to the calling application.

2373   B.5.    Example of an RBG3(XOR) Construction
2374   This construction is specified in Section 6.2 and requires a DRBG and a source of full-entropy
2375   bits. For this example, the entropy source itself does not provide full-entropy output, so the vetted
2376   Hash conditioning function listed in [SP800-90B] using SHA-256 is used as an external
2377   conditioning function.
2378   The Hash_DRBG specified in [SP800-90A] will be used as the DRBG, with SHA-256 used as the
2379   underlying hash function for the DRBG (note the use of SHA-256 for both the Hash_DRBG and
2380   the vetted conditioning function). The DRBG will obtain input directly from the RBG’s entropy
2381   source without conditioning (as shown in Figure 23), since bits with full entropy are not required


                                                        70
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

2382   for input to the DRBG, even though full-entropy bits are required for input to the XOR operation
2383   (shown as “⊕” in the figure) from the entropy source via the conditioning function.




2384
2385                                  Fig. 23. RBG3(XOR) Construction Example

2386   As specified in Section 6.2, the DRBG must be instantiated (and reseeded) at 256 bits, which is
2387   possible for SHA-256.
2388   In this example, only a single instantiation is used, and a personalization string is provided during
2389   instantiation. The DRBG is not directly accessible.
2390   Calls are made to the RBG using the RBG3(XOR) calls specified in Section 6.2.
2391   The Hash_DRBG itself is not directly accessible.
2392   This example provides the following capabilities:
2393       •   Full-entropy output by the RBG,
2394       •   Fallback to the security strength provided by the Hash_DRBG (256 bits) if the entropy
2395           source has an undetected failure, and
2396       •   Access to an entropy source to instantiate and reseed the Hash_DRBG.

2397   B.5.1. Instantiation of an RBG3(XOR) Construction
2398   The Hash_DRBG is instantiated using:
2399                      status = RBG3(XOR)_DRBG_Instantiate(“RBG3(XOR)”),

                                                        71
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

2400       •   Since the DRBG is not directly accessible, there is no need for a separate instantiation, so
2401           there is also no need for the return of a state handle.
2402       •   The personalization string for the DRBG is “RBG3(XOR).”
2403   The RBG3(XOR)_DRBG_Instantiate function                 in   Section    6.2.1.1   uses   a   DRBG
2404   Instantiate_function to seed the Hash_DRBG:
2405               (status) = Instantiate_function(256, prediction_resistance_flag = FALSE,
2406                                        personalization_string).
2407       •   Since the DRBG is not directly accessible, there is no need for a separate instantiation, so
2408           there is also no need for the return of a state handle.
2409       •   The DRBG is instantiated at a security strength of 256 bits.
2410       •   The DRBG is notified that prediction resistance is not required using
2411           prediction_resistance_flag = FALSE. Since the DRBG will not be accessed directly,
2412           prediction_resistance will never be requested. Optionally, the implementation could omit
2413           this parameter.
2414       •   The personalization string for the DRBG is “RBG3(XOR).” It was provided in the
2415           RBG3(XOR)_DRBG_Instantiate call.
2416   Section 6.2.1.1 refers to Section 5.2.1 for further information on instantiating the DRBG.
2417   The entropy for establishing the security strength (s) of the Hash_DRBG (i.e., where s = 256 bits)
2418   is requested using the following Get_ES_Bitstring call:
2419                           (status, entropy_bitstring) = Get_ES_Bitstring(384),
2420   where 3s/2 = 384 bits of entropy are requested from the entropy source.
2421   If status = SUCCESS is returned from the Get_ES_Bitstring call, the Hash_DRBG is seeded
2422   using the entropy_ bitstring and the personalization_string (“RBG3(XOR)”). The internal state is
2423   recorded (including the 256-bit security strength of the instantiation), and status = SUCCESS is
2424   returned to the consuming application by the Instantiate_function. The RBG can be used to
2425   generate full-entropy bits.
2426   If status = FAILURE is returned from the Get_ES_Bitstring call, status = FAILURE and a Null
2427   state handle are returned to the consuming application from the Instantiate_function. `The
2428   Hash_DRBG’s internal state is not established, and the RBG cannot be used to generate bits.

2429   B.5.2. Generation by an RBG3(XOR) Construction
2430   Assuming that the Hash_DRBG has been instantiated (see Appendix B.4.1), the RBG can be called
2431   by a consuming application to generate output with full entropy.




                                                        72
       NIST SP 800-90C 3pd (Third Public Draft)                         Recommendation for RBG Constructions
       September 2022

2432   B.5.2.1.        Generation
2433   Let n indicate the requested number of bits to generate. The construction in Section 6.3.1.2 is used
2434   as follows:
2435   RBG3(XOR)_Generate:
2436   Input: integer n, string additional_input.
2437   Output: integer status, bitstring returned_bits.
2438   Process:
2439       1. (status, ES_bits) = Get_conditioned_full-entropy_input(n).
2440       2. If (status ≠ SUCCESS), then return(status, Null).
2441       3. (status, DRBG_bits) = Generate_function(n, 256, prediction_resistance_request =
2442          FALSE, additional_input).
2443       4. If (status ≠ SUCCESS), then return(status, Null).
2444       5. returned_bits = ES_bits ⊕ DRBG_bits.
2445       6. Return SUCCESS, returned_bits.
2446   Note that the state_handle parameter is not used in the RBG3(XOR)_Generate call or the
2447   Generate_function call (in step 3) for this example since a state_handle was not returned from
2448   the RBG3(XOR)_DRBG_Instantiate function (see Appendix B.5.1).
2449   In step 1, the entropy source is accessed via the conditioning function using the
2450   Get_conditioned_full-entropy_input routine (see Appendix B.5.2.2) to obtain n bits with full
2451   entropy.
2452   Step 2 checks that the Get_conditioned_full-entropy_input call in step 1 was successful. If it
2453   was not successful, the RBG3(XOR)_Generate function is aborted, returning status ≠ SUCCESS
2454   to the consuming application along with a Null bitstring as the returned_bits.
2455   Step 3 calls the Hash_DRBG to generate n bits to be XORed with the n-bit output of the entropy
2456   source (ES_Bits; see step 1) in order to produce the RBG output. Note that a request for prediction
2457   resistance is not made in the Generate_function call (i.e., prediction_resistance_request =
2458   FALSE). Optionally, this parameter could be omitted since prediction resistance is never
2459   requested.
2460   Step 4 checks that the Generate_function invoked in step 3 was successful. If it was not
2461   successful, the RBG3(XOR)_Generate function is aborted, returning status ≠ SUCCESS to the
2462   consuming application along with a Null bitstring as the returned_bits.
2463   If step 3 returns an indication of success, the ES_bits returned in step 1 and the DRBG_bits obtained
2464   in step 3 are XORed together in step 5. The result is returned to the consuming application in step
2465   6.




                                                          73
       NIST SP 800-90C 3pd (Third Public Draft)                          Recommendation for RBG Constructions
       September 2022

2466   B.5.2.2.          Get_conditioned_full-entropy_input Function
2467   The Get_conditioned_full-entropy_input construction is specified in Section 3.3.2. For this
2468   example, the routine becomes the following:
2469   Get_conditioned_full_entropy_ input:
2470      Input: integer n.
2471       Output: integer status, bitstring Full-entropy_bitstring.
2472   Process:
2473      1. temp = the Null string.
2474       2. ctr = 0.
2475       3. While ctr < n, do
2476           3.1    (status, entropy_bitstring) = Get_ES_Bitstring (320).
2477           3.2   If (status ≠ SUCCESS), then return (status, invalid_string).
2478           3.3   conditioned_output = HashSHA_256(entropy_bitstring).
2479           3.4   temp =temp || conditioned_output.
2480           3.5   ctr = ctr + 256.
2481       4. Full-entropy_bitstring = leftmost(temp, n).
2482       5. Return (SUCCESS, Full-entropy_bitstring).
2483   Steps 1 and 2 initialize the temporary bitstring (temp) for holding the full-entropy bitstring being
2484   assembled, and the counter (ctr) that counts the number of full-entropy bits produced so far.
2485   Step 3 obtains and processes the entropy for each iteration.
2486       •   Step 3.1 requests 320 bits from the entropy source(s) (i.e., output_len + 64 bits, where
2487           output_len = 256 for SHA-256).
2488       •   Step 3.2 checks whether or not the status returned in step 3.1 indicated a success. If the
2489           status did not indicate a success, the status is returned along with an invalid (e.g., Null)
2490           bitstring as the Full-entropy_bitstring.
2491       •   Step 3.3 invokes the Hash conditioning function (see Section 3.3.1.2) using SHA-256 for
2492           processing the entropy_bitstring obtained from step 3.1.
2493       •   Step 3.4 concatenates the conditioned_output received in step 3.3 to the temporary bitstring
2494           (temp), and step 3.5 increments the counter for the number of full-entropy bits that have
2495           been produced so far.
2496   After at least n bits have been produced in step 3, step 4 selects the leftmost n bits of the temporary
2497   string (temp) to be returned as the bitstring with full entropy.
2498   Step 5 returns the result from step 4 (Full-entropy_bitstring).




                                                         74
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022

2499   B.5.3. Reseeding an RBG3(XOR) Construction
2500   The Hash_DRBG must be reseeded at the end of its designed seedlife and may be reseeded on
2501   demand (e.g., by the consuming application). Reseeding will be automatic whenever the end of
2502   the DRBG’s seedlife is reached during a Generate_function call (see [SP800-90A]). For this
2503   example, whether reseeding is done automatically during a Generate_function call or is
2504   specifically requested by a consuming application, the Reseed_function call is:
2505                               status = Reseed_function(additional_input).
2506       •   The state_handle parameter is not used in the Reseed_function call since a state_handle
2507           was not returned from the RBG3(XOR)_DRBG_Instantiate function (see Appendix
2508           B.5.1).
2509       •   The security strength for reseeding the Hash_DRBG is recorded in the internal state as 256
2510           bits.
2511       •   Additional input is optional.
2512   Section 6.3.1.3 refers to Section 5.2.3 for reseeding the Hash_DRBG. Since entropy is obtained
2513   directly from the entropy source and no conditioning function is used (case 2 in Section 6.3.2), the
2514   implementation has replaced the Get_randomness-source_input call used by the
2515   Reseed_function in [SP800-90A] with a Get_ES_Bitstring call.
2516   The Hash_DRBG is reseeded with a security strength of 256 bits as follows:
2517                           (status, entropy_bitstring) = Get_ES_Bitstring(256).
2518   If status = SUCCESS is returned by the Get_ES_Bitstring call, entropy_bitstring consists of at
2519   least 256 bits that contain at least 256 bits of entropy. These bits are used to reseed the
2520   Hash_DRBG. Status = SUCCESS is then returned to the calling application by the
2521   Reseed_function.
2522   If status = FAILURE, entropy_bitstring is an empty (e.g., null) bitstring. The Hash_DRBG is not
2523   reseeded, and status ≠ SUCCESS is returned from the Reseed_function to the calling application
2524   (e.g., the Generate_function).

2525   B.6.    Example of an RBG3(RS) Construction
2526   This construction is specified in Section 6.3 and requires an entropy source and a DRBG (see the
2527   left half of Figure 24 outlined in green). The DRBG is directly accessible using the same
2528   instantiation that is used by the RBG3(RS) construction (i.e., they share the same internal state).
2529   When accessed directly, the DRBG behaves as an RBG2(P) construction (see the right half of
2530   Figure 24 outlined in blue).




                                                       75
       NIST SP 800-90C 3pd (Third Public Draft)                        Recommendation for RBG Constructions
       September 2022




2531
2532                                   Fig. 24. RBG3(RS) Construction Example

2533   The CTR_DRBG specified in [SP800-90A] will be used as the DRBG with AES-256 used as the
2534   underlying block cipher for the DRBG. The CTR_DRBG will be implemented using a derivation
2535   function (located inside the CTR_DRBG implementation). In this case, full-entropy output will
2536   not be required for the entropy source (see [SP800-90A]). However, an alternative example could
2537   use the CTR_DRBG without a derivation function. In that case, either the entropy source would
2538   need to provide full-entropy output, or a vetted conditioning function would be required to
2539   condition the entropy to provide full-entropy bits before providing it to the DRBG.
2540   As specified in Section 6.2, a DRBG used as part of the RBG must be instantiated (and reseeded)
2541   at a security strength of 256 bits (which AES-256 can support).
2542   For this example, the DRBG has a fixed security strength (256 bits), which is hard-coded into the
2543   implementation so will not be used as an input parameter.
2544   Calls are made to the RBG as specified in Section 6.3.1. Calls made to the directly accessible
2545   DRBG (part of a RBG2(P) construction) use the RBG calls specified in Section 5.2. Since an
2546   entropy source is always available, the directly accessed DRBG can be reseeded and support
2547   prediction resistance.
2548   If the entropy source produces output at a slow rate, a consuming application might call the
2549   RBG3(RS) construction only when full-entropy bits are required, obtaining all other output from
2550   the directly accessible DRBG.
2551   This example provides the following capabilities:


                                                        76
       NIST SP 800-90C 3pd (Third Public Draft)                      Recommendation for RBG Constructions
       September 2022

2552       •   Full-entropy output by the RBG3(RS) construction,
2553       •   Fallback to the security strength of the RBG3(RS)’s DRBG instantiation (256 bits) if the
2554           entropy source has an undetected failure,
2555       •   Direct access to an RBG2(P) construction with a security strength of 256 bits for faster
2556           output when full-entropy output is not required,
2557       •   Access to an entropy source to instantiate and reseed the DRBG, and
2558       •   Prediction resistance support for the directly accessed DRBG.

2559   B.6.1. Instantiation of an RBG3(RS) Construction
2560   Instantiation for this example consists of the instantiation of the CTR_DRBG used by the
2561   RBG3(RS) construction.
2562   The DRBG is initialized as follows:
2563       (status, RBG3(RS)_state_handle) = RBG3(RS)_DRBG_Instantiate(“RBG3(RS) 2021”).
2564       •   “RBG3(RS) 2021” is to be used as the personalization string for the DRBG instantiation
2565           used in the RBG3(RS) construction.
2566       •   RBG3(RS)_state_handle is returned as the state handle for the DRBG instantiation used
2567           by the RBG3(RS) construction.
2568   Appendices B.6.2 and B.6.3 will show the differences between the operation of the RBG3(RS)
2569   and RBG2(P) constructions.

2570   B.6.2. Generation by an RBG3(RS) Construction
2571   Assuming that the DRBG instantiation for the RBG3(RS) construction has been instantiated (see
2572   Appendix B.6.1), the RBG can be invoked by a consuming application to generate outputs with
2573   full entropy. The RBG3(RS)_Generate construction in Section 6.3.1.2.1 is invoked using
2574              (status, returned_bits) = RBG3(RS)_Generate(RBG3(RS)_state_handle, n,
2575                                        additional_information).
2576       •   The RBG3(RS)_state_handle (obtained during instantiation; see Appendix B.6.1) is used
2577           to access the internal state information for the DRBG instantiation for the RBG3(RS)
2578           construction.
2579       •   The consuming application requests n bits.
2580       •   The input of additional_information is optional.
2581   The process is specified in Section 6.3.1.2.1. The state handle in the Generate_function is
2582   RBG3(RS)_state_handle, which was obtained during instantiation (see Appendix B.6.1).

2583   B.6.3. Generation by the Directly Accessible DRBG
2584   Assuming that the DRBG has been instantiated (see Appendix B.6.1), it can be accessed directly
2585   by a consuming application in the same manner as the RBG2(P) example in Appendix B.4.2 using

                                                       77
       NIST SP 800-90C 3pd (Third Public Draft)                                                        Recommendation for RBG Constructions
       September 2022

2586   the RBG3(RS)_state_handle obtained during instantiation (see Appendix B.6.1) and using a
2587   Generate_function call:
2588                     (status, returned_bits) = Generate_function(RBG3(RS)_state_handle, n,
2589                                  prediction_resistance_request, additional_input).
2590   Note that the security strength parameter (256) was omitted since its value has been hard coded.
2591   Requirement 2 in Section 6.3.2 requires that the DRBG be reseeded whenever a request for
2592   generation by a directly accessible DRBG follows a request for generation by the RBG3(RS)
2593   construction. For this example, the internal state includes an indication about whether the last use
2594   of the DRBG was as part of the RBG3(RS) construction or was directly accessible. If the
2595   Generate_function (above) does not include a request for prediction resistance (e.g.,
2596   prediction_resistance_request was not set to TRUE), then the DRBG will be reseeded anyway
2597   using the entropy source before generating output if the previous use of the DRBG was part of the
2598   RBG3(RS) construction.

2599   B.6.4. Reseeding a DRBG
2600   When operating as part of the RBG3(RS) construction, the Reseed_function is invoked one or
2601   more times to produce full-entropy output when the RBG3(RS)_Generate function is invoked by
2602   a consuming application.
2603   When operating as part of the RBG2(P) construction (the directly accessible DRBG), the DRBG
2604   is reseeded 1) if explicitly requested by the consuming application, 2) automatically whenever a
2605   generation with prediction resistance is requested during a direct access of the DRBG (see
2606   Appendix B.6.3), 3) whenever the previous use of the DRBG was by the RBG3(RS)_Generate
2607   function (see Appendix B.6.2), or 4) automatically during a Generate_function call at the end of
2608   the seedlife of the RBG2(P) construction (see the Generate_function specification in [SP800-
2609   90A]).
2610   The Reseed_function call is:
2611                       status = Reseed_function(RBG3(RS)_state_handle, additional_input).
2612        •     The state_handle is RBG3(RS)_state handle, and
2613        •     additional_input is optional. 38
2614   The DRBG is reseeded with a security strength of 256 bits as follows:
2615                                    (status, entropy_bitstring) = Get_ES_Bitstring(256).
2616   If status = SUCCESS is returned by Get_ES_Bitstring, entropy_bitstring consists of at least 256
2617   bits containing at least 256 bits of entropy. Status = SUCCESS is returned to the calling application
2618   by the Reseed_function.


       38
         Note that when the RBG3(RS) Generate function uses a Hash_DRBG, HMAC_DRBG, or CTR_DRBG with no derivation function and Method
       A, whereby 64 bits of additional entropy are required to produce output_len bits with full entropy (see Section 7.3.1,.2.1, step 3.1), the additional
       64 bits of entropy obtained in step 3.1.1 is provided to the Generate_function (in step 3.1.3) with prediction requested. In Section 9.3 of SP 800-
       90A, the Generate_function reseeds the DRBG when prediction resistance is requested using entropy from the entropy source and any additional
       input that is provided – the additional 64 bits of entropy, in this case.


                                                                               78
       NIST SP 800-90C 3pd (Third Public Draft)                          Recommendation for RBG Constructions
       September 2022

2619   If status ≠ SUCCESS (e.g., the entropy source has failed), entropy_bitstring is an empty (e.g., null)
2620   bitstring, the DRBG is not reseeded, and a FAILURE status is returned from Reseed_function to
2621   the calling application (e.g., the Generate_function).
2622

2623   Appendix C. Addendum to SP 800-90A: Instantiating and Reseeding a CTR_DRBG

2624   C.1.         Background and Scope
2625   The CTR_DRBG, specified in [SP800-90A], uses the block cipher AES and has two versions that
2626   may be implemented: with or without a derivation function.
2627   When a derivation function is not used, SP 800-90A requires the use of bitstrings with full entropy
2628   for instantiating and reseeding a CTR_DRBG. This addendum permits the use of an RBG
2629   compliant with SP 800-90C to provide the required seed material for the CTR_DRBG when
2630   implemented as specified in SP 800-90C (see Appendix C.2).
2631   When a derivation function is used in a CTR_DRBG implementation, SP 800-90A specifies the
2632   use of the block cipher derivation function. This addendum modifies the requirements in SP 800-
2633   90A for the CTR_DRBG by specifying two additional derivation functions that may be used
2634   instead of the block cipher derivation function (see Appendix C.3).

2635   C.2.         CTR_DRBG without a Derivation Function
2636   When a derivation function is not used, SP 800-90A requires that seedlen full-entropy bits be
2637   provided as the randomness input (e.g., from an entropy source that provides full-entropy output),
2638   where seedlen is the length of the key to be used by the CTR_DRBG plus the length of the output
2639   block. 39 SP 800-90C includes an approved method for externally conditioning the output of an
2640   entropy source to provide a bitstring with full entropy when using an entropy source that does not
2641   provide full-entropy output.
2642   SP 800-90C also permits the use of seed material from an RBG when the DRBG to be instantiated
2643   and reseeded is implemented and used as specified in SP 800-90C.

2644   C.3.         CTR_DRBG using a Derivation Function
2645   When a derivation function is used within a CTR_DRBG, SP 800-90A specifies the use of the
2646   Block_cipher_df included in that document during instantiation and reseeding to adjust the length
2647   of the seed material to seedlen bits, where
2648                             seedlen = the security strength + the block length.
2649   For AES, seedlen = 256, 320 or 384 bits (see [SP800-90A], Rev. 1). During generation, the length
2650   of any additional input provided during the generation request is adjusted to seedlen bits as well
2651   (see SP 800-90A).


       39
            128 bits for AES.


                                                         79
       NIST SP 800-90C 3pd (Third Public Draft)                      Recommendation for RBG Constructions
       September 2022

2652   Two alternative derivation functions are specified in Appendices C.3.2 and C.3.3. Appendix C.3.1
2653   discusses the keys and constants for use with the alternative derivation functions specified in
2654   Appendices C.3.2 and C.3.3.

2655   C.3.1. Derivation Keys and Constants
2656   Both of the derivation methods specified in Appendices C.3.2 and C.3.3 an AES derivation key
2657   (df_Key) whose length shall meet or exceed the instantiated security strength of the DRBG
2658   instantiation.
2659   The df_Key may be set to any value and may be the current value of a key used by the DRBG.
2660   These alternative methods use three 128-bit constants C1, C2 and C3, which are defined as:
2661            C1 = 000000...00
2662            C2 = 101010...10
2663            C3 = 010101...01
2664   The value of B used in Appendices C.3.2 and C.3.3 depends on the length of the AES derivation
2665   key (df_Key). When the length of df_Key = 128 bits, then B = 2. Otherwise, B = 3.

2666   C.3.2.       Derivation Function Using CMAC
2667   CMAC is a block-cipher mode of operation specified in [SP800-38B]. The CMAC_df derivation
2668   function is specified as follows:
2669   CMAC_df:
2670   Input: bitstring input_string, integer number_of_bits_to_return.
2671   Output: bitstring Z.
2672   Process:
2673       1. Let C1, C2, C3 be 128-bit blocks defined as 000000...0, 101010...10, 010101...01,
2674          respectively.
2675       2. Get df_Key.       Comment: See Appendix C.3.1.
2676       3. Z = the Null string.
2677       4. For i = 1 to B:
2678       Z = Z || CMAC(df_Key, Ci || input_string).
2679       5. Z = leftmost (Z, number_of_bits_to_return).
2680       6. Return(Z).

2681   C.3.3.       Derivation Function Using CBC-MAC
2682   This CBC-MAC derivation function shall only be used when the input_string has the following
2683   properties:

                                                        80
       NIST SP 800-90C 3pd (Third Public Draft)                            Recommendation for RBG Constructions
       September 2022

2684       •    The length of the input string is always a fixed length.
2685       •    The length of the input_string is an integer multiple of 128 bits. Let m be the number of
2686            128-bit blocks in the input_string.
2687   This derivation function is specified as follows:
2688   CBC-MAC_df:
2689   Input: bitstring input_string, integer number_of_bits_to_return.
2690   Output: bitstring Z.
2691   Process:
2692       1. Let C1, C2, C3 be 128-bit blocks defined as 000000...0, 101010...10, 010101...01,
2693          respectively.
2694       2. Get df_Key.        Comment: See Appendix C.3.1.
2695       3. Z = the Null string.
2696       4. Let input_string = S1 || S2 || ... || Sm, where the Si are contiguous 128-bit blocks.
2697       5. For j = 1 to B:
2698            5.1   S0 = Cj.
2699            5.2   V = 128-bit block of all zeroes.
2700            5.3 For i = 0 to m:
2701                  V = Encrypt(df_Key, V ⊕ Si).              Comment: Perform the cipher operation
2702                                                            specified in [FIPS197].
2703            5.4   Z = Z || V.
2704       6.   Z = leftmost(Z, number_of_bit_to_return).
2705       7. Return(Z).




                                                           81
       NIST SP 800-90C 3pd (Third Public Draft)                                                 Recommendation for RBG Constructions
       September 2022

2706   Appendix D. List of Symbols, Abbreviations, and Acronyms
2707   AES
2708   Advanced Encryption Standard 40

2709   API
2710   Application Programming Interface

2711   CAVP
2712   Cryptographic Algorithm Validation Program

2713   CDF
2714   Cumulative Distribution Function

2715   CMVP
2716   Cryptographic Module Validation Program

2717   DRBG
2718   Deterministic Random Bit Generator 41

2719   FIPS
2720   Federal Information Processing Standard

2721   ITL
2722   Information Technology Laboratory

2723   MAC
2724   Message Authentication Code

2725   NIST
2726   National Institute of Standards and Technology

2727   RAM
2728   Random Access Memory

2729   RBG
2730   Random Bit Generator

2731   SP
2732   (NIST) Special Publication

2733   Sub-DRBG
2734   Subordinate DRBG

2735   TDEA
2736   Triple Data Encryption Algorithm 42

2737   XOR
2738   Exclusive-Or (operation)

2739   0x
2740   A string of x zeroes

2741   x


       40
          As specified in [FIPS 197].
       41
          Mechanism specified in [SP800-90A].
       42
          As specified in [SP 800-67], Recommendation for the Triple Data Encryption Algorithm (TDEA) Block Cipher.


                                                                          82
       NIST SP 800-90C 3pd (Third Public Draft)                                      Recommendation for RBG Constructions
       September 2022

2742   The ceiling of x; the least integer number that is not less than the real number x. For example, 3 = 3, and 5.5 = 6.

2743   ε
2744   A positive constant that is assumed to be smaller than 2−32

2745   E(X)
2746   The expected value of the random variable X

2747   len(x)
2748   The length of x in bits

2749   min(a, b)
2750   The minimum of a and b

2751   output_len
2752   The bit length of the output block of a cryptographic primitive

2753   s
2754   The security strength

2755   X⊕Y
2756   Boolean bitwise exclusive-or (also bitwise addition modulo 2) of two bitstrings X and Y of the same length

2757   +
2758   Addition over real numbers

2759   ×
2760   Multiplication over real numbers




                                                                  83
       NIST SP 800-90C 3pd (Third Public Draft)                                     Recommendation for RBG Constructions
       September 2022

2761   Appendix E. Glossary
2762   adversary
2763   A malicious entity whose goal is to determine, to guess, or to influence the output of an RBG.

2764   approved
2765   An algorithm or technique for a specific cryptographic use that is specified in a FIPS or NIST Recommendation,
2766   adopted in a FIPS or NIST Recommendation, or specified in a list of NIST-approved security functions.

2767   backtracking resistance
2768   A property of a DRBG that provides assurance that compromising the current internal state of the DRBG does not
2769   weaken previously generated outputs. See SP 800-90A for a more complete discussion. (Contrast with prediction
2770   resistance.)

2771   biased
2772   A random variable is said to be biased if values of the finite sample space are selected with unequal probability.
2773   Contrast with unbiased.
2774   big-endian format
2775   A format in which the most significant bytes (the bytes containing the high-order or leftmost bits) are stored in the
2776   lowest address with the following bytes in sequentially higher addresses.

2777   bitstring
2778   An ordered sequence (string) of 0s and 1s. The leftmost bit is the most significant bit.

2779   block cipher
2780   A parameterized family of permutations on bitstrings of a fixed length; the parameter that determines the permutation
2781   is a bitstring called the key.

2782   conditioning function (external)
2783   As used in SP 800-90C, a deterministic function that is used to produce a bitstring with full entropy.

2784   consuming application
2785   An application that uses random outputs from an RBG.

2786   cryptographic boundary
2787   An explicitly defined physical or conceptual perimeter that establishes the physical and/or logical bounds of a
2788   cryptographic module and contains all of the hardware, software, and/or firmware components of a cryptographic
2789   module.

2790   cryptographic module
2791   The set of hardware, software, and/or firmware that implements cryptographic functions (including cryptographic
2792   algorithms and key generation) and is contained within the cryptographic boundary.

2793   deterministic random bit generator (DRBG)
2794   An RBG that produces random bitstrings by applying a deterministic algorithm to initial seed material.
2795   Note: A DRBG at least has access to a randomness source initially.
2796   Note: A portion of the seed material is secret.

2797   digitization
2798   The process of generating raw discrete digital values from non-deterministic events (e.g., analog noise sources) within
2799   a noise source.

2800   entropy
2801   A measure of disorder, randomness, or variability in a closed system.



                                                                 84
       NIST SP 800-90C 3pd (Third Public Draft)                                        Recommendation for RBG Constructions
       September 2022

2802   Note: The entropy of a random variable X is a mathematical measure of the amount of information gained by an
2803   observation of X.
2804   Note: The most common concepts are Shannon entropy and min-entropy. Min-entropy is the measure used in SP 800-
2805   90.

2806   entropy rate
2807   The validated rate at which an entropy source provides entropy in terms of bits per entropy-source output (e.g., five
2808   bits of entropy per eight-bit output sample).

2809   entropy source
2810   The combination of a noise source, health tests, and optional conditioning component that produce bitstrings
2811   containing entropy. A distinction is made between entropy sources having physical noise sources and those having
2812   non-physical noise sources.
2813   Note: Health tests are comprised of continuous tests and startup tests.

2814   fresh entropy
2815   A bitstring that is output from a non-deterministic randomness source that has not been previously used to generate
2816   output or has otherwise been made externally available.
2817   Note: The randomness source should be an entropy source or RBG3 construction.

2818   full-entropy bitstring
2819   A bitstring with ideal randomness (i.e., the amount of entropy per bit is equal to 1). This Recommendation assumes
2820   that a bitstring has full entropy if the entropy rate is at least 1 − ε, where ε is at most 2−32.

2821   hash function
2822   A (mathematical) function that maps values from a large (possibly very large) domain into a smaller range. The
2823   function satisfies the following properties:
2824       1.   (One-way) It is computationally infeasible to find any input that maps to any pre-specified output.
2825       2.   (Collision-free) It is computationally infeasible to find any two distinct inputs that map to the same output.

2826   health testing
2827   Testing within an implementation immediately prior to or during normal operations to obtain assurance that the
2828   implementation continues to perform as implemented and validated.

2829   ideal randomness source
2830   The source of an ideal random sequence of bits. Each bit of an ideal random sequence is unpredictable and unbiased,
2831   with a value that is independent of the values of the other bits in the sequence. Prior to an observation of the sequence,
2832   the value of each bit is equally likely to be 0 or 1, and the probability that a particular bit will have a particular value
2833   is unaffected by knowledge of the values of any or all of the other bits. An ideal random sequence of n bits contains n
2834   bits of entropy.

2835   independent entropy sources
2836   Two entropy sources are independent if knowledge of the output of one entropy source provides no information about
2837   the output of the other entropy source.

2838   instantiate
2839   The process of initializing a DRBG with sufficient randomness to generate pseudorandom bits at the desired security
2840   strength.

2841   internal state (of a DRBG)
2842   The collection of all secret and non-secret information about an RBG or entropy source that is stored in memory at a
2843   given point in time.




                                                                   85
       NIST SP 800-90C 3pd (Third Public Draft)                                       Recommendation for RBG Constructions
       September 2022

2844   known-answer test
2845   A test that uses a fixed input/output pair to detect whether a deterministic component was implemented correctly or
2846   to detect whether it continues to operate correctly.

2847   min-entropy
2848   A lower bound on the entropy of a random variable. The precise formulation for min-entropy is (−log2 max pi) for a
2849   discrete distribution having probabilities p1, ..., pk. Min-entropy is often used as a measure of the unpredictability of a
2850   random variable.

2851   must
2852   Used in SP 800-90C to indicate a requirement that may not be testable by a CMVP testing lab. Note that must may
2853   be coupled with not to become must not.

2854   noise source
2855   A source of unpredictable data that outputs raw discrete digital values. The digitization mechanism is considered part
2856   of the noise source. A distinction is made between physical noise sources and non-physical noise sources.

2857   non-physical entropy source
2858   An entropy source whose primary noise source is non-physical.

2859   non-physical noise source
2860   A noise source that typically exploits system data and/or user interaction to produce digitized random data.

2861   non-validated entropy source
2862   An entropy source that has not been validated by the CMVP as conforming to SP 800-90B.

2863   null string
2864   An empty bitstring.

2865   personalization string
2866   An optional input value to a DRBG during instantiation to make one DRBG instantiation behave differently from
2867   other instantiations.

2868   physical entropy source
2869   An entropy source whose primary noise source is physical.

2870   physical noise source
2871   A noise source that exploits physical phenomena (e.g., thermal noise, shot noise, jitter, metastability, radioactive
2872   decay, etc.) from dedicated hardware designs (using diodes, ring oscillators, etc.) or physical experiments to produce
2873   digitized random data.

2874   prediction resistance
2875   A property of a DRBG that provides assurance that compromising the current internal state of the DRBG does not
2876   allow future DRBG outputs to be predicted past the point where the DRBG has been reseeded with sufficient entropy.
2877   See SP 800-90A for a more complete discussion. (Contrast with backtracking resistance.)

2878   pseudocode
2879   An informal, high-level description of a computer program, algorithm, or function that resembles a simplified
2880   programming language.

2881   random bit generator (RBG)
2882   A device or algorithm that outputs a random sequence that is effectively indistinguishable from statistically
2883   independent and unbiased bits.

2884   randomness
2885   As used in this Recommendation, the unpredictability of a bitstring. If the randomness is produced by a non-deterministic
2886   source (e.g., an entropy source or RBG3 construction), the unpredictability is dependent on the quality of the source. If


                                                                   86
       NIST SP 800-90C 3pd (Third Public Draft)                                    Recommendation for RBG Constructions
       September 2022

2887   the randomness is produced by a deterministic source (e.g., a DRBG), the unpredictability is based on the capability of
2888   an adversary to break the cryptographic algorithm for producing the pseudorandom bitstring.

2889   randomness input
2890   An input bitstring from a randomness source that provides an assessed minimum amount of randomness (e.g., entropy)
2891   for a DRBG. See min-entropy.

2892   randomness source
2893   A source of randomness for an RBG. The randomness source may be an entropy source or an RBG construction.

2894   RBG1 construction
2895   An RBG construction with the DRBG and the randomness source in separate cryptographic modules.

2896   RBG2 construction
2897   An RBG construction with one or more entropy sources and a DRBG within the same cryptographic module. This
2898   RBG construction does not provide full-entropy output.

2899   RBG2(NP) construction
2900   A non-physical RBG2 construction. An RBG2 construction that obtains entropy from one or more validated non-
2901   physical entropy sources and possibly from one or more validated physical entropy sources. This RBG construction
2902   does not provide full-entropy output.

2903   RBG2(P) construction
2904   A physical RBG2 construction. An RBG construction that includes a DRBG and one or more entropy sources in the
2905   same cryptographic module. Only the entropy from validated physical entropy sources is counted when fulfilling an
2906   entropy request within the RBG. This RBG construction does not provide full-entropy output.

2907   RBG3 construction
2908   An RBG construction that includes a DRBG and one or more entropy sources in the same cryptographic module.
2909   When working properly, bitstrings that have full entropy are produced. Sometimes called a non-deterministic random
2910   bit generator (NRBG) or true random number (or bit) generator.

2911   reseed
2912   To refresh the internal state of a DRBG with seed material. The seed material should contain sufficient entropy to
2913   allow recovery from a possible compromise.

2914   sample space
2915   The set of all possible outcomes of an experiment.

2916   secure channel
2917   A physically protected secure path for transferring data between two cryptographic modules that ensures
2918   confidentiality, integrity, and replay protection as well as mutual authentication between the modules.

2919   security boundary
2920   For an entropy source: A conceptual boundary that is used to assess the amount of entropy provided by the values
2921   output from the entropy source. The entropy assessment is performed under the assumption that any observer
2922   (including any adversary) is outside of that boundary during normal operation.
2923   For a DRBG: A conceptual boundary that contains all of the DRBG functions and internal states required for a DRBG.
2924   For an RBG: A conceptual boundary that is defined with respect to one or more threat models that includes an
2925   assessment of the applicability of an attack and the potential harm caused by the attack.

2926   security strength
2927   A number associated with the amount of work (i.e., the number of basic operations of some sort) that is required to
2928   “break” a cryptographic algorithm or system in some way. In this Recommendation, the security strength is specified
2929   in bits and is a specific value from the set {128, 192, 256}. If the security strength associated with an algorithm or
2930   system is s bits, then it is expected that (roughly) 2s basic operations are required to break it.


                                                                 87
       NIST SP 800-90C 3pd (Third Public Draft)                                     Recommendation for RBG Constructions
       September 2022

2931   Note: This is a classical definition that does not consider quantum attacks. This definition will be revised to address
2932   quantum issues in the future.

2933   seed
2934   To initialize the internal state of a DRBG with seed material. The seed material should contain sufficient entropy to
2935   meet security requirements.

2936   seed material
2937   A bitstring that is used as input to a DRBG. The seed material determines a portion of the internal state of the DRBG.

2938   seedlife
2939   The period of time between instantiating or reseeding a DRBG with seed material and reseeding the DRBG with seed
2940   material containing fresh entropy or uninstantiation of the DRBG.

2941   shall
2942   The term used to indicate a requirement that is testable by a testing lab. Shall may be coupled with not to become
2943   shall not. See Testable requirement.

2944   should
2945   The term used to indicate an important recommendation. Ignoring the recommendation could result in undesirable
2946   results. Note that should may be coupled with not to become should not.

2947   state handle
2948   A pointer to the internal state information for a particular DRBG instantiation.

2949   subordinate DRBG (sub-DRBG)
2950   A DRBG that is instantiated by an RBG1 construction.

2951   support a security strength (by a DRBG)
2952   The DRBG has been instantiated at a security strength that is equal to or greater than the security strength requested
2953   for the generation of random bits.

2954   targeted security strength
2955   The security strength that is intended to be supported by one or more implementation-related choices (e.g., algorithms,
2956   cryptographic primitives, auxiliary functions, parameter sizes, and/or actual parameters).

2957   testable requirement
2958   A requirement that can be tested for compliance by a testing lab via operational testing, a code review, or a review of
2959   relevant documentation provided for validation. A testable requirement is indicated using a shall statement.

2960   threat model
2961   A description of a set of security aspects that need to be considered. A threat model can be defined by listing a set of
2962   possible attacks along with the probability of success and the potential harm from each attack.

2963   unbiased
2964   A random variable is said to be unbiased if all values of the finite sample space are chosen with the same
2965   probability. Contrast with biased.
2966   uninstantiate
2967   The termination of a DRBG instantiation.

2968   validated entropy source
2969   An entropy source that has been successfully validated by the CAVP and CMVP for conformance to SP 800-90B.




                                                                 88
